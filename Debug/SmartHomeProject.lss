
SmartHomeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000027ac  00002820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002904  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001311  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000643d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000657d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000066ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009221  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 45 12 	call	0x248a	; 0x248a <main>
      7a:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_enuRestoreData>:
/*services layer*/
#include "EEPROM_serv.h"


ES_t EEPROM_enuRestoreData(EEPROM_Handler_t *Copy_pstrEEPROMHandler)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	c3 54       	subi	r28, 0x43	; 67
     b40:	d0 40       	sbci	r29, 0x00	; 0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	fe 01       	movw	r30, r28
     b4e:	ee 5b       	subi	r30, 0xBE	; 190
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
	ES_t Local_enuErrState=ES_NOK;
     b56:	fe 01       	movw	r30, r28
     b58:	ef 5b       	subi	r30, 0xBF	; 191
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 83       	st	Z, r24

	u8 temp ;

	/*at first read the admins and users count*/
	EEPROM_enuReadDataByte(&(Copy_pstrEEPROMHandler->AdminsCount) , 90); // number of admins
     b60:	fe 01       	movw	r30, r28
     b62:	ee 5b       	subi	r30, 0xBE	; 190
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	88 96       	adiw	r24, 0x28	; 40
     b6c:	6a e5       	ldi	r22, 0x5A	; 90
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 13 12 	call	0x2426	; 0x2426 <EEPROM_enuReadDataByte>
	EEPROM_enuReadDataByte(&(Copy_pstrEEPROMHandler->UsersCount)  , 95); // number of users
     b74:	fe 01       	movw	r30, r28
     b76:	ee 5b       	subi	r30, 0xBE	; 190
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	8f 5a       	subi	r24, 0xAF	; 175
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	6f e5       	ldi	r22, 0x5F	; 95
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	0e 94 13 12 	call	0x2426	; 0x2426 <EEPROM_enuReadDataByte>
	/*******************************************************
	               array of admins IDs
	 ******************************************************/

	/*Admin ID from address 0 to 19*/
	temp = Copy_pstrEEPROMHandler->AdminsCount;
     b8a:	fe 01       	movw	r30, r28
     b8c:	ee 5b       	subi	r30, 0xBE	; 190
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	01 90       	ld	r0, Z+
     b92:	f0 81       	ld	r31, Z
     b94:	e0 2d       	mov	r30, r0
     b96:	80 a5       	ldd	r24, Z+40	; 0x28
     b98:	fe 01       	movw	r30, r28
     b9a:	e0 5c       	subi	r30, 0xC0	; 192
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	80 83       	st	Z, r24
	for(u8 i=0 ; i<temp; i++)
     ba0:	1f ae       	std	Y+63, r1	; 0x3f
     ba2:	87 c0       	rjmp	.+270    	; 0xcb2 <EEPROM_enuRestoreData+0x17c>
	{
		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->AdminID + i) , i);
     ba4:	fe 01       	movw	r30, r28
     ba6:	ee 5b       	subi	r30, 0xBE	; 190
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	20 81       	ld	r18, Z
     bac:	31 81       	ldd	r19, Z+1	; 0x01
     bae:	8f ad       	ldd	r24, Y+63	; 0x3f
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	a9 01       	movw	r20, r18
     bb6:	48 0f       	add	r20, r24
     bb8:	59 1f       	adc	r21, r25
     bba:	8f ad       	ldd	r24, Y+63	; 0x3f
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	ca 01       	movw	r24, r20
     bc2:	b9 01       	movw	r22, r18
     bc4:	0e 94 13 12 	call	0x2426	; 0x2426 <EEPROM_enuReadDataByte>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a8 e4       	ldi	r26, 0x48	; 72
     bce:	b2 e4       	ldi	r27, 0x42	; 66
     bd0:	8d ab       	std	Y+53, r24	; 0x35
     bd2:	9e ab       	std	Y+54, r25	; 0x36
     bd4:	af ab       	std	Y+55, r26	; 0x37
     bd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd8:	6d a9       	ldd	r22, Y+53	; 0x35
     bda:	7e a9       	ldd	r23, Y+54	; 0x36
     bdc:	8f a9       	ldd	r24, Y+55	; 0x37
     bde:	98 ad       	ldd	r25, Y+56	; 0x38
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	4a e7       	ldi	r20, 0x7A	; 122
     be6:	53 e4       	ldi	r21, 0x43	; 67
     be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	89 ab       	std	Y+49, r24	; 0x31
     bf2:	9a ab       	std	Y+50, r25	; 0x32
     bf4:	ab ab       	std	Y+51, r26	; 0x33
     bf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bf8:	69 a9       	ldd	r22, Y+49	; 0x31
     bfa:	7a a9       	ldd	r23, Y+50	; 0x32
     bfc:	8b a9       	ldd	r24, Y+51	; 0x33
     bfe:	9c a9       	ldd	r25, Y+52	; 0x34
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e8       	ldi	r20, 0x80	; 128
     c06:	5f e3       	ldi	r21, 0x3F	; 63
     c08:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c0c:	88 23       	and	r24, r24
     c0e:	2c f4       	brge	.+10     	; 0xc1a <EEPROM_enuRestoreData+0xe4>
		__ticks = 1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	98 ab       	std	Y+48, r25	; 0x30
     c16:	8f a7       	std	Y+47, r24	; 0x2f
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <EEPROM_enuRestoreData+0x162>
	else if (__tmp > 65535)
     c1a:	69 a9       	ldd	r22, Y+49	; 0x31
     c1c:	7a a9       	ldd	r23, Y+50	; 0x32
     c1e:	8b a9       	ldd	r24, Y+51	; 0x33
     c20:	9c a9       	ldd	r25, Y+52	; 0x34
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	4f e7       	ldi	r20, 0x7F	; 127
     c28:	57 e4       	ldi	r21, 0x47	; 71
     c2a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c2e:	18 16       	cp	r1, r24
     c30:	4c f5       	brge	.+82     	; 0xc84 <EEPROM_enuRestoreData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c32:	6d a9       	ldd	r22, Y+53	; 0x35
     c34:	7e a9       	ldd	r23, Y+54	; 0x36
     c36:	8f a9       	ldd	r24, Y+55	; 0x37
     c38:	98 ad       	ldd	r25, Y+56	; 0x38
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	51 e4       	ldi	r21, 0x41	; 65
     c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	bc 01       	movw	r22, r24
     c4c:	cd 01       	movw	r24, r26
     c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	98 ab       	std	Y+48, r25	; 0x30
     c58:	8f a7       	std	Y+47, r24	; 0x2f
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <EEPROM_enuRestoreData+0x144>
     c5c:	89 e1       	ldi	r24, 0x19	; 25
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9e a7       	std	Y+46, r25	; 0x2e
     c62:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c64:	8d a5       	ldd	r24, Y+45	; 0x2d
     c66:	9e a5       	ldd	r25, Y+46	; 0x2e
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <EEPROM_enuRestoreData+0x132>
     c6c:	9e a7       	std	Y+46, r25	; 0x2e
     c6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c70:	8f a5       	ldd	r24, Y+47	; 0x2f
     c72:	98 a9       	ldd	r25, Y+48	; 0x30
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	98 ab       	std	Y+48, r25	; 0x30
     c78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c7c:	98 a9       	ldd	r25, Y+48	; 0x30
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	69 f7       	brne	.-38     	; 0xc5c <EEPROM_enuRestoreData+0x126>
     c82:	14 c0       	rjmp	.+40     	; 0xcac <EEPROM_enuRestoreData+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c84:	69 a9       	ldd	r22, Y+49	; 0x31
     c86:	7a a9       	ldd	r23, Y+50	; 0x32
     c88:	8b a9       	ldd	r24, Y+51	; 0x33
     c8a:	9c a9       	ldd	r25, Y+52	; 0x34
     c8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	98 ab       	std	Y+48, r25	; 0x30
     c96:	8f a7       	std	Y+47, r24	; 0x2f
     c98:	8f a5       	ldd	r24, Y+47	; 0x2f
     c9a:	98 a9       	ldd	r25, Y+48	; 0x30
     c9c:	9c a7       	std	Y+44, r25	; 0x2c
     c9e:	8b a7       	std	Y+43, r24	; 0x2b
     ca0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ca2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <EEPROM_enuRestoreData+0x16e>
     ca8:	9c a7       	std	Y+44, r25	; 0x2c
     caa:	8b a7       	std	Y+43, r24	; 0x2b
	               array of admins IDs
	 ******************************************************/

	/*Admin ID from address 0 to 19*/
	temp = Copy_pstrEEPROMHandler->AdminsCount;
	for(u8 i=0 ; i<temp; i++)
     cac:	8f ad       	ldd	r24, Y+63	; 0x3f
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	8f af       	std	Y+63, r24	; 0x3f
     cb2:	8f ad       	ldd	r24, Y+63	; 0x3f
     cb4:	fe 01       	movw	r30, r28
     cb6:	e0 5c       	subi	r30, 0xC0	; 192
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	90 81       	ld	r25, Z
     cbc:	89 17       	cp	r24, r25
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <EEPROM_enuRestoreData+0x18c>
     cc0:	71 cf       	rjmp	.-286    	; 0xba4 <EEPROM_enuRestoreData+0x6e>
	/*******************************************************
	               array of admins passwords
	 ******************************************************/

	/*Admin password from address 20 to 39*/
	temp = Copy_pstrEEPROMHandler->AdminsCount + 20;
     cc2:	fe 01       	movw	r30, r28
     cc4:	ee 5b       	subi	r30, 0xBE	; 190
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	01 90       	ld	r0, Z+
     cca:	f0 81       	ld	r31, Z
     ccc:	e0 2d       	mov	r30, r0
     cce:	80 a5       	ldd	r24, Z+40	; 0x28
     cd0:	8c 5e       	subi	r24, 0xEC	; 236
     cd2:	fe 01       	movw	r30, r28
     cd4:	e0 5c       	subi	r30, 0xC0	; 192
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
	for(u8 i=20 ; i<temp ; i++)
     cda:	84 e1       	ldi	r24, 0x14	; 20
     cdc:	8e af       	std	Y+62, r24	; 0x3e
     cde:	8e c0       	rjmp	.+284    	; 0xdfc <EEPROM_enuRestoreData+0x2c6>
	{
		u8 Local_u8ArrIndex = 0;
     ce0:	1d ae       	std	Y+61, r1	; 0x3d

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->AdminPAS + Local_u8ArrIndex) , i);
     ce2:	fe 01       	movw	r30, r28
     ce4:	ee 5b       	subi	r30, 0xBE	; 190
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	9c 01       	movw	r18, r24
     cee:	2c 5e       	subi	r18, 0xEC	; 236
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a9 01       	movw	r20, r18
     cfa:	48 0f       	add	r20, r24
     cfc:	59 1f       	adc	r21, r25
     cfe:	8e ad       	ldd	r24, Y+62	; 0x3e
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	ca 01       	movw	r24, r20
     d06:	b9 01       	movw	r22, r18
     d08:	0e 94 13 12 	call	0x2426	; 0x2426 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
     d0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	8d af       	std	Y+61, r24	; 0x3d
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 e4       	ldi	r26, 0x48	; 72
     d18:	b2 e4       	ldi	r27, 0x42	; 66
     d1a:	8f a3       	std	Y+39, r24	; 0x27
     d1c:	98 a7       	std	Y+40, r25	; 0x28
     d1e:	a9 a7       	std	Y+41, r26	; 0x29
     d20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d22:	6f a1       	ldd	r22, Y+39	; 0x27
     d24:	78 a5       	ldd	r23, Y+40	; 0x28
     d26:	89 a5       	ldd	r24, Y+41	; 0x29
     d28:	9a a5       	ldd	r25, Y+42	; 0x2a
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a e7       	ldi	r20, 0x7A	; 122
     d30:	53 e4       	ldi	r21, 0x43	; 67
     d32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	8b a3       	std	Y+35, r24	; 0x23
     d3c:	9c a3       	std	Y+36, r25	; 0x24
     d3e:	ad a3       	std	Y+37, r26	; 0x25
     d40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d42:	6b a1       	ldd	r22, Y+35	; 0x23
     d44:	7c a1       	ldd	r23, Y+36	; 0x24
     d46:	8d a1       	ldd	r24, Y+37	; 0x25
     d48:	9e a1       	ldd	r25, Y+38	; 0x26
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d56:	88 23       	and	r24, r24
     d58:	2c f4       	brge	.+10     	; 0xd64 <EEPROM_enuRestoreData+0x22e>
		__ticks = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9a a3       	std	Y+34, r25	; 0x22
     d60:	89 a3       	std	Y+33, r24	; 0x21
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <EEPROM_enuRestoreData+0x2ac>
	else if (__tmp > 65535)
     d64:	6b a1       	ldd	r22, Y+35	; 0x23
     d66:	7c a1       	ldd	r23, Y+36	; 0x24
     d68:	8d a1       	ldd	r24, Y+37	; 0x25
     d6a:	9e a1       	ldd	r25, Y+38	; 0x26
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	4c f5       	brge	.+82     	; 0xdce <EEPROM_enuRestoreData+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	6f a1       	ldd	r22, Y+39	; 0x27
     d7e:	78 a5       	ldd	r23, Y+40	; 0x28
     d80:	89 a5       	ldd	r24, Y+41	; 0x29
     d82:	9a a5       	ldd	r25, Y+42	; 0x2a
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9a a3       	std	Y+34, r25	; 0x22
     da2:	89 a3       	std	Y+33, r24	; 0x21
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <EEPROM_enuRestoreData+0x28e>
     da6:	89 e1       	ldi	r24, 0x19	; 25
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	98 a3       	std	Y+32, r25	; 0x20
     dac:	8f 8f       	std	Y+31, r24	; 0x1f
     dae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db0:	98 a1       	ldd	r25, Y+32	; 0x20
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <EEPROM_enuRestoreData+0x27c>
     db6:	98 a3       	std	Y+32, r25	; 0x20
     db8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	89 a1       	ldd	r24, Y+33	; 0x21
     dbc:	9a a1       	ldd	r25, Y+34	; 0x22
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	9a a3       	std	Y+34, r25	; 0x22
     dc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	89 a1       	ldd	r24, Y+33	; 0x21
     dc6:	9a a1       	ldd	r25, Y+34	; 0x22
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f7       	brne	.-38     	; 0xda6 <EEPROM_enuRestoreData+0x270>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <EEPROM_enuRestoreData+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dce:	6b a1       	ldd	r22, Y+35	; 0x23
     dd0:	7c a1       	ldd	r23, Y+36	; 0x24
     dd2:	8d a1       	ldd	r24, Y+37	; 0x25
     dd4:	9e a1       	ldd	r25, Y+38	; 0x26
     dd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9a a3       	std	Y+34, r25	; 0x22
     de0:	89 a3       	std	Y+33, r24	; 0x21
     de2:	89 a1       	ldd	r24, Y+33	; 0x21
     de4:	9a a1       	ldd	r25, Y+34	; 0x22
     de6:	9e 8f       	std	Y+30, r25	; 0x1e
     de8:	8d 8f       	std	Y+29, r24	; 0x1d
     dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dec:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <EEPROM_enuRestoreData+0x2b8>
     df2:	9e 8f       	std	Y+30, r25	; 0x1e
     df4:	8d 8f       	std	Y+29, r24	; 0x1d
	               array of admins passwords
	 ******************************************************/

	/*Admin password from address 20 to 39*/
	temp = Copy_pstrEEPROMHandler->AdminsCount + 20;
	for(u8 i=20 ; i<temp ; i++)
     df6:	8e ad       	ldd	r24, Y+62	; 0x3e
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	8e af       	std	Y+62, r24	; 0x3e
     dfc:	8e ad       	ldd	r24, Y+62	; 0x3e
     dfe:	fe 01       	movw	r30, r28
     e00:	e0 5c       	subi	r30, 0xC0	; 192
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	90 81       	ld	r25, Z
     e06:	89 17       	cp	r24, r25
     e08:	08 f4       	brcc	.+2      	; 0xe0c <EEPROM_enuRestoreData+0x2d6>
     e0a:	6a cf       	rjmp	.-300    	; 0xce0 <EEPROM_enuRestoreData+0x1aa>

	/*******************************************************
	               array of users IDs
	 ******************************************************/
	/*User ID from address 40 to 59*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 40;
     e0c:	fe 01       	movw	r30, r28
     e0e:	ee 5b       	subi	r30, 0xBE	; 190
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	fc 01       	movw	r30, r24
     e18:	ef 5a       	subi	r30, 0xAF	; 175
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	88 5d       	subi	r24, 0xD8	; 216
     e20:	fe 01       	movw	r30, r28
     e22:	e0 5c       	subi	r30, 0xC0	; 192
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 83       	st	Z, r24
	for(u8 i=40 ; i<temp ; i++)
     e28:	88 e2       	ldi	r24, 0x28	; 40
     e2a:	8c af       	std	Y+60, r24	; 0x3c
     e2c:	8e c0       	rjmp	.+284    	; 0xf4a <EEPROM_enuRestoreData+0x414>
	{
		u8 Local_u8ArrIndex = 0;
     e2e:	1b ae       	std	Y+59, r1	; 0x3b

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->UserID + Local_u8ArrIndex) , i);
     e30:	fe 01       	movw	r30, r28
     e32:	ee 5b       	subi	r30, 0xBE	; 190
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	9c 01       	movw	r18, r24
     e3c:	27 5d       	subi	r18, 0xD7	; 215
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	8b ad       	ldd	r24, Y+59	; 0x3b
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a9 01       	movw	r20, r18
     e48:	48 0f       	add	r20, r24
     e4a:	59 1f       	adc	r21, r25
     e4c:	8c ad       	ldd	r24, Y+60	; 0x3c
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	ca 01       	movw	r24, r20
     e54:	b9 01       	movw	r22, r18
     e56:	0e 94 13 12 	call	0x2426	; 0x2426 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
     e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	8b af       	std	Y+59, r24	; 0x3b
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a8 e4       	ldi	r26, 0x48	; 72
     e66:	b2 e4       	ldi	r27, 0x42	; 66
     e68:	89 8f       	std	Y+25, r24	; 0x19
     e6a:	9a 8f       	std	Y+26, r25	; 0x1a
     e6c:	ab 8f       	std	Y+27, r26	; 0x1b
     e6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	69 8d       	ldd	r22, Y+25	; 0x19
     e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8d 8b       	std	Y+21, r24	; 0x15
     e8a:	9e 8b       	std	Y+22, r25	; 0x16
     e8c:	af 8b       	std	Y+23, r26	; 0x17
     e8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e90:	6d 89       	ldd	r22, Y+21	; 0x15
     e92:	7e 89       	ldd	r23, Y+22	; 0x16
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <EEPROM_enuRestoreData+0x37c>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9c 8b       	std	Y+20, r25	; 0x14
     eae:	8b 8b       	std	Y+19, r24	; 0x13
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <EEPROM_enuRestoreData+0x3fa>
	else if (__tmp > 65535)
     eb2:	6d 89       	ldd	r22, Y+21	; 0x15
     eb4:	7e 89       	ldd	r23, Y+22	; 0x16
     eb6:	8f 89       	ldd	r24, Y+23	; 0x17
     eb8:	98 8d       	ldd	r25, Y+24	; 0x18
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <EEPROM_enuRestoreData+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	69 8d       	ldd	r22, Y+25	; 0x19
     ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9c 8b       	std	Y+20, r25	; 0x14
     ef0:	8b 8b       	std	Y+19, r24	; 0x13
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <EEPROM_enuRestoreData+0x3dc>
     ef4:	89 e1       	ldi	r24, 0x19	; 25
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9a 8b       	std	Y+18, r25	; 0x12
     efa:	89 8b       	std	Y+17, r24	; 0x11
     efc:	89 89       	ldd	r24, Y+17	; 0x11
     efe:	9a 89       	ldd	r25, Y+18	; 0x12
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <EEPROM_enuRestoreData+0x3ca>
     f04:	9a 8b       	std	Y+18, r25	; 0x12
     f06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8b 89       	ldd	r24, Y+19	; 0x13
     f0a:	9c 89       	ldd	r25, Y+20	; 0x14
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
     f10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	9c 89       	ldd	r25, Y+20	; 0x14
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <EEPROM_enuRestoreData+0x3be>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <EEPROM_enuRestoreData+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9c 8b       	std	Y+20, r25	; 0x14
     f2e:	8b 8b       	std	Y+19, r24	; 0x13
     f30:	8b 89       	ldd	r24, Y+19	; 0x13
     f32:	9c 89       	ldd	r25, Y+20	; 0x14
     f34:	98 8b       	std	Y+16, r25	; 0x10
     f36:	8f 87       	std	Y+15, r24	; 0x0f
     f38:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3a:	98 89       	ldd	r25, Y+16	; 0x10
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <EEPROM_enuRestoreData+0x406>
     f40:	98 8b       	std	Y+16, r25	; 0x10
     f42:	8f 87       	std	Y+15, r24	; 0x0f
	/*******************************************************
	               array of users IDs
	 ******************************************************/
	/*User ID from address 40 to 59*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 40;
	for(u8 i=40 ; i<temp ; i++)
     f44:	8c ad       	ldd	r24, Y+60	; 0x3c
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	8c af       	std	Y+60, r24	; 0x3c
     f4a:	8c ad       	ldd	r24, Y+60	; 0x3c
     f4c:	fe 01       	movw	r30, r28
     f4e:	e0 5c       	subi	r30, 0xC0	; 192
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	90 81       	ld	r25, Z
     f54:	89 17       	cp	r24, r25
     f56:	08 f4       	brcc	.+2      	; 0xf5a <EEPROM_enuRestoreData+0x424>
     f58:	6a cf       	rjmp	.-300    	; 0xe2e <EEPROM_enuRestoreData+0x2f8>

	/*******************************************************
	               array of users passwords
	 ******************************************************/
	/*User password from address 60 to 79*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 60;
     f5a:	fe 01       	movw	r30, r28
     f5c:	ee 5b       	subi	r30, 0xBE	; 190
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	fc 01       	movw	r30, r24
     f66:	ef 5a       	subi	r30, 0xAF	; 175
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	84 5c       	subi	r24, 0xC4	; 196
     f6e:	fe 01       	movw	r30, r28
     f70:	e0 5c       	subi	r30, 0xC0	; 192
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 83       	st	Z, r24
	for(u8 i=60 ; i<temp ;i++)
     f76:	8c e3       	ldi	r24, 0x3C	; 60
     f78:	8a af       	std	Y+58, r24	; 0x3a
     f7a:	8e c0       	rjmp	.+284    	; 0x1098 <EEPROM_enuRestoreData+0x562>
	{
		u8 Local_u8ArrIndex = 0;
     f7c:	19 ae       	std	Y+57, r1	; 0x39

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->UserPAS + Local_u8ArrIndex) , i);
     f7e:	fe 01       	movw	r30, r28
     f80:	ee 5b       	subi	r30, 0xBE	; 190
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	9c 01       	movw	r18, r24
     f8a:	23 5c       	subi	r18, 0xC3	; 195
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	89 ad       	ldd	r24, Y+57	; 0x39
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	48 0f       	add	r20, r24
     f98:	59 1f       	adc	r21, r25
     f9a:	8a ad       	ldd	r24, Y+58	; 0x3a
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	ca 01       	movw	r24, r20
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 13 12 	call	0x2426	; 0x2426 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
     fa8:	89 ad       	ldd	r24, Y+57	; 0x39
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	89 af       	std	Y+57, r24	; 0x39
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a8 e4       	ldi	r26, 0x48	; 72
     fb4:	b2 e4       	ldi	r27, 0x42	; 66
     fb6:	8b 87       	std	Y+11, r24	; 0x0b
     fb8:	9c 87       	std	Y+12, r25	; 0x0c
     fba:	ad 87       	std	Y+13, r26	; 0x0d
     fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a e7       	ldi	r20, 0x7A	; 122
     fcc:	53 e4       	ldi	r21, 0x43	; 67
     fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8f 83       	std	Y+7, r24	; 0x07
     fd8:	98 87       	std	Y+8, r25	; 0x08
     fda:	a9 87       	std	Y+9, r26	; 0x09
     fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f4       	brge	.+10     	; 0x1000 <EEPROM_enuRestoreData+0x4ca>
		__ticks = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <EEPROM_enuRestoreData+0x548>
	else if (__tmp > 65535)
    1000:	6f 81       	ldd	r22, Y+7	; 0x07
    1002:	78 85       	ldd	r23, Y+8	; 0x08
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	9a 85       	ldd	r25, Y+10	; 0x0a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	4f e7       	ldi	r20, 0x7F	; 127
    100e:	57 e4       	ldi	r21, 0x47	; 71
    1010:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1014:	18 16       	cp	r1, r24
    1016:	4c f5       	brge	.+82     	; 0x106a <EEPROM_enuRestoreData+0x534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	6b 85       	ldd	r22, Y+11	; 0x0b
    101a:	7c 85       	ldd	r23, Y+12	; 0x0c
    101c:	8d 85       	ldd	r24, Y+13	; 0x0d
    101e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <EEPROM_enuRestoreData+0x52a>
    1042:	89 e1       	ldi	r24, 0x19	; 25
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <EEPROM_enuRestoreData+0x518>
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	69 f7       	brne	.-38     	; 0x1042 <EEPROM_enuRestoreData+0x50c>
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <EEPROM_enuRestoreData+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <EEPROM_enuRestoreData+0x554>
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
	/*******************************************************
	               array of users passwords
	 ******************************************************/
	/*User password from address 60 to 79*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 60;
	for(u8 i=60 ; i<temp ;i++)
    1092:	8a ad       	ldd	r24, Y+58	; 0x3a
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8a af       	std	Y+58, r24	; 0x3a
    1098:	8a ad       	ldd	r24, Y+58	; 0x3a
    109a:	fe 01       	movw	r30, r28
    109c:	e0 5c       	subi	r30, 0xC0	; 192
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	90 81       	ld	r25, Z
    10a2:	89 17       	cp	r24, r25
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <EEPROM_enuRestoreData+0x572>
    10a6:	6a cf       	rjmp	.-300    	; 0xf7c <EEPROM_enuRestoreData+0x446>
		Local_u8ArrIndex++;

		_delay_ms(50);
	}

	Local_enuErrState=ES_OK;
    10a8:	fe 01       	movw	r30, r28
    10aa:	ef 5b       	subi	r30, 0xBF	; 191
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	10 82       	st	Z, r1

	return Local_enuErrState;
    10b0:	fe 01       	movw	r30, r28
    10b2:	ef 5b       	subi	r30, 0xBF	; 191
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
}
    10b8:	cd 5b       	subi	r28, 0xBD	; 189
    10ba:	df 4f       	sbci	r29, 0xFF	; 255
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <EEPROM_enuAddAdmin>:

/*
 * add admin in system
 */
ES_t EEPROM_enuAddAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrAdmin)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	af 97       	sbiw	r28, 0x2f	; 47
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	9d a7       	std	Y+45, r25	; 0x2d
    10e2:	8c a7       	std	Y+44, r24	; 0x2c
    10e4:	7f a7       	std	Y+47, r23	; 0x2f
    10e6:	6e a7       	std	Y+46, r22	; 0x2e
	ES_t Local_enuErrState=ES_NOK;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8b a7       	std	Y+43, r24	; 0x2b

	if(Copy_pstrEEPROMHandler->AdminsCount < 20)
    10ec:	ec a5       	ldd	r30, Y+44	; 0x2c
    10ee:	fd a5       	ldd	r31, Y+45	; 0x2d
    10f0:	80 a5       	ldd	r24, Z+40	; 0x28
    10f2:	84 31       	cpi	r24, 0x14	; 20
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <EEPROM_enuAddAdmin+0x2c>
    10f6:	9d c1       	rjmp	.+826    	; 0x1432 <EEPROM_enuAddAdmin+0x366>
	{
		/*add the admin in the array*/
		Copy_pstrEEPROMHandler->AdminID[Copy_pstrEEPROMHandler->AdminsCount] = Copy_pstrAdmin->ID ;
    10f8:	ec a5       	ldd	r30, Y+44	; 0x2c
    10fa:	fd a5       	ldd	r31, Y+45	; 0x2d
    10fc:	80 a5       	ldd	r24, Z+40	; 0x28
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	ee a5       	ldd	r30, Y+46	; 0x2e
    1104:	ff a5       	ldd	r31, Y+47	; 0x2f
    1106:	40 81       	ld	r20, Z
    1108:	8c a5       	ldd	r24, Y+44	; 0x2c
    110a:	9d a5       	ldd	r25, Y+45	; 0x2d
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	40 83       	st	Z, r20
		Copy_pstrEEPROMHandler->AdminPAS[Copy_pstrEEPROMHandler->AdminsCount] = Copy_pstrAdmin->Password ;
    1114:	ec a5       	ldd	r30, Y+44	; 0x2c
    1116:	fd a5       	ldd	r31, Y+45	; 0x2d
    1118:	80 a5       	ldd	r24, Z+40	; 0x28
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1120:	ff a5       	ldd	r31, Y+47	; 0x2f
    1122:	41 81       	ldd	r20, Z+1	; 0x01
    1124:	8c a5       	ldd	r24, Y+44	; 0x2c
    1126:	9d a5       	ldd	r25, Y+45	; 0x2d
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	74 96       	adiw	r30, 0x14	; 20
    1130:	40 83       	st	Z, r20

		/*add the admin in EEPROM*/
		EEPROM_enuWriteDataByte(Copy_pstrAdmin->ID, Copy_pstrEEPROMHandler->AdminsCount);
    1132:	ee a5       	ldd	r30, Y+46	; 0x2e
    1134:	ff a5       	ldd	r31, Y+47	; 0x2f
    1136:	90 81       	ld	r25, Z
    1138:	ec a5       	ldd	r30, Y+44	; 0x2c
    113a:	fd a5       	ldd	r31, Y+45	; 0x2d
    113c:	80 a5       	ldd	r24, Z+40	; 0x28
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	89 2f       	mov	r24, r25
    1144:	b9 01       	movw	r22, r18
    1146:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <EEPROM_enuWriteDataByte>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a8 e4       	ldi	r26, 0x48	; 72
    1150:	b2 e4       	ldi	r27, 0x42	; 66
    1152:	8f a3       	std	Y+39, r24	; 0x27
    1154:	98 a7       	std	Y+40, r25	; 0x28
    1156:	a9 a7       	std	Y+41, r26	; 0x29
    1158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	6f a1       	ldd	r22, Y+39	; 0x27
    115c:	78 a5       	ldd	r23, Y+40	; 0x28
    115e:	89 a5       	ldd	r24, Y+41	; 0x29
    1160:	9a a5       	ldd	r25, Y+42	; 0x2a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a e7       	ldi	r20, 0x7A	; 122
    1168:	53 e4       	ldi	r21, 0x43	; 67
    116a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8b a3       	std	Y+35, r24	; 0x23
    1174:	9c a3       	std	Y+36, r25	; 0x24
    1176:	ad a3       	std	Y+37, r26	; 0x25
    1178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    117a:	6b a1       	ldd	r22, Y+35	; 0x23
    117c:	7c a1       	ldd	r23, Y+36	; 0x24
    117e:	8d a1       	ldd	r24, Y+37	; 0x25
    1180:	9e a1       	ldd	r25, Y+38	; 0x26
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <EEPROM_enuAddAdmin+0xd0>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9a a3       	std	Y+34, r25	; 0x22
    1198:	89 a3       	std	Y+33, r24	; 0x21
    119a:	3f c0       	rjmp	.+126    	; 0x121a <EEPROM_enuAddAdmin+0x14e>
	else if (__tmp > 65535)
    119c:	6b a1       	ldd	r22, Y+35	; 0x23
    119e:	7c a1       	ldd	r23, Y+36	; 0x24
    11a0:	8d a1       	ldd	r24, Y+37	; 0x25
    11a2:	9e a1       	ldd	r25, Y+38	; 0x26
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <EEPROM_enuAddAdmin+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	6f a1       	ldd	r22, Y+39	; 0x27
    11b6:	78 a5       	ldd	r23, Y+40	; 0x28
    11b8:	89 a5       	ldd	r24, Y+41	; 0x29
    11ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9a a3       	std	Y+34, r25	; 0x22
    11da:	89 a3       	std	Y+33, r24	; 0x21
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <EEPROM_enuAddAdmin+0x130>
    11de:	89 e1       	ldi	r24, 0x19	; 25
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	98 a3       	std	Y+32, r25	; 0x20
    11e4:	8f 8f       	std	Y+31, r24	; 0x1f
    11e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e8:	98 a1       	ldd	r25, Y+32	; 0x20
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <EEPROM_enuAddAdmin+0x11e>
    11ee:	98 a3       	std	Y+32, r25	; 0x20
    11f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	89 a1       	ldd	r24, Y+33	; 0x21
    11f4:	9a a1       	ldd	r25, Y+34	; 0x22
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9a a3       	std	Y+34, r25	; 0x22
    11fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	89 a1       	ldd	r24, Y+33	; 0x21
    11fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f7       	brne	.-38     	; 0x11de <EEPROM_enuAddAdmin+0x112>
    1204:	14 c0       	rjmp	.+40     	; 0x122e <EEPROM_enuAddAdmin+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6b a1       	ldd	r22, Y+35	; 0x23
    1208:	7c a1       	ldd	r23, Y+36	; 0x24
    120a:	8d a1       	ldd	r24, Y+37	; 0x25
    120c:	9e a1       	ldd	r25, Y+38	; 0x26
    120e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	89 a3       	std	Y+33, r24	; 0x21
    121a:	89 a1       	ldd	r24, Y+33	; 0x21
    121c:	9a a1       	ldd	r25, Y+34	; 0x22
    121e:	9e 8f       	std	Y+30, r25	; 0x1e
    1220:	8d 8f       	std	Y+29, r24	; 0x1d
    1222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <EEPROM_enuAddAdmin+0x15a>
    122a:	9e 8f       	std	Y+30, r25	; 0x1e
    122c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		EEPROM_enuWriteDataByte(Copy_pstrAdmin->Password, Copy_pstrEEPROMHandler->AdminsCount+20);
    122e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1230:	ff a5       	ldd	r31, Y+47	; 0x2f
    1232:	41 81       	ldd	r20, Z+1	; 0x01
    1234:	ec a5       	ldd	r30, Y+44	; 0x2c
    1236:	fd a5       	ldd	r31, Y+45	; 0x2d
    1238:	80 a5       	ldd	r24, Z+40	; 0x28
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	44 96       	adiw	r24, 0x14	; 20
    1240:	9c 01       	movw	r18, r24
    1242:	84 2f       	mov	r24, r20
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <EEPROM_enuWriteDataByte>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a8 e4       	ldi	r26, 0x48	; 72
    1250:	b2 e4       	ldi	r27, 0x42	; 66
    1252:	89 8f       	std	Y+25, r24	; 0x19
    1254:	9a 8f       	std	Y+26, r25	; 0x1a
    1256:	ab 8f       	std	Y+27, r26	; 0x1b
    1258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	69 8d       	ldd	r22, Y+25	; 0x19
    125c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a e7       	ldi	r20, 0x7A	; 122
    1268:	53 e4       	ldi	r21, 0x43	; 67
    126a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8d 8b       	std	Y+21, r24	; 0x15
    1274:	9e 8b       	std	Y+22, r25	; 0x16
    1276:	af 8b       	std	Y+23, r26	; 0x17
    1278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	8f 89       	ldd	r24, Y+23	; 0x17
    1280:	98 8d       	ldd	r25, Y+24	; 0x18
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	2c f4       	brge	.+10     	; 0x129c <EEPROM_enuAddAdmin+0x1d0>
		__ticks = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
    129a:	3f c0       	rjmp	.+126    	; 0x131a <EEPROM_enuAddAdmin+0x24e>
	else if (__tmp > 65535)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	4f e7       	ldi	r20, 0x7F	; 127
    12aa:	57 e4       	ldi	r21, 0x47	; 71
    12ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	4c f5       	brge	.+82     	; 0x1306 <EEPROM_enuAddAdmin+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	69 8d       	ldd	r22, Y+25	; 0x19
    12b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <EEPROM_enuAddAdmin+0x230>
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 8b       	std	Y+18, r25	; 0x12
    12e4:	89 8b       	std	Y+17, r24	; 0x11
    12e6:	89 89       	ldd	r24, Y+17	; 0x11
    12e8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <EEPROM_enuAddAdmin+0x21e>
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f2:	8b 89       	ldd	r24, Y+19	; 0x13
    12f4:	9c 89       	ldd	r25, Y+20	; 0x14
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	69 f7       	brne	.-38     	; 0x12de <EEPROM_enuAddAdmin+0x212>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <EEPROM_enuAddAdmin+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 8b       	std	Y+20, r25	; 0x14
    1318:	8b 8b       	std	Y+19, r24	; 0x13
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	8f 87       	std	Y+15, r24	; 0x0f
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	98 89       	ldd	r25, Y+16	; 0x10
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <EEPROM_enuAddAdmin+0x25a>
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		/*save the number of admins*/
		Copy_pstrEEPROMHandler->AdminsCount++;
    132e:	ec a5       	ldd	r30, Y+44	; 0x2c
    1330:	fd a5       	ldd	r31, Y+45	; 0x2d
    1332:	80 a5       	ldd	r24, Z+40	; 0x28
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	ec a5       	ldd	r30, Y+44	; 0x2c
    1338:	fd a5       	ldd	r31, Y+45	; 0x2d
    133a:	80 a7       	std	Z+40, r24	; 0x28
		EEPROM_enuWriteDataByte(Copy_pstrEEPROMHandler->AdminsCount, 90);
    133c:	ec a5       	ldd	r30, Y+44	; 0x2c
    133e:	fd a5       	ldd	r31, Y+45	; 0x2d
    1340:	80 a5       	ldd	r24, Z+40	; 0x28
    1342:	6a e5       	ldi	r22, 0x5A	; 90
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <EEPROM_enuWriteDataByte>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a8 e4       	ldi	r26, 0x48	; 72
    1350:	b2 e4       	ldi	r27, 0x42	; 66
    1352:	8b 87       	std	Y+11, r24	; 0x0b
    1354:	9c 87       	std	Y+12, r25	; 0x0c
    1356:	ad 87       	std	Y+13, r26	; 0x0d
    1358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135a:	6b 85       	ldd	r22, Y+11	; 0x0b
    135c:	7c 85       	ldd	r23, Y+12	; 0x0c
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	9e 85       	ldd	r25, Y+14	; 0x0e
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a e7       	ldi	r20, 0x7A	; 122
    1368:	53 e4       	ldi	r21, 0x43	; 67
    136a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8f 83       	std	Y+7, r24	; 0x07
    1374:	98 87       	std	Y+8, r25	; 0x08
    1376:	a9 87       	std	Y+9, r26	; 0x09
    1378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <EEPROM_enuAddAdmin+0x2d0>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
    139a:	3f c0       	rjmp	.+126    	; 0x141a <EEPROM_enuAddAdmin+0x34e>
	else if (__tmp > 65535)
    139c:	6f 81       	ldd	r22, Y+7	; 0x07
    139e:	78 85       	ldd	r23, Y+8	; 0x08
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <EEPROM_enuAddAdmin+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <EEPROM_enuAddAdmin+0x330>
    13de:	89 e1       	ldi	r24, 0x19	; 25
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <EEPROM_enuAddAdmin+0x31e>
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f7       	brne	.-38     	; 0x13de <EEPROM_enuAddAdmin+0x312>
    1404:	14 c0       	rjmp	.+40     	; 0x142e <EEPROM_enuAddAdmin+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <EEPROM_enuAddAdmin+0x35a>
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_enuErrState=ES_OK;
    142e:	1b a6       	std	Y+43, r1	; 0x2b
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <EEPROM_enuAddAdmin+0x36a>
	}
	else
	{
		/*the system has max number admins */
		Local_enuErrState=ES_NOK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return Local_enuErrState;
    1436:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1438:	af 96       	adiw	r28, 0x2f	; 47
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <EEPROM_enuAddUser>:

/*
 * add user in system
 */
ES_t EEPROM_enuAddUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrUser)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	af 97       	sbiw	r28, 0x2f	; 47
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	9d a7       	std	Y+45, r25	; 0x2d
    1460:	8c a7       	std	Y+44, r24	; 0x2c
    1462:	7f a7       	std	Y+47, r23	; 0x2f
    1464:	6e a7       	std	Y+46, r22	; 0x2e
	ES_t Local_enuErrState=ES_NOK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8b a7       	std	Y+43, r24	; 0x2b
	if(Copy_pstrEEPROMHandler->AdminsCount < 20)
    146a:	ec a5       	ldd	r30, Y+44	; 0x2c
    146c:	fd a5       	ldd	r31, Y+45	; 0x2d
    146e:	80 a5       	ldd	r24, Z+40	; 0x28
    1470:	84 31       	cpi	r24, 0x14	; 20
    1472:	08 f0       	brcs	.+2      	; 0x1476 <EEPROM_enuAddUser+0x2c>
    1474:	b6 c1       	rjmp	.+876    	; 0x17e2 <EEPROM_enuAddUser+0x398>
	{
		/*add the admin in the array*/
		Copy_pstrEEPROMHandler->UserID[Copy_pstrEEPROMHandler->UsersCount] = Copy_pstrUser->ID ;
    1476:	8c a5       	ldd	r24, Y+44	; 0x2c
    1478:	9d a5       	ldd	r25, Y+45	; 0x2d
    147a:	fc 01       	movw	r30, r24
    147c:	ef 5a       	subi	r30, 0xAF	; 175
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	ee a5       	ldd	r30, Y+46	; 0x2e
    1488:	ff a5       	ldd	r31, Y+47	; 0x2f
    148a:	40 81       	ld	r20, Z
    148c:	8c a5       	ldd	r24, Y+44	; 0x2c
    148e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	fc 01       	movw	r30, r24
    1496:	b9 96       	adiw	r30, 0x29	; 41
    1498:	40 83       	st	Z, r20
		Copy_pstrEEPROMHandler->UserPAS[Copy_pstrEEPROMHandler->UsersCount] = Copy_pstrUser->Password ;
    149a:	8c a5       	ldd	r24, Y+44	; 0x2c
    149c:	9d a5       	ldd	r25, Y+45	; 0x2d
    149e:	fc 01       	movw	r30, r24
    14a0:	ef 5a       	subi	r30, 0xAF	; 175
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	ee a5       	ldd	r30, Y+46	; 0x2e
    14ac:	ff a5       	ldd	r31, Y+47	; 0x2f
    14ae:	41 81       	ldd	r20, Z+1	; 0x01
    14b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    14b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    14b4:	82 0f       	add	r24, r18
    14b6:	93 1f       	adc	r25, r19
    14b8:	fc 01       	movw	r30, r24
    14ba:	fd 96       	adiw	r30, 0x3d	; 61
    14bc:	40 83       	st	Z, r20

		/*add the admin in EEPROM*/
		EEPROM_enuWriteDataByte(Copy_pstrUser->ID, Copy_pstrEEPROMHandler->UsersCount + 40);
    14be:	ee a5       	ldd	r30, Y+46	; 0x2e
    14c0:	ff a5       	ldd	r31, Y+47	; 0x2f
    14c2:	40 81       	ld	r20, Z
    14c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    14c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    14c8:	fc 01       	movw	r30, r24
    14ca:	ef 5a       	subi	r30, 0xAF	; 175
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	88 96       	adiw	r24, 0x28	; 40
    14d6:	9c 01       	movw	r18, r24
    14d8:	84 2f       	mov	r24, r20
    14da:	b9 01       	movw	r22, r18
    14dc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <EEPROM_enuWriteDataByte>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a8 e4       	ldi	r26, 0x48	; 72
    14e6:	b2 e4       	ldi	r27, 0x42	; 66
    14e8:	8f a3       	std	Y+39, r24	; 0x27
    14ea:	98 a7       	std	Y+40, r25	; 0x28
    14ec:	a9 a7       	std	Y+41, r26	; 0x29
    14ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f0:	6f a1       	ldd	r22, Y+39	; 0x27
    14f2:	78 a5       	ldd	r23, Y+40	; 0x28
    14f4:	89 a5       	ldd	r24, Y+41	; 0x29
    14f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a e7       	ldi	r20, 0x7A	; 122
    14fe:	53 e4       	ldi	r21, 0x43	; 67
    1500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8b a3       	std	Y+35, r24	; 0x23
    150a:	9c a3       	std	Y+36, r25	; 0x24
    150c:	ad a3       	std	Y+37, r26	; 0x25
    150e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1510:	6b a1       	ldd	r22, Y+35	; 0x23
    1512:	7c a1       	ldd	r23, Y+36	; 0x24
    1514:	8d a1       	ldd	r24, Y+37	; 0x25
    1516:	9e a1       	ldd	r25, Y+38	; 0x26
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	2c f4       	brge	.+10     	; 0x1532 <EEPROM_enuAddUser+0xe8>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	3f c0       	rjmp	.+126    	; 0x15b0 <EEPROM_enuAddUser+0x166>
	else if (__tmp > 65535)
    1532:	6b a1       	ldd	r22, Y+35	; 0x23
    1534:	7c a1       	ldd	r23, Y+36	; 0x24
    1536:	8d a1       	ldd	r24, Y+37	; 0x25
    1538:	9e a1       	ldd	r25, Y+38	; 0x26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	4c f5       	brge	.+82     	; 0x159c <EEPROM_enuAddUser+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	6f a1       	ldd	r22, Y+39	; 0x27
    154c:	78 a5       	ldd	r23, Y+40	; 0x28
    154e:	89 a5       	ldd	r24, Y+41	; 0x29
    1550:	9a a5       	ldd	r25, Y+42	; 0x2a
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <EEPROM_enuAddUser+0x148>
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	98 a3       	std	Y+32, r25	; 0x20
    157a:	8f 8f       	std	Y+31, r24	; 0x1f
    157c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    157e:	98 a1       	ldd	r25, Y+32	; 0x20
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <EEPROM_enuAddUser+0x136>
    1584:	98 a3       	std	Y+32, r25	; 0x20
    1586:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	89 a1       	ldd	r24, Y+33	; 0x21
    158a:	9a a1       	ldd	r25, Y+34	; 0x22
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9a a3       	std	Y+34, r25	; 0x22
    1590:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	89 a1       	ldd	r24, Y+33	; 0x21
    1594:	9a a1       	ldd	r25, Y+34	; 0x22
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	69 f7       	brne	.-38     	; 0x1574 <EEPROM_enuAddUser+0x12a>
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <EEPROM_enuAddUser+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	6b a1       	ldd	r22, Y+35	; 0x23
    159e:	7c a1       	ldd	r23, Y+36	; 0x24
    15a0:	8d a1       	ldd	r24, Y+37	; 0x25
    15a2:	9e a1       	ldd	r25, Y+38	; 0x26
    15a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9a a3       	std	Y+34, r25	; 0x22
    15ae:	89 a3       	std	Y+33, r24	; 0x21
    15b0:	89 a1       	ldd	r24, Y+33	; 0x21
    15b2:	9a a1       	ldd	r25, Y+34	; 0x22
    15b4:	9e 8f       	std	Y+30, r25	; 0x1e
    15b6:	8d 8f       	std	Y+29, r24	; 0x1d
    15b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <EEPROM_enuAddUser+0x172>
    15c0:	9e 8f       	std	Y+30, r25	; 0x1e
    15c2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		EEPROM_enuWriteDataByte(Copy_pstrUser->Password, Copy_pstrEEPROMHandler->UsersCount +60);
    15c4:	ee a5       	ldd	r30, Y+46	; 0x2e
    15c6:	ff a5       	ldd	r31, Y+47	; 0x2f
    15c8:	41 81       	ldd	r20, Z+1	; 0x01
    15ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    15cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    15ce:	fc 01       	movw	r30, r24
    15d0:	ef 5a       	subi	r30, 0xAF	; 175
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	cc 96       	adiw	r24, 0x3c	; 60
    15dc:	9c 01       	movw	r18, r24
    15de:	84 2f       	mov	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <EEPROM_enuWriteDataByte>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a8 e4       	ldi	r26, 0x48	; 72
    15ec:	b2 e4       	ldi	r27, 0x42	; 66
    15ee:	89 8f       	std	Y+25, r24	; 0x19
    15f0:	9a 8f       	std	Y+26, r25	; 0x1a
    15f2:	ab 8f       	std	Y+27, r26	; 0x1b
    15f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	69 8d       	ldd	r22, Y+25	; 0x19
    15f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a e7       	ldi	r20, 0x7A	; 122
    1604:	53 e4       	ldi	r21, 0x43	; 67
    1606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8d 8b       	std	Y+21, r24	; 0x15
    1610:	9e 8b       	std	Y+22, r25	; 0x16
    1612:	af 8b       	std	Y+23, r26	; 0x17
    1614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <EEPROM_enuAddUser+0x1ee>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 8b       	std	Y+20, r25	; 0x14
    1634:	8b 8b       	std	Y+19, r24	; 0x13
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <EEPROM_enuAddUser+0x26c>
	else if (__tmp > 65535)
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <EEPROM_enuAddUser+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	69 8d       	ldd	r22, Y+25	; 0x19
    1652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9c 8b       	std	Y+20, r25	; 0x14
    1676:	8b 8b       	std	Y+19, r24	; 0x13
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <EEPROM_enuAddUser+0x24e>
    167a:	89 e1       	ldi	r24, 0x19	; 25
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9a 8b       	std	Y+18, r25	; 0x12
    1680:	89 8b       	std	Y+17, r24	; 0x11
    1682:	89 89       	ldd	r24, Y+17	; 0x11
    1684:	9a 89       	ldd	r25, Y+18	; 0x12
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <EEPROM_enuAddUser+0x23c>
    168a:	9a 8b       	std	Y+18, r25	; 0x12
    168c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	8b 89       	ldd	r24, Y+19	; 0x13
    1690:	9c 89       	ldd	r25, Y+20	; 0x14
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <EEPROM_enuAddUser+0x230>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <EEPROM_enuAddUser+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	98 8b       	std	Y+16, r25	; 0x10
    16bc:	8f 87       	std	Y+15, r24	; 0x0f
    16be:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c0:	98 89       	ldd	r25, Y+16	; 0x10
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <EEPROM_enuAddUser+0x278>
    16c6:	98 8b       	std	Y+16, r25	; 0x10
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		/*save the number of admins*/
		Copy_pstrEEPROMHandler->UsersCount++;
    16ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    16cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    16ce:	fc 01       	movw	r30, r24
    16d0:	ef 5a       	subi	r30, 0xAF	; 175
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	8c a5       	ldd	r24, Y+44	; 0x2c
    16dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    16de:	fc 01       	movw	r30, r24
    16e0:	ef 5a       	subi	r30, 0xAF	; 175
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	20 83       	st	Z, r18
		EEPROM_enuWriteDataByte(Copy_pstrEEPROMHandler->UsersCount, 95);
    16e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    16e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    16ea:	fc 01       	movw	r30, r24
    16ec:	ef 5a       	subi	r30, 0xAF	; 175
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	6f e5       	ldi	r22, 0x5F	; 95
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <EEPROM_enuWriteDataByte>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a8 e4       	ldi	r26, 0x48	; 72
    1700:	b2 e4       	ldi	r27, 0x42	; 66
    1702:	8b 87       	std	Y+11, r24	; 0x0b
    1704:	9c 87       	std	Y+12, r25	; 0x0c
    1706:	ad 87       	std	Y+13, r26	; 0x0d
    1708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	8f 83       	std	Y+7, r24	; 0x07
    1724:	98 87       	std	Y+8, r25	; 0x08
    1726:	a9 87       	std	Y+9, r26	; 0x09
    1728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <EEPROM_enuAddUser+0x302>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	8d 83       	std	Y+5, r24	; 0x05
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <EEPROM_enuAddUser+0x380>
	else if (__tmp > 65535)
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <EEPROM_enuAddUser+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <EEPROM_enuAddUser+0x362>
    178e:	89 e1       	ldi	r24, 0x19	; 25
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <EEPROM_enuAddUser+0x350>
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <EEPROM_enuAddUser+0x344>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <EEPROM_enuAddUser+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <EEPROM_enuAddUser+0x38c>
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_enuErrState=ES_OK;
    17de:	1b a6       	std	Y+43, r1	; 0x2b
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <EEPROM_enuAddUser+0x39c>
	}
	else
	{
		/*the system has max number admins */
		Local_enuErrState=ES_NOK;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return Local_enuErrState;
    17e6:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    17e8:	af 96       	adiw	r28, 0x2f	; 47
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <EEPROM_enuRemoveAdmin>:

/*
 * remove admin in system
 */
ES_t EEPROM_enuRemoveAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrAdmin)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EEPROM_enuRemoveAdmin+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EEPROM_enuRemoveAdmin+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	7d 83       	std	Y+5, r23	; 0x05
    180e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrState=ES_NOK;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrState;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <EEPROM_enuRemoveUser>:

/*
 * remove user in system
 */
ES_t EEPROM_enuRemoveUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrUser)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <EEPROM_enuRemoveUser+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <EEPROM_enuRemoveUser+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	9b 83       	std	Y+3, r25	; 0x03
    1836:	8a 83       	std	Y+2, r24	; 0x02
    1838:	7d 83       	std	Y+5, r23	; 0x05
    183a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrState=ES_NOK;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrState;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <DIO_enuInit>:


/*****************************************************************/

ES_t DIO_enuInit(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01

	/*Setting the directions of all pins*/
	DDRA=CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1860:	ea e3       	ldi	r30, 0x3A	; 58
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	80 83       	st	Z, r24
	DDRB=CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1868:	e7 e3       	ldi	r30, 0x37	; 55
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	80 83       	st	Z, r24
	DDRC=CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1870:	e4 e3       	ldi	r30, 0x34	; 52
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
	DDRD=CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1878:	e1 e3       	ldi	r30, 0x31	; 49
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	10 82       	st	Z, r1

	/*Set a value for each pin*/
	PORTA=CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	10 82       	st	Z, r1
	PORTB=CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	80 83       	st	Z, r24
	PORTC=CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    188c:	e5 e3       	ldi	r30, 0x35	; 53
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	80 83       	st	Z, r24
	PORTD=CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 83       	st	Z, r24

	/*After all set the error state variable by "OK" state*/
	Local_enuErrorState = ES_OK;
    189c:	19 82       	std	Y+1, r1	; 0x01

	/*Then return error state variable*/
	return Local_enuErrorState;
    189e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuInit()
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <DIO_enuSetPortDirection>:


/*****************************************************************/

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8PortDir)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <DIO_enuSetPortDirection+0x6>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <DIO_enuSetPortDirection+0x8>
    18b0:	0f 92       	push	r0
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	8a 83       	std	Y+2, r24	; 0x02
    18b8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortID)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3d 83       	std	Y+5, r19	; 0x05
    18c6:	2c 83       	std	Y+4, r18	; 0x04
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	d9 f0       	breq	.+54     	; 0x1908 <DIO_enuSetPortDirection+0x60>
    18d2:	2c 81       	ldd	r18, Y+4	; 0x04
    18d4:	3d 81       	ldd	r19, Y+5	; 0x05
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	2c f4       	brge	.+10     	; 0x18e6 <DIO_enuSetPortDirection+0x3e>
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 f0       	breq	.+24     	; 0x18fc <DIO_enuSetPortDirection+0x54>
    18e4:	23 c0       	rjmp	.+70     	; 0x192c <DIO_enuSetPortDirection+0x84>
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	91 f0       	breq	.+36     	; 0x1914 <DIO_enuSetPortDirection+0x6c>
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	99 f0       	breq	.+38     	; 0x1920 <DIO_enuSetPortDirection+0x78>
    18fa:	18 c0       	rjmp	.+48     	; 0x192c <DIO_enuSetPortDirection+0x84>
	{
	case DIO_PORTA :
		DDRA =Copy_u8PortDir;
    18fc:	ea e3       	ldi	r30, 0x3A	; 58
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <DIO_enuSetPortDirection+0x88>
		break;
	case DIO_PORTB :
		DDRB =Copy_u8PortDir;
    1908:	e7 e3       	ldi	r30, 0x37	; 55
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <DIO_enuSetPortDirection+0x88>
		break;
	case DIO_PORTC :
		DDRC =Copy_u8PortDir;
    1914:	e4 e3       	ldi	r30, 0x34	; 52
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <DIO_enuSetPortDirection+0x88>
		break;
	case DIO_PORTD :
		DDRD =Copy_u8PortDir;
    1920:	e1 e3       	ldi	r30, 0x31	; 49
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_enuSetPortDirection+0x88>
		break;
	default :
		Local_enuErrorState = ES_OUT_OF_RANGE;
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_enuErrorState;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <DIO_enuSetPortValue>:
/*****************************************************************/

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <DIO_enuSetPortValue+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_enuSetPortValue+0x8>
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02
    1952:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	d9 f0       	breq	.+54     	; 0x19a2 <DIO_enuSetPortValue+0x60>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_enuSetPortValue+0x3e>
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_enuSetPortValue+0x54>
    197e:	23 c0       	rjmp	.+70     	; 0x19c6 <DIO_enuSetPortValue+0x84>
    1980:	2c 81       	ldd	r18, Y+4	; 0x04
    1982:	3d 81       	ldd	r19, Y+5	; 0x05
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	91 f0       	breq	.+36     	; 0x19ae <DIO_enuSetPortValue+0x6c>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	99 f0       	breq	.+38     	; 0x19ba <DIO_enuSetPortValue+0x78>
    1994:	18 c0       	rjmp	.+48     	; 0x19c6 <DIO_enuSetPortValue+0x84>
	{
	case DIO_PORTA :
		PORTA =Copy_u8Value;
    1996:	eb e3       	ldi	r30, 0x3B	; 59
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    199e:	19 82       	std	Y+1, r1	; 0x01
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <DIO_enuSetPortValue+0x88>
		break;
	case DIO_PORTB :
		PORTB =Copy_u8Value;
    19a2:	e8 e3       	ldi	r30, 0x38	; 56
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    19aa:	19 82       	std	Y+1, r1	; 0x01
    19ac:	0e c0       	rjmp	.+28     	; 0x19ca <DIO_enuSetPortValue+0x88>
		break;
	case DIO_PORTC :
		PORTC =Copy_u8Value;
    19ae:	e5 e3       	ldi	r30, 0x35	; 53
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    19b6:	19 82       	std	Y+1, r1	; 0x01
    19b8:	08 c0       	rjmp	.+16     	; 0x19ca <DIO_enuSetPortValue+0x88>
		break;
	case DIO_PORTD :
		PORTD =Copy_u8Value;
    19ba:	e2 e3       	ldi	r30, 0x32	; 50
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    19c2:	19 82       	std	Y+1, r1	; 0x01
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <DIO_enuSetPortValue+0x88>
		break;
	default :
		Local_enuErrorState = ES_OUT_OF_RANGE;
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorState;
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <DIO_enuTogPort>:
/*****************************************************************/

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <DIO_enuTogPort+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <DIO_enuTogPort+0x8>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortID)
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	3c 83       	std	Y+4, r19	; 0x04
    19f6:	2b 83       	std	Y+3, r18	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	f1 f0       	breq	.+60     	; 0x1a3e <DIO_enuTogPort+0x62>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <DIO_enuTogPort+0x3a>
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	61 f0       	breq	.+24     	; 0x1a2c <DIO_enuTogPort+0x50>
    1a14:	2f c0       	rjmp	.+94     	; 0x1a74 <DIO_enuTogPort+0x98>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	c1 f0       	breq	.+48     	; 0x1a50 <DIO_enuTogPort+0x74>
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	83 30       	cpi	r24, 0x03	; 3
    1a26:	91 05       	cpc	r25, r1
    1a28:	e1 f0       	breq	.+56     	; 0x1a62 <DIO_enuTogPort+0x86>
    1a2a:	24 c0       	rjmp	.+72     	; 0x1a74 <DIO_enuTogPort+0x98>
	{
	case DIO_PORTA :
		PORTA = ~PORTA;
    1a2c:	ab e3       	ldi	r26, 0x3B	; 59
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	eb e3       	ldi	r30, 0x3B	; 59
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 95       	com	r24
    1a38:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1a3a:	19 82       	std	Y+1, r1	; 0x01
    1a3c:	1d c0       	rjmp	.+58     	; 0x1a78 <DIO_enuTogPort+0x9c>
		break;
	case DIO_PORTB :
		PORTB = ~PORTB;
    1a3e:	a8 e3       	ldi	r26, 0x38	; 56
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e8 e3       	ldi	r30, 0x38	; 56
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 95       	com	r24
    1a4a:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <DIO_enuTogPort+0x9c>
		break;
	case DIO_PORTC :
		PORTC = ~PORTC;
    1a50:	a5 e3       	ldi	r26, 0x35	; 53
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 95       	com	r24
    1a5c:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
    1a60:	0b c0       	rjmp	.+22     	; 0x1a78 <DIO_enuTogPort+0x9c>
		break;
	case DIO_PORTD :
		PORTD = ~PORTD;
    1a62:	a2 e3       	ldi	r26, 0x32	; 50
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e2 e3       	ldi	r30, 0x32	; 50
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	80 95       	com	r24
    1a6e:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <DIO_enuTogPort+0x9c>
		break;
	default :
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorState;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <DIO_enuGetPortValue>:
/*****************************************************************/

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8* Copy_pu8Value)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <DIO_enuGetPortValue+0x6>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <DIO_enuGetPortValue+0x8>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <DIO_enuGetPortValue+0xa>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
    1a98:	7c 83       	std	Y+4, r23	; 0x04
    1a9a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value != NULL)
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <DIO_enuGetPortValue+0x22>
    1aa8:	42 c0       	rjmp	.+132    	; 0x1b2e <DIO_enuGetPortValue+0xa6>
	{
		switch(Copy_u8PortID)
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3e 83       	std	Y+6, r19	; 0x06
    1ab2:	2d 83       	std	Y+5, r18	; 0x05
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	e9 f0       	breq	.+58     	; 0x1af8 <DIO_enuGetPortValue+0x70>
    1abe:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <DIO_enuGetPortValue+0x4a>
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <DIO_enuGetPortValue+0x60>
    1ad0:	2b c0       	rjmp	.+86     	; 0x1b28 <DIO_enuGetPortValue+0xa0>
    1ad2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	b1 f0       	breq	.+44     	; 0x1b08 <DIO_enuGetPortValue+0x80>
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	c9 f0       	breq	.+50     	; 0x1b18 <DIO_enuGetPortValue+0x90>
    1ae6:	20 c0       	rjmp	.+64     	; 0x1b28 <DIO_enuGetPortValue+0xa0>
		{
		case DIO_PORTA:
			*Copy_pu8Value = PINA;
    1ae8:	e9 e3       	ldi	r30, 0x39	; 57
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	eb 81       	ldd	r30, Y+3	; 0x03
    1af0:	fc 81       	ldd	r31, Y+4	; 0x04
    1af2:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1af4:	19 82       	std	Y+1, r1	; 0x01
    1af6:	1d c0       	rjmp	.+58     	; 0x1b32 <DIO_enuGetPortValue+0xaa>
			break;
		case DIO_PORTB:
			*Copy_pu8Value = PIND;
    1af8:	e0 e3       	ldi	r30, 0x30	; 48
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	eb 81       	ldd	r30, Y+3	; 0x03
    1b00:	fc 81       	ldd	r31, Y+4	; 0x04
    1b02:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1b04:	19 82       	std	Y+1, r1	; 0x01
    1b06:	15 c0       	rjmp	.+42     	; 0x1b32 <DIO_enuGetPortValue+0xaa>
			break;
		case DIO_PORTC:
			*Copy_pu8Value = PINC;
    1b08:	e3 e3       	ldi	r30, 0x33	; 51
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b10:	fc 81       	ldd	r31, Y+4	; 0x04
    1b12:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1b14:	19 82       	std	Y+1, r1	; 0x01
    1b16:	0d c0       	rjmp	.+26     	; 0x1b32 <DIO_enuGetPortValue+0xaa>
			break;
		case DIO_PORTD:
			*Copy_pu8Value = PIND;
    1b18:	e0 e3       	ldi	r30, 0x30	; 48
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b20:	fc 81       	ldd	r31, Y+4	; 0x04
    1b22:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1b24:	19 82       	std	Y+1, r1	; 0x01
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <DIO_enuGetPortValue+0xaa>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_enuGetPortValue+0xaa>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b34:	26 96       	adiw	r28, 0x06	; 6
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <DIO_enuSetPinDirection>:
/*****************************************************************/

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8PinDir)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <DIO_enuSetPinDirection+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <DIO_enuSetPinDirection+0x8>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <DIO_enuSetPinDirection+0xa>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	6b 83       	std	Y+3, r22	; 0x03
    1b58:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinID <= DIO_PIN7 && Copy_u8PinDir<=OUTPUT)
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	88 30       	cpi	r24, 0x08	; 8
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <DIO_enuSetPinDirection+0x20>
    1b64:	d2 c0       	rjmp	.+420    	; 0x1d0a <DIO_enuSetPinDirection+0x1c4>
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <DIO_enuSetPinDirection+0x28>
    1b6c:	ce c0       	rjmp	.+412    	; 0x1d0a <DIO_enuSetPinDirection+0x1c4>
	{
		switch(Copy_u8PortID)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3e 83       	std	Y+6, r19	; 0x06
    1b76:	2d 83       	std	Y+5, r18	; 0x05
    1b78:	6d 81       	ldd	r22, Y+5	; 0x05
    1b7a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b7c:	61 30       	cpi	r22, 0x01	; 1
    1b7e:	71 05       	cpc	r23, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <DIO_enuSetPinDirection+0x3e>
    1b82:	42 c0       	rjmp	.+132    	; 0x1c08 <DIO_enuSetPinDirection+0xc2>
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	34 f4       	brge	.+12     	; 0x1b9a <DIO_enuSetPinDirection+0x54>
    1b8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b90:	3e 81       	ldd	r19, Y+6	; 0x06
    1b92:	21 15       	cp	r18, r1
    1b94:	31 05       	cpc	r19, r1
    1b96:	71 f0       	breq	.+28     	; 0x1bb4 <DIO_enuSetPinDirection+0x6e>
    1b98:	b5 c0       	rjmp	.+362    	; 0x1d04 <DIO_enuSetPinDirection+0x1be>
    1b9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b9e:	62 30       	cpi	r22, 0x02	; 2
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <DIO_enuSetPinDirection+0x60>
    1ba4:	5b c0       	rjmp	.+182    	; 0x1c5c <DIO_enuSetPinDirection+0x116>
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <DIO_enuSetPinDirection+0x6c>
    1bb0:	7f c0       	rjmp	.+254    	; 0x1cb0 <DIO_enuSetPinDirection+0x16a>
    1bb2:	a8 c0       	rjmp	.+336    	; 0x1d04 <DIO_enuSetPinDirection+0x1be>
		{
		case DIO_PORTA:
			DDRA &=~(1<<Copy_u8PinID); //clear bit
    1bb4:	aa e3       	ldi	r26, 0x3A	; 58
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ea e3       	ldi	r30, 0x3A	; 58
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_enuSetPinDirection+0x8a>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	2a 95       	dec	r18
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_enuSetPinDirection+0x86>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
			DDRA |=(Copy_u8PinDir<<Copy_u8PinID); //bit or with the value
    1bda:	aa e3       	ldi	r26, 0x3A	; 58
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ea e3       	ldi	r30, 0x3A	; 58
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_enuSetPinDirection+0xb4>
    1bf6:	66 0f       	add	r22, r22
    1bf8:	77 1f       	adc	r23, r23
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_enuSetPinDirection+0xb0>
    1bfe:	cb 01       	movw	r24, r22
    1c00:	84 2b       	or	r24, r20
    1c02:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	83 c0       	rjmp	.+262    	; 0x1d0e <DIO_enuSetPinDirection+0x1c8>
			break;
		case DIO_PORTB:
			DDRB &=~(1<<Copy_u8PinID);
    1c08:	a7 e3       	ldi	r26, 0x37	; 55
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e7 e3       	ldi	r30, 0x37	; 55
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_enuSetPinDirection+0xde>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	2a 95       	dec	r18
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_enuSetPinDirection+0xda>
    1c28:	80 95       	com	r24
    1c2a:	84 23       	and	r24, r20
    1c2c:	8c 93       	st	X, r24
			DDRB |=(Copy_u8PinDir<<Copy_u8PinID);
    1c2e:	a7 e3       	ldi	r26, 0x37	; 55
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e7 e3       	ldi	r30, 0x37	; 55
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b9 01       	movw	r22, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_enuSetPinDirection+0x108>
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_enuSetPinDirection+0x104>
    1c52:	cb 01       	movw	r24, r22
    1c54:	84 2b       	or	r24, r20
    1c56:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	59 c0       	rjmp	.+178    	; 0x1d0e <DIO_enuSetPinDirection+0x1c8>
			break;
		case DIO_PORTC:
			DDRC &=~(1<<Copy_u8PinID);
    1c5c:	a4 e3       	ldi	r26, 0x34	; 52
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e4 e3       	ldi	r30, 0x34	; 52
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_enuSetPinDirection+0x132>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	2a 95       	dec	r18
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_enuSetPinDirection+0x12e>
    1c7c:	80 95       	com	r24
    1c7e:	84 23       	and	r24, r20
    1c80:	8c 93       	st	X, r24
			DDRC |=(Copy_u8PinDir<<Copy_u8PinID);
    1c82:	a4 e3       	ldi	r26, 0x34	; 52
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e4 e3       	ldi	r30, 0x34	; 52
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <DIO_enuSetPinDirection+0x15c>
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	8a 95       	dec	r24
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <DIO_enuSetPinDirection+0x158>
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	84 2b       	or	r24, r20
    1caa:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	2f c0       	rjmp	.+94     	; 0x1d0e <DIO_enuSetPinDirection+0x1c8>
			break;
		case DIO_PORTD:
			DDRD &=~(1<<Copy_u8PinID);
    1cb0:	a1 e3       	ldi	r26, 0x31	; 49
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e1 e3       	ldi	r30, 0x31	; 49
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_enuSetPinDirection+0x186>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	2a 95       	dec	r18
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_enuSetPinDirection+0x182>
    1cd0:	80 95       	com	r24
    1cd2:	84 23       	and	r24, r20
    1cd4:	8c 93       	st	X, r24
			DDRD |=(Copy_u8PinDir<<Copy_u8PinID);
    1cd6:	a1 e3       	ldi	r26, 0x31	; 49
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e1 e3       	ldi	r30, 0x31	; 49
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b9 01       	movw	r22, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_enuSetPinDirection+0x1b0>
    1cf2:	66 0f       	add	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	8a 95       	dec	r24
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <DIO_enuSetPinDirection+0x1ac>
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1d00:	19 82       	std	Y+1, r1	; 0x01
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <DIO_enuSetPinDirection+0x1c8>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_enuSetPinDirection+0x1c8>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	26 96       	adiw	r28, 0x06	; 6
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <DIO_enuSetPinValue>:

/*****************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <DIO_enuSetPinValue+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <DIO_enuSetPinValue+0x8>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <DIO_enuSetPinValue+0xa>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	6b 83       	std	Y+3, r22	; 0x03
    1d34:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinID <= DIO_PIN7 && Copy_u8Value<=OUTPUT)
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <DIO_enuSetPinValue+0x20>
    1d40:	d2 c0       	rjmp	.+420    	; 0x1ee6 <DIO_enuSetPinValue+0x1c4>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <DIO_enuSetPinValue+0x28>
    1d48:	ce c0       	rjmp	.+412    	; 0x1ee6 <DIO_enuSetPinValue+0x1c4>
	{
		switch(Copy_u8PortID)
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	3e 83       	std	Y+6, r19	; 0x06
    1d52:	2d 83       	std	Y+5, r18	; 0x05
    1d54:	6d 81       	ldd	r22, Y+5	; 0x05
    1d56:	7e 81       	ldd	r23, Y+6	; 0x06
    1d58:	61 30       	cpi	r22, 0x01	; 1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <DIO_enuSetPinValue+0x3e>
    1d5e:	42 c0       	rjmp	.+132    	; 0x1de4 <DIO_enuSetPinValue+0xc2>
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	91 05       	cpc	r25, r1
    1d68:	34 f4       	brge	.+12     	; 0x1d76 <DIO_enuSetPinValue+0x54>
    1d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6e:	21 15       	cp	r18, r1
    1d70:	31 05       	cpc	r19, r1
    1d72:	71 f0       	breq	.+28     	; 0x1d90 <DIO_enuSetPinValue+0x6e>
    1d74:	b5 c0       	rjmp	.+362    	; 0x1ee0 <DIO_enuSetPinValue+0x1be>
    1d76:	6d 81       	ldd	r22, Y+5	; 0x05
    1d78:	7e 81       	ldd	r23, Y+6	; 0x06
    1d7a:	62 30       	cpi	r22, 0x02	; 2
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <DIO_enuSetPinValue+0x60>
    1d80:	5b c0       	rjmp	.+182    	; 0x1e38 <DIO_enuSetPinValue+0x116>
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	83 30       	cpi	r24, 0x03	; 3
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <DIO_enuSetPinValue+0x6c>
    1d8c:	7f c0       	rjmp	.+254    	; 0x1e8c <DIO_enuSetPinValue+0x16a>
    1d8e:	a8 c0       	rjmp	.+336    	; 0x1ee0 <DIO_enuSetPinValue+0x1be>
		{
		case DIO_PORTA:
			PORTA &=~(1<<Copy_u8PinID);
    1d90:	ab e3       	ldi	r26, 0x3B	; 59
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e3       	ldi	r30, 0x3B	; 59
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_enuSetPinValue+0x8a>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	2a 95       	dec	r18
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_enuSetPinValue+0x86>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    1db6:	ab e3       	ldi	r26, 0x3B	; 59
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	eb e3       	ldi	r30, 0x3B	; 59
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	b9 01       	movw	r22, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_enuSetPinValue+0xb4>
    1dd2:	66 0f       	add	r22, r22
    1dd4:	77 1f       	adc	r23, r23
    1dd6:	8a 95       	dec	r24
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_enuSetPinValue+0xb0>
    1dda:	cb 01       	movw	r24, r22
    1ddc:	84 2b       	or	r24, r20
    1dde:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1de0:	19 82       	std	Y+1, r1	; 0x01
    1de2:	83 c0       	rjmp	.+262    	; 0x1eea <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_PORTB:
			PORTB &=~(1<<Copy_u8PinID);
    1de4:	a8 e3       	ldi	r26, 0x38	; 56
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 e3       	ldi	r30, 0x38	; 56
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_enuSetPinValue+0xde>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	2a 95       	dec	r18
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_enuSetPinValue+0xda>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1e0a:	a8 e3       	ldi	r26, 0x38	; 56
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e8 e3       	ldi	r30, 0x38	; 56
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	b9 01       	movw	r22, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <DIO_enuSetPinValue+0x108>
    1e26:	66 0f       	add	r22, r22
    1e28:	77 1f       	adc	r23, r23
    1e2a:	8a 95       	dec	r24
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <DIO_enuSetPinValue+0x104>
    1e2e:	cb 01       	movw	r24, r22
    1e30:	84 2b       	or	r24, r20
    1e32:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1e34:	19 82       	std	Y+1, r1	; 0x01
    1e36:	59 c0       	rjmp	.+178    	; 0x1eea <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_PORTC:
			PORTC &=~(1<<Copy_u8PinID);
    1e38:	a5 e3       	ldi	r26, 0x35	; 53
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e5 e3       	ldi	r30, 0x35	; 53
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <DIO_enuSetPinValue+0x132>
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	2a 95       	dec	r18
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <DIO_enuSetPinValue+0x12e>
    1e58:	80 95       	com	r24
    1e5a:	84 23       	and	r24, r20
    1e5c:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1e5e:	a5 e3       	ldi	r26, 0x35	; 53
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	b9 01       	movw	r22, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_enuSetPinValue+0x15c>
    1e7a:	66 0f       	add	r22, r22
    1e7c:	77 1f       	adc	r23, r23
    1e7e:	8a 95       	dec	r24
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_enuSetPinValue+0x158>
    1e82:	cb 01       	movw	r24, r22
    1e84:	84 2b       	or	r24, r20
    1e86:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1e88:	19 82       	std	Y+1, r1	; 0x01
    1e8a:	2f c0       	rjmp	.+94     	; 0x1eea <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_PORTD:
			PORTD &=~(1<<Copy_u8PinID);
    1e8c:	a2 e3       	ldi	r26, 0x32	; 50
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e2 e3       	ldi	r30, 0x32	; 50
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <DIO_enuSetPinValue+0x186>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	2a 95       	dec	r18
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <DIO_enuSetPinValue+0x182>
    1eac:	80 95       	com	r24
    1eae:	84 23       	and	r24, r20
    1eb0:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1eb2:	a2 e3       	ldi	r26, 0x32	; 50
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e2 e3       	ldi	r30, 0x32	; 50
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b9 01       	movw	r22, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <DIO_enuSetPinValue+0x1b0>
    1ece:	66 0f       	add	r22, r22
    1ed0:	77 1f       	adc	r23, r23
    1ed2:	8a 95       	dec	r24
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <DIO_enuSetPinValue+0x1ac>
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	84 2b       	or	r24, r20
    1eda:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1edc:	19 82       	std	Y+1, r1	; 0x01
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <DIO_enuSetPinValue+0x1c8>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_enuSetPinValue+0x1c8>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eec:	26 96       	adiw	r28, 0x06	; 6
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <DIO_enuTogPin>:
/*****************************************************************/
ES_t DIO_enuTogPin(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_enuTogPin+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_enuTogPin+0x8>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinID <= DIO_PIN7)
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <DIO_enuTogPin+0x1e>
    1f1a:	77 c0       	rjmp	.+238    	; 0x200a <DIO_enuTogPin+0x10c>
	{
		switch(Copy_u8PortID)
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	3d 83       	std	Y+5, r19	; 0x05
    1f24:	2c 83       	std	Y+4, r18	; 0x04
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	59 f1       	breq	.+86     	; 0x1f86 <DIO_enuTogPin+0x88>
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	3d 81       	ldd	r19, Y+5	; 0x05
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <DIO_enuTogPin+0x46>
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	69 f0       	breq	.+26     	; 0x1f5c <DIO_enuTogPin+0x5e>
    1f42:	60 c0       	rjmp	.+192    	; 0x2004 <DIO_enuTogPin+0x106>
    1f44:	2c 81       	ldd	r18, Y+4	; 0x04
    1f46:	3d 81       	ldd	r19, Y+5	; 0x05
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	89 f1       	breq	.+98     	; 0x1fb0 <DIO_enuTogPin+0xb2>
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	9d 81       	ldd	r25, Y+5	; 0x05
    1f52:	83 30       	cpi	r24, 0x03	; 3
    1f54:	91 05       	cpc	r25, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <DIO_enuTogPin+0x5c>
    1f58:	40 c0       	rjmp	.+128    	; 0x1fda <DIO_enuTogPin+0xdc>
    1f5a:	54 c0       	rjmp	.+168    	; 0x2004 <DIO_enuTogPin+0x106>
		{
		case DIO_PORTA:
			PORTA ^=(1<<Copy_u8PinID); //toggle bit
    1f5c:	ab e3       	ldi	r26, 0x3B	; 59
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	eb e3       	ldi	r30, 0x3B	; 59
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <DIO_enuTogPin+0x7c>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <DIO_enuTogPin+0x78>
    1f7e:	84 27       	eor	r24, r20
    1f80:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	44 c0       	rjmp	.+136    	; 0x200e <DIO_enuTogPin+0x110>
			break;
		case DIO_PORTB:
			PORTB ^=(1<<Copy_u8PinID);
    1f86:	a8 e3       	ldi	r26, 0x38	; 56
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e8 e3       	ldi	r30, 0x38	; 56
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_enuTogPin+0xa6>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_enuTogPin+0xa2>
    1fa8:	84 27       	eor	r24, r20
    1faa:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1fac:	19 82       	std	Y+1, r1	; 0x01
    1fae:	2f c0       	rjmp	.+94     	; 0x200e <DIO_enuTogPin+0x110>
			break;
		case DIO_PORTC:
			PORTC ^=(1<<Copy_u8PinID);
    1fb0:	a5 e3       	ldi	r26, 0x35	; 53
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e3       	ldi	r30, 0x35	; 53
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_enuTogPin+0xd0>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_enuTogPin+0xcc>
    1fd2:	84 27       	eor	r24, r20
    1fd4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1fd6:	19 82       	std	Y+1, r1	; 0x01
    1fd8:	1a c0       	rjmp	.+52     	; 0x200e <DIO_enuTogPin+0x110>
			break;
		case DIO_PORTD:
			PORTD ^=(1<<Copy_u8PinID);
    1fda:	a2 e3       	ldi	r26, 0x32	; 50
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e2 e3       	ldi	r30, 0x32	; 50
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_enuTogPin+0xfa>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_enuTogPin+0xf6>
    1ffc:	84 27       	eor	r24, r20
    1ffe:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2000:	19 82       	std	Y+1, r1	; 0x01
    2002:	05 c0       	rjmp	.+10     	; 0x200e <DIO_enuTogPin+0x110>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	02 c0       	rjmp	.+4      	; 0x200e <DIO_enuTogPin+0x110>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    200e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <DIO_enuGetPinValue>:
/*****************************************************************/
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8* Copy_pu8Value)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	27 97       	sbiw	r28, 0x07	; 7
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	8a 83       	std	Y+2, r24	; 0x02
    2036:	6b 83       	std	Y+3, r22	; 0x03
    2038:	5d 83       	std	Y+5, r21	; 0x05
    203a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value != NULL)
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	09 f4       	brne	.+2      	; 0x204a <DIO_enuGetPinValue+0x2a>
    2048:	7b c0       	rjmp	.+246    	; 0x2140 <DIO_enuGetPinValue+0x120>
	{
		if(Copy_u8PinID<=DIO_PIN7)
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	08 f0       	brcs	.+2      	; 0x2052 <DIO_enuGetPinValue+0x32>
    2050:	74 c0       	rjmp	.+232    	; 0x213a <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	3f 83       	std	Y+7, r19	; 0x07
    205a:	2e 83       	std	Y+6, r18	; 0x06
    205c:	4e 81       	ldd	r20, Y+6	; 0x06
    205e:	5f 81       	ldd	r21, Y+7	; 0x07
    2060:	41 30       	cpi	r20, 0x01	; 1
    2062:	51 05       	cpc	r21, r1
    2064:	59 f1       	breq	.+86     	; 0x20bc <DIO_enuGetPinValue+0x9c>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	91 05       	cpc	r25, r1
    206e:	34 f4       	brge	.+12     	; 0x207c <DIO_enuGetPinValue+0x5c>
    2070:	2e 81       	ldd	r18, Y+6	; 0x06
    2072:	3f 81       	ldd	r19, Y+7	; 0x07
    2074:	21 15       	cp	r18, r1
    2076:	31 05       	cpc	r19, r1
    2078:	69 f0       	breq	.+26     	; 0x2094 <DIO_enuGetPinValue+0x74>
    207a:	5c c0       	rjmp	.+184    	; 0x2134 <DIO_enuGetPinValue+0x114>
    207c:	4e 81       	ldd	r20, Y+6	; 0x06
    207e:	5f 81       	ldd	r21, Y+7	; 0x07
    2080:	42 30       	cpi	r20, 0x02	; 2
    2082:	51 05       	cpc	r21, r1
    2084:	79 f1       	breq	.+94     	; 0x20e4 <DIO_enuGetPinValue+0xc4>
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	9f 81       	ldd	r25, Y+7	; 0x07
    208a:	83 30       	cpi	r24, 0x03	; 3
    208c:	91 05       	cpc	r25, r1
    208e:	09 f4       	brne	.+2      	; 0x2092 <DIO_enuGetPinValue+0x72>
    2090:	3d c0       	rjmp	.+122    	; 0x210c <DIO_enuGetPinValue+0xec>
    2092:	50 c0       	rjmp	.+160    	; 0x2134 <DIO_enuGetPinValue+0x114>
			{
			case DIO_PORTA:
				*Copy_pu8Value=((PINA>>Copy_u8PinID)&DIO_MASK_BIT);
    2094:	e9 e3       	ldi	r30, 0x39	; 57
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_enuGetPinValue+0x8c>
    20a8:	55 95       	asr	r21
    20aa:	47 95       	ror	r20
    20ac:	8a 95       	dec	r24
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_enuGetPinValue+0x88>
    20b0:	ca 01       	movw	r24, r20
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	ec 81       	ldd	r30, Y+4	; 0x04
    20b6:	fd 81       	ldd	r31, Y+5	; 0x05
    20b8:	80 83       	st	Z, r24
    20ba:	44 c0       	rjmp	.+136    	; 0x2144 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=((PINB>>Copy_u8PinID)&DIO_MASK_BIT);
    20bc:	e6 e3       	ldi	r30, 0x36	; 54
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a9 01       	movw	r20, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <DIO_enuGetPinValue+0xb4>
    20d0:	55 95       	asr	r21
    20d2:	47 95       	ror	r20
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <DIO_enuGetPinValue+0xb0>
    20d8:	ca 01       	movw	r24, r20
    20da:	81 70       	andi	r24, 0x01	; 1
    20dc:	ec 81       	ldd	r30, Y+4	; 0x04
    20de:	fd 81       	ldd	r31, Y+5	; 0x05
    20e0:	80 83       	st	Z, r24
    20e2:	30 c0       	rjmp	.+96     	; 0x2144 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=((PINC>>Copy_u8PinID)&DIO_MASK_BIT);
    20e4:	e3 e3       	ldi	r30, 0x33	; 51
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_enuGetPinValue+0xdc>
    20f8:	55 95       	asr	r21
    20fa:	47 95       	ror	r20
    20fc:	8a 95       	dec	r24
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_enuGetPinValue+0xd8>
    2100:	ca 01       	movw	r24, r20
    2102:	81 70       	andi	r24, 0x01	; 1
    2104:	ec 81       	ldd	r30, Y+4	; 0x04
    2106:	fd 81       	ldd	r31, Y+5	; 0x05
    2108:	80 83       	st	Z, r24
    210a:	1c c0       	rjmp	.+56     	; 0x2144 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=((PIND>>Copy_u8PinID)&DIO_MASK_BIT);
    210c:	e0 e3       	ldi	r30, 0x30	; 48
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <DIO_enuGetPinValue+0x104>
    2120:	55 95       	asr	r21
    2122:	47 95       	ror	r20
    2124:	8a 95       	dec	r24
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <DIO_enuGetPinValue+0x100>
    2128:	ca 01       	movw	r24, r20
    212a:	81 70       	andi	r24, 0x01	; 1
    212c:	ec 81       	ldd	r30, Y+4	; 0x04
    212e:	fd 81       	ldd	r31, Y+5	; 0x05
    2130:	80 83       	st	Z, r24
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <DIO_enuGetPinValue+0x124>
				break;
			default :
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    213a:	83 e0       	ldi	r24, 0x03	; 3
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
}
    2146:	27 96       	adiw	r28, 0x07	; 7
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <TWI_enuInitMaster>:
#include "TWI_int.h"
#include "TWI_config.h"
#include "TWI_priv.h"

ES_t TWI_enuInitMaster(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01

	TWBR = 0x02;
    2166:	e0 e2       	ldi	r30, 0x20	; 32
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	80 83       	st	Z, r24
	TWSR = 0x00;
    216e:	e1 e2       	ldi	r30, 0x21	; 33
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	10 82       	st	Z, r1

	TWAR = TWI_MC_ADDRESS<<1;
    2174:	e2 e2       	ldi	r30, 0x22	; 34
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	82 e8       	ldi	r24, 0x82	; 130
    217a:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
    217c:	e6 e5       	ldi	r30, 0x56	; 86
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	84 e0       	ldi	r24, 0x04	; 4
    2182:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    2184:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
}
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <TWI_enuInitSlave>:

ES_t TWI_enuInitSlave(void)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	0f 92       	push	r0
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	89 83       	std	Y+1, r24	; 0x01

	TWAR = TWI_MC_ADDRESS<<1;
    219e:	e2 e2       	ldi	r30, 0x22	; 34
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	82 e8       	ldi	r24, 0x82	; 130
    21a4:	80 83       	st	Z, r24
	/*Enable TWI peripheral*/
	TWCR = (1<<TWEN);
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	84 e0       	ldi	r24, 0x04	; 4
    21ac:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    21ae:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <TWI_enuMasterSendStartCondition>:



ES_t TWI_enuMasterSendStartCondition(void)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	0f 92       	push	r0
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	89 83       	std	Y+1, r24	; 0x01

	/*Send start condition*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21c8:	e6 e5       	ldi	r30, 0x56	; 86
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	84 ea       	ldi	r24, 0xA4	; 164
    21ce:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    21d0:	e6 e5       	ldi	r30, 0x56	; 86
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	dc f7       	brge	.-10     	; 0x21d0 <TWI_enuMasterSendStartCondition+0x16>

	/*Read the status register*/
	if((TWSR&0xf8) == TWI_SATRT_COND_TRANSMIT)
    21da:	e1 e2       	ldi	r30, 0x21	; 33
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	88 7f       	andi	r24, 0xF8	; 248
    21e6:	90 70       	andi	r25, 0x00	; 0
    21e8:	88 30       	cpi	r24, 0x08	; 8
    21ea:	91 05       	cpc	r25, r1
    21ec:	11 f4       	brne	.+4      	; 0x21f2 <TWI_enuMasterSendStartCondition+0x38>
	{
		Local_enuErrorState = ES_OK;
    21ee:	19 82       	std	Y+1, r1	; 0x01
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <TWI_enuMasterSendStartCondition+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_TWI_START_COND_ERROR;
    21f2:	87 e0       	ldi	r24, 0x07	; 7
    21f4:	89 83       	std	Y+1, r24	; 0x01
		//CLEAR_BIT(TWCR,TWSTA); //clear start condition bit
	}

	return Local_enuErrorState;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <TWI_enuSendReapeatedStart>:

ES_t TWI_enuSendReapeatedStart(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01

	/*Send start condition*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    220e:	e6 e5       	ldi	r30, 0x56	; 86
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	84 ea       	ldi	r24, 0xA4	; 164
    2214:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2216:	e6 e5       	ldi	r30, 0x56	; 86
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	88 23       	and	r24, r24
    221e:	dc f7       	brge	.-10     	; 0x2216 <TWI_enuSendReapeatedStart+0x16>

	/*Read the status register*/
	if((TWSR&0xf8) == TWI_REP_START_TRANSMIT)
    2220:	e1 e2       	ldi	r30, 0x21	; 33
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	88 7f       	andi	r24, 0xF8	; 248
    222c:	90 70       	andi	r25, 0x00	; 0
    222e:	80 31       	cpi	r24, 0x10	; 16
    2230:	91 05       	cpc	r25, r1
    2232:	11 f4       	brne	.+4      	; 0x2238 <TWI_enuSendReapeatedStart+0x38>
	{
		Local_enuErrorState = ES_OK;
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	02 c0       	rjmp	.+4      	; 0x223c <TWI_enuSendReapeatedStart+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_TWI_REP_START_COND_ERROR;
    2238:	88 e0       	ldi	r24, 0x08	; 8
    223a:	89 83       	std	Y+1, r24	; 0x01
		//CLEAR_BIT(TWCR,TWSTA);//clear start condition bit
	}

	return Local_enuErrorState;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
}
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <TWI_enuSendSlaveAddressWithWriteReq>:

ES_t TWI_enuSendSlaveAddressWithWriteReq(u8 Copy_u8SlaveAddress)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <TWI_enuSendSlaveAddressWithWriteReq+0x6>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	89 83       	std	Y+1, r24	; 0x01

	/*set the slave address in msb in the data register and clear the bit0*/
	TWDR = (u8)(Copy_u8SlaveAddress<<1) ;
    2256:	e3 e2       	ldi	r30, 0x23	; 35
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	88 0f       	add	r24, r24
    225e:	80 83       	st	Z, r24


	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    2260:	e6 e5       	ldi	r30, 0x56	; 86
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	84 e8       	ldi	r24, 0x84	; 132
    2266:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2268:	e6 e5       	ldi	r30, 0x56	; 86
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	88 23       	and	r24, r24
    2270:	dc f7       	brge	.-10     	; 0x2268 <TWI_enuSendSlaveAddressWithWriteReq+0x22>

	/*Read the status register*/
	if((TWSR&0xf8) == SLAVE_ADDR_AND_WRITE)
    2272:	e1 e2       	ldi	r30, 0x21	; 33
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	88 7f       	andi	r24, 0xF8	; 248
    227e:	90 70       	andi	r25, 0x00	; 0
    2280:	88 31       	cpi	r24, 0x18	; 24
    2282:	91 05       	cpc	r25, r1
    2284:	11 f4       	brne	.+4      	; 0x228a <TWI_enuSendSlaveAddressWithWriteReq+0x44>
	{
		Local_enuErrorState = ES_OK;
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	02 c0       	rjmp	.+4      	; 0x228e <TWI_enuSendSlaveAddressWithWriteReq+0x48>
	}
	else
	{
		Local_enuErrorState = ES_TWI_SLAVE_ADD_WRITE_ERROR;
    228a:	89 e0       	ldi	r24, 0x09	; 9
    228c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    228e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <TWI_enuSendSlaveAddressWithReadReq>:

ES_t TWI_enuSendSlaveAddressWithReadReq(u8 Copy_u8SlaveAddress)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <TWI_enuSendSlaveAddressWithReadReq+0x6>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01

	/*set the slave address in msb in the data register and set the bit0*/
	TWDR = (u8)((Copy_u8SlaveAddress<<1) |1);
    22aa:	e3 e2       	ldi	r30, 0x23	; 35
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	81 60       	ori	r24, 0x01	; 1
    22ba:	80 83       	st	Z, r24


	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    22bc:	e6 e5       	ldi	r30, 0x56	; 86
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	84 e8       	ldi	r24, 0x84	; 132
    22c2:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    22c4:	e6 e5       	ldi	r30, 0x56	; 86
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	88 23       	and	r24, r24
    22cc:	dc f7       	brge	.-10     	; 0x22c4 <TWI_enuSendSlaveAddressWithReadReq+0x2a>

	/*Read the status register*/
	if(( TWSR&0xf8) == SLAVE_ADDR_AND_READ)
    22ce:	e1 e2       	ldi	r30, 0x21	; 33
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	88 7f       	andi	r24, 0xF8	; 248
    22da:	90 70       	andi	r25, 0x00	; 0
    22dc:	80 34       	cpi	r24, 0x40	; 64
    22de:	91 05       	cpc	r25, r1
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <TWI_enuSendSlaveAddressWithReadReq+0x4c>
	{
		Local_enuErrorState = ES_OK;
    22e2:	19 82       	std	Y+1, r1	; 0x01
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <TWI_enuSendSlaveAddressWithReadReq+0x50>
	}
	else
	{
		Local_enuErrorState = ES_TWI_SLAVE_ADD_READ_ERROR;
    22e6:	8a e0       	ldi	r24, 0x0A	; 10
    22e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <TWI_enuMasterWriteDataByte>:

ES_t TWI_enuMasterWriteDataByte(u8 Copy_u8Data)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <TWI_enuMasterWriteDataByte+0x6>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	89 83       	std	Y+1, r24	; 0x01

	/*Write the data in data register*/
	TWDR = Copy_u8Data;
    2306:	e3 e2       	ldi	r30, 0x23	; 35
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	80 83       	st	Z, r24

	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    230e:	e6 e5       	ldi	r30, 0x56	; 86
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	84 e8       	ldi	r24, 0x84	; 132
    2314:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2316:	e6 e5       	ldi	r30, 0x56	; 86
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	88 23       	and	r24, r24
    231e:	dc f7       	brge	.-10     	; 0x2316 <TWI_enuMasterWriteDataByte+0x20>

	/*Read the status register*/
	if((TWSR&0xf8) == MASTER_TRANSMIT_DATA)
    2320:	e1 e2       	ldi	r30, 0x21	; 33
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	88 7f       	andi	r24, 0xF8	; 248
    232c:	90 70       	andi	r25, 0x00	; 0
    232e:	88 32       	cpi	r24, 0x28	; 40
    2330:	91 05       	cpc	r25, r1
    2332:	11 f4       	brne	.+4      	; 0x2338 <TWI_enuMasterWriteDataByte+0x42>
	{
		Local_enuErrorState = ES_OK;
    2334:	19 82       	std	Y+1, r1	; 0x01
    2336:	02 c0       	rjmp	.+4      	; 0x233c <TWI_enuMasterWriteDataByte+0x46>
	}
	else
	{
		Local_enuErrorState = ES_TWI_MASTER_WRITE_DATA_BYTE_ERROR;
    2338:	8b e0       	ldi	r24, 0x0B	; 11
    233a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <TWI_enuMasterReadDataByte>:

ES_t TWI_enuMasterReadDataByte(u8* Copy_pu8Data)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <TWI_enuMasterReadDataByte+0x6>
    234e:	0f 92       	push	r0
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9b 83       	std	Y+3, r25	; 0x03
    2356:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01

	/*Clear the TWI flag to let the slave sending the data*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    235c:	e6 e5       	ldi	r30, 0x56	; 86
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	84 e8       	ldi	r24, 0x84	; 132
    2362:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2364:	e6 e5       	ldi	r30, 0x56	; 86
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 23       	and	r24, r24
    236c:	dc f7       	brge	.-10     	; 0x2364 <TWI_enuMasterReadDataByte+0x1c>

	*Copy_pu8Data = TWDR;
    236e:	e3 e2       	ldi	r30, 0x23	; 35
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	ea 81       	ldd	r30, Y+2	; 0x02
    2376:	fb 81       	ldd	r31, Y+3	; 0x03
    2378:	80 83       	st	Z, r24

	/*Read the status register*/
	if((TWSR&0xf8) == MASTER_RECEIVED_DATA_WITH_ACK)
    237a:	e1 e2       	ldi	r30, 0x21	; 33
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	88 7f       	andi	r24, 0xF8	; 248
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	80 35       	cpi	r24, 0x50	; 80
    238a:	91 05       	cpc	r25, r1
    238c:	11 f4       	brne	.+4      	; 0x2392 <TWI_enuMasterReadDataByte+0x4a>
	{
		/*Read received data*/
		Local_enuErrorState = ES_OK;
    238e:	19 82       	std	Y+1, r1	; 0x01
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <TWI_enuMasterReadDataByte+0x4e>
	}
	else
	{
		Local_enuErrorState = ES_TWI_MASTER_READ_DATA_BYTE_ERROR;
    2392:	8c e0       	ldi	r24, 0x0C	; 12
    2394:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2396:	89 81       	ldd	r24, Y+1	; 0x01
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <TWI_enuMasterSendStopCondition>:

ES_t TWI_enuMasterSendStopCondition(void)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	89 83       	std	Y+1, r24	; 0x01

	/*Set stop condition bit*/
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    23b2:	e6 e5       	ldi	r30, 0x56	; 86
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	84 e9       	ldi	r24, 0x94	; 148
    23b8:	80 83       	st	Z, r24

	/*Clear the TWI flag to send the stop condition*/
	SET_BIT(TWCR,TWINT);
    23ba:	a6 e5       	ldi	r26, 0x56	; 86
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e6 e5       	ldi	r30, 0x56	; 86
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	80 68       	ori	r24, 0x80	; 128
    23c6:	8c 93       	st	X, r24

	return Local_enuErrorState;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <EEPROM_enuWriteDataByte>:
#include "EEPROM_priv.h"
#include "TWI_int.h"


ES_t EEPROM_enuWriteDataByte(u8 Copy_u8Data  , u16 Copy_u16Address)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <EEPROM_enuWriteDataByte+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <EEPROM_enuWriteDataByte+0x8>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	7d 83       	std	Y+5, r23	; 0x05
    23e4:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	8a 83       	std	Y+2, r24	; 0x02

#if EEPROM_TYPE == EEPROM_24C08_
	SalveAddr=(((0b01010<<3) |EEPROM_PIN_A2_CON | (Copy_u16Address & 0x0300)>>8)) ;

#elif EEPROM_TYPE == EEPROM_24C16_
	SalveAddr= (u8)((0b01010000)|(Copy_u16Address & 0x0700)>>8) ;
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	9d 81       	ldd	r25, Y+5	; 0x05
    23ee:	80 70       	andi	r24, 0x00	; 0
    23f0:	97 70       	andi	r25, 0x07	; 7
    23f2:	89 2f       	mov	r24, r25
    23f4:	99 27       	eor	r25, r25
    23f6:	80 65       	ori	r24, 0x50	; 80
    23f8:	89 83       	std	Y+1, r24	; 0x01
#endif

	TWI_enuMasterSendStartCondition();
    23fa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <TWI_enuMasterSendStartCondition>

	TWI_enuSendSlaveAddressWithWriteReq(SalveAddr);
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	0e 94 23 11 	call	0x2246	; 0x2246 <TWI_enuSendSlaveAddressWithWriteReq>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    2404:	8c 81       	ldd	r24, Y+4	; 0x04
    2406:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <TWI_enuMasterWriteDataByte>

	TWI_enuMasterWriteDataByte(Copy_u8Data);
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <TWI_enuMasterWriteDataByte>

	TWI_enuMasterSendStopCondition();
    2410:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <TWI_enuMasterSendStopCondition>

	return Local_enuErrorState;
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <EEPROM_enuReadDataByte>:


ES_t EEPROM_enuReadDataByte(u8 *Copy_pu8Data , u16 Copy_u16Address)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <EEPROM_enuReadDataByte+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <EEPROM_enuReadDataByte+0x8>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <EEPROM_enuReadDataByte+0xa>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    2438:	7e 83       	std	Y+6, r23	; 0x06
    243a:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	8a 83       	std	Y+2, r24	; 0x02

#if EEPROM_TYPE == EEPROM_24C08_
	SalveAddr=(((0b01010<<3) |EEPROM_PIN_A2_CON | (Copy_u16Address & 0x0300)>>8)) ;

#elif EEPROM_TYPE == EEPROM_24C16_
	SalveAddr= (u8)((0b01010000)|(Copy_u16Address & 0x0700)>>8) ;
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	80 70       	andi	r24, 0x00	; 0
    2446:	97 70       	andi	r25, 0x07	; 7
    2448:	89 2f       	mov	r24, r25
    244a:	99 27       	eor	r25, r25
    244c:	80 65       	ori	r24, 0x50	; 80
    244e:	89 83       	std	Y+1, r24	; 0x01
#endif

	TWI_enuMasterSendStartCondition();
    2450:	0e 94 dd 10 	call	0x21ba	; 0x21ba <TWI_enuMasterSendStartCondition>

	TWI_enuSendSlaveAddressWithWriteReq(SalveAddr);
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	0e 94 23 11 	call	0x2246	; 0x2246 <TWI_enuSendSlaveAddressWithWriteReq>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <TWI_enuMasterWriteDataByte>

	TWI_enuSendReapeatedStart();
    2460:	0e 94 00 11 	call	0x2200	; 0x2200 <TWI_enuSendReapeatedStart>

	TWI_enuSendSlaveAddressWithReadReq(SalveAddr);
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	0e 94 4d 11 	call	0x229a	; 0x229a <TWI_enuSendSlaveAddressWithReadReq>

	TWI_enuMasterReadDataByte(Copy_pu8Data);
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	0e 94 a4 11 	call	0x2348	; 0x2348 <TWI_enuMasterReadDataByte>

	TWI_enuMasterSendStopCondition();
    2472:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <TWI_enuMasterSendStopCondition>

	return Local_enuErrorState;
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2478:	26 96       	adiw	r28, 0x06	; 6
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <main>:




int main(void)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	c5 55       	subi	r28, 0x55	; 85
    2494:	d0 40       	sbci	r29, 0x00	; 0
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
	DIO_enuInit();
    24a0:	0e 94 29 0c 	call	0x1852	; 0x1852 <DIO_enuInit>
	TWI_enuInitMaster();
    24a4:	0e 94 ac 10 	call	0x2158	; 0x2158 <TWI_enuInitMaster>


	EEPROM_Handler_t hn;

	AdminORuser_t ADMIN;
	ADMIN.ID = 20;
    24a8:	fe 01       	movw	r30, r28
    24aa:	ec 5a       	subi	r30, 0xAC	; 172
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	84 e1       	ldi	r24, 0x14	; 20
    24b0:	80 83       	st	Z, r24
	ADMIN.Password = 5;
    24b2:	fe 01       	movw	r30, r28
    24b4:	ec 5a       	subi	r30, 0xAC	; 172
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	85 e0       	ldi	r24, 0x05	; 5
    24ba:	81 83       	std	Z+1, r24	; 0x01

	EEPROM_enuRestoreData(&hn);
    24bc:	ce 01       	movw	r24, r28
    24be:	02 96       	adiw	r24, 0x02	; 2
    24c0:	0e 94 9b 05 	call	0xb36	; 0xb36 <EEPROM_enuRestoreData>

    EEPROM_enuAddAdmin(&hn, &ADMIN);
    24c4:	ce 01       	movw	r24, r28
    24c6:	02 96       	adiw	r24, 0x02	; 2
    24c8:	9e 01       	movw	r18, r28
    24ca:	2c 5a       	subi	r18, 0xAC	; 172
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	b9 01       	movw	r22, r18
    24d0:	0e 94 66 08 	call	0x10cc	; 0x10cc <EEPROM_enuAddAdmin>


	u8 Admin0;

	Admin0 = hn.AdminsCount;
    24d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	ff cf       	rjmp	.-2      	; 0x24d8 <main+0x4e>

000024da <UART_init>:
#include "uart.h"
#include "avr/io.h"
#include "commonMacros.h"
#include "avr/interrupt.h"
void UART_init(const UART_ConfigType * Config_Ptr)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <UART_init+0x6>
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <UART_init+0x8>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
	u16 ubrr_value = 0;
    24ea:	1a 82       	std	Y+2, r1	; 0x02
    24ec:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA,U2X);//double speed
    24ee:	ab e2       	ldi	r26, 0x2B	; 43
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	eb e2       	ldi	r30, 0x2B	; 43
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	82 60       	ori	r24, 0x02	; 2
    24fa:	8c 93       	st	X, r24
	UCSRB=(1<< RXEN)|(1<< TXEN);
    24fc:	ea e2       	ldi	r30, 0x2A	; 42
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	88 e1       	ldi	r24, 0x18	; 24
    2502:	80 83       	st	Z, r24
	SET_BIT(UCSRC,URSEL);
    2504:	a0 e4       	ldi	r26, 0x40	; 64
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e0 e4       	ldi	r30, 0x40	; 64
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	80 68       	ori	r24, 0x80	; 128
    2510:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xf9)|((Config_Ptr->bit_data)<<1);
    2512:	a0 e4       	ldi	r26, 0x40	; 64
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e0 e4       	ldi	r30, 0x40	; 64
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	28 2f       	mov	r18, r24
    251e:	29 7f       	andi	r18, 0xF9	; 249
    2520:	eb 81       	ldd	r30, Y+3	; 0x03
    2522:	fc 81       	ldd	r31, Y+4	; 0x04
    2524:	80 81       	ld	r24, Z
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	82 2b       	or	r24, r18
    2530:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xcf)|((Config_Ptr->parity)<<4);
    2532:	a0 e4       	ldi	r26, 0x40	; 64
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e0 e4       	ldi	r30, 0x40	; 64
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	28 2f       	mov	r18, r24
    253e:	2f 7c       	andi	r18, 0xCF	; 207
    2540:	eb 81       	ldd	r30, Y+3	; 0x03
    2542:	fc 81       	ldd	r31, Y+4	; 0x04
    2544:	81 81       	ldd	r24, Z+1	; 0x01
    2546:	88 2f       	mov	r24, r24
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	82 95       	swap	r24
    254c:	92 95       	swap	r25
    254e:	90 7f       	andi	r25, 0xF0	; 240
    2550:	98 27       	eor	r25, r24
    2552:	80 7f       	andi	r24, 0xF0	; 240
    2554:	98 27       	eor	r25, r24
    2556:	82 2b       	or	r24, r18
    2558:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xf7)|((Config_Ptr->stop_bit)<<3);
    255a:	a0 e4       	ldi	r26, 0x40	; 64
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e0 e4       	ldi	r30, 0x40	; 64
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	28 2f       	mov	r18, r24
    2566:	27 7f       	andi	r18, 0xF7	; 247
    2568:	eb 81       	ldd	r30, Y+3	; 0x03
    256a:	fc 81       	ldd	r31, Y+4	; 0x04
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	88 2f       	mov	r24, r24
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	82 2b       	or	r24, r18
    2580:	8c 93       	st	X, r24
	ubrr_value = (u16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2582:	eb 81       	ldd	r30, Y+3	; 0x03
    2584:	fc 81       	ldd	r31, Y+4	; 0x04
    2586:	83 81       	ldd	r24, Z+3	; 0x03
    2588:	94 81       	ldd	r25, Z+4	; 0x04
    258a:	a5 81       	ldd	r26, Z+5	; 0x05
    258c:	b6 81       	ldd	r27, Z+6	; 0x06
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	aa 1f       	adc	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	aa 1f       	adc	r26, r26
    25a4:	bb 1f       	adc	r27, r27
    25a6:	9c 01       	movw	r18, r24
    25a8:	ad 01       	movw	r20, r26
    25aa:	80 e4       	ldi	r24, 0x40	; 64
    25ac:	92 e4       	ldi	r25, 0x42	; 66
    25ae:	af e0       	ldi	r26, 0x0F	; 15
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__udivmodsi4>
    25ba:	da 01       	movw	r26, r20
    25bc:	c9 01       	movw	r24, r18
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
    25c4:	e0 e4       	ldi	r30, 0x40	; 64
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	89 2f       	mov	r24, r25
    25ce:	99 27       	eor	r25, r25
    25d0:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    25d2:	e9 e2       	ldi	r30, 0x29	; 41
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	80 83       	st	Z, r24
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <UART_sendByte>:
void UART_sendByte(const u8 data)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE))
    25f4:	eb e2       	ldi	r30, 0x2B	; 43
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	80 72       	andi	r24, 0x20	; 32
    2600:	90 70       	andi	r25, 0x00	; 0
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	b9 f3       	breq	.-18     	; 0x25f4 <UART_sendByte+0xc>
	{

	}
	UDR=data;
    2606:	ec e2       	ldi	r30, 0x2C	; 44
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	80 83       	st	Z, r24
}
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <UART_recieveByte>:
u8 UART_recieveByte(void)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62

	while (BIT_IS_CLEAR(UCSRA,RXC))
    261e:	eb e2       	ldi	r30, 0x2B	; 43
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 23       	and	r24, r24
    2626:	dc f7       	brge	.-10     	; 0x261e <UART_recieveByte+0x8>
	{

	}
	return UDR ;
    2628:	ec e2       	ldi	r30, 0x2C	; 44
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <UART_sendString>:
void UART_sendString(const u8 *Str)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	00 d0       	rcall	.+0      	; 0x263a <UART_sendString+0x6>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	0a c0       	rjmp	.+20     	; 0x2658 <UART_sendString+0x24>
	 while((*Str)!='\0')
	 {
		 UART_sendByte(*Str);
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	80 81       	ld	r24, Z
    264a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <UART_sendByte>
		 Str++;
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
	}
	return UDR ;
}
void UART_sendString(const u8 *Str)
{
	 while((*Str)!='\0')
    2658:	e9 81       	ldd	r30, Y+1	; 0x01
    265a:	fa 81       	ldd	r31, Y+2	; 0x02
    265c:	80 81       	ld	r24, Z
    265e:	88 23       	and	r24, r24
    2660:	89 f7       	brne	.-30     	; 0x2644 <UART_sendString+0x10>
	 {
		 UART_sendByte(*Str);
		 Str++;

	 }
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <UART_receiveString>:
void UART_receiveString(u8 *Str)
{
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <UART_receiveString+0xa>
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	9b 83       	std	Y+3, r25	; 0x03
    267e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2680:	19 82       	std	Y+1, r1	; 0x01
	Str[i]=UART_recieveByte();
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	8c 01       	movw	r16, r24
    268e:	02 0f       	add	r16, r18
    2690:	13 1f       	adc	r17, r19
    2692:	0e 94 0b 13 	call	0x2616	; 0x2616 <UART_recieveByte>
    2696:	f8 01       	movw	r30, r16
    2698:	80 83       	st	Z, r24
    269a:	11 c0       	rjmp	.+34     	; 0x26be <UART_receiveString+0x52>
	while(Str[i]!='#')
	{
		Str++;
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	9b 83       	std	Y+3, r25	; 0x03
    26a4:	8a 83       	std	Y+2, r24	; 0x02
		Str[i]=UART_recieveByte();
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	8c 01       	movw	r16, r24
    26b2:	02 0f       	add	r16, r18
    26b4:	13 1f       	adc	r17, r19
    26b6:	0e 94 0b 13 	call	0x2616	; 0x2616 <UART_recieveByte>
    26ba:	f8 01       	movw	r30, r16
    26bc:	80 83       	st	Z, r24
}
void UART_receiveString(u8 *Str)
{
	u8 i=0;
	Str[i]=UART_recieveByte();
	while(Str[i]!='#')
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	fc 01       	movw	r30, r24
    26ca:	e2 0f       	add	r30, r18
    26cc:	f3 1f       	adc	r31, r19
    26ce:	80 81       	ld	r24, Z
    26d0:	83 32       	cpi	r24, 0x23	; 35
    26d2:	21 f7       	brne	.-56     	; 0x269c <UART_receiveString+0x30>
	{
		Str++;
		Str[i]=UART_recieveByte();
	}
	Str[i] = '\0';
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	fc 01       	movw	r30, r24
    26e0:	e2 0f       	add	r30, r18
    26e2:	f3 1f       	adc	r31, r19
    26e4:	10 82       	st	Z, r1
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	08 95       	ret

000026f6 <__udivmodsi4>:
    26f6:	a1 e2       	ldi	r26, 0x21	; 33
    26f8:	1a 2e       	mov	r1, r26
    26fa:	aa 1b       	sub	r26, r26
    26fc:	bb 1b       	sub	r27, r27
    26fe:	fd 01       	movw	r30, r26
    2700:	0d c0       	rjmp	.+26     	; 0x271c <__udivmodsi4_ep>

00002702 <__udivmodsi4_loop>:
    2702:	aa 1f       	adc	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	ee 1f       	adc	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	a2 17       	cp	r26, r18
    270c:	b3 07       	cpc	r27, r19
    270e:	e4 07       	cpc	r30, r20
    2710:	f5 07       	cpc	r31, r21
    2712:	20 f0       	brcs	.+8      	; 0x271c <__udivmodsi4_ep>
    2714:	a2 1b       	sub	r26, r18
    2716:	b3 0b       	sbc	r27, r19
    2718:	e4 0b       	sbc	r30, r20
    271a:	f5 0b       	sbc	r31, r21

0000271c <__udivmodsi4_ep>:
    271c:	66 1f       	adc	r22, r22
    271e:	77 1f       	adc	r23, r23
    2720:	88 1f       	adc	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	1a 94       	dec	r1
    2726:	69 f7       	brne	.-38     	; 0x2702 <__udivmodsi4_loop>
    2728:	60 95       	com	r22
    272a:	70 95       	com	r23
    272c:	80 95       	com	r24
    272e:	90 95       	com	r25
    2730:	9b 01       	movw	r18, r22
    2732:	ac 01       	movw	r20, r24
    2734:	bd 01       	movw	r22, r26
    2736:	cf 01       	movw	r24, r30
    2738:	08 95       	ret

0000273a <__prologue_saves__>:
    273a:	2f 92       	push	r2
    273c:	3f 92       	push	r3
    273e:	4f 92       	push	r4
    2740:	5f 92       	push	r5
    2742:	6f 92       	push	r6
    2744:	7f 92       	push	r7
    2746:	8f 92       	push	r8
    2748:	9f 92       	push	r9
    274a:	af 92       	push	r10
    274c:	bf 92       	push	r11
    274e:	cf 92       	push	r12
    2750:	df 92       	push	r13
    2752:	ef 92       	push	r14
    2754:	ff 92       	push	r15
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	ca 1b       	sub	r28, r26
    2764:	db 0b       	sbc	r29, r27
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	09 94       	ijmp

00002772 <__epilogue_restores__>:
    2772:	2a 88       	ldd	r2, Y+18	; 0x12
    2774:	39 88       	ldd	r3, Y+17	; 0x11
    2776:	48 88       	ldd	r4, Y+16	; 0x10
    2778:	5f 84       	ldd	r5, Y+15	; 0x0f
    277a:	6e 84       	ldd	r6, Y+14	; 0x0e
    277c:	7d 84       	ldd	r7, Y+13	; 0x0d
    277e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2780:	9b 84       	ldd	r9, Y+11	; 0x0b
    2782:	aa 84       	ldd	r10, Y+10	; 0x0a
    2784:	b9 84       	ldd	r11, Y+9	; 0x09
    2786:	c8 84       	ldd	r12, Y+8	; 0x08
    2788:	df 80       	ldd	r13, Y+7	; 0x07
    278a:	ee 80       	ldd	r14, Y+6	; 0x06
    278c:	fd 80       	ldd	r15, Y+5	; 0x05
    278e:	0c 81       	ldd	r16, Y+4	; 0x04
    2790:	1b 81       	ldd	r17, Y+3	; 0x03
    2792:	aa 81       	ldd	r26, Y+2	; 0x02
    2794:	b9 81       	ldd	r27, Y+1	; 0x01
    2796:	ce 0f       	add	r28, r30
    2798:	d1 1d       	adc	r29, r1
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	ed 01       	movw	r28, r26
    27a6:	08 95       	ret

000027a8 <_exit>:
    27a8:	f8 94       	cli

000027aa <__stop_program>:
    27aa:	ff cf       	rjmp	.-2      	; 0x27aa <__stop_program>
