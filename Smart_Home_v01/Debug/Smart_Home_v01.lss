
Smart_Home_v01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  00005d9c  00005e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005f  008001f4  008001f4  00005fc4  2**0
                  ALLOC
  3 .stab         00006540  00000000  00000000  00005fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028e9  00000000  00000000  0000c504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000eded  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000efcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00011a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00014498  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00014698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  000149a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000153fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__vector_10>
      2c:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 35       	cpi	r26, 0x53	; 83
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <main>
      8a:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 2e 	jmp	0x5c32	; 0x5c32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 2e 	jmp	0x5c32	; 0x5c32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 2e 	jmp	0x5c42	; 0x5c42 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ed       	ldi	r22, 0xD8	; 216
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 45 2e 	jmp	0x5c8a	; 0x5c8a <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 21 2e 	jmp	0x5c42	; 0x5c42 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e0 52       	subi	r30, 0x20	; 32
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <EEPROM_enuRestoreData>:

#include"../HAL/LCD/LCD_int.h"


ES_t EEPROM_enuRestoreData(EEPROM_Handler_t *Copy_pstrEEPROMHandler)
{
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	cf 55       	subi	r28, 0x5F	; 95
     f58:	d0 40       	sbci	r29, 0x00	; 0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	fe 01       	movw	r30, r28
     f66:	e2 5a       	subi	r30, 0xA2	; 162
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
	ES_t Local_enuErrState=ES_NOK;
     f6e:	fe 01       	movw	r30, r28
     f70:	e3 5a       	subi	r30, 0xA3	; 163
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	10 82       	st	Z, r1

	u8 temp ;

	/*at first read the admins and users count*/
	EEPROM_enuReadDataByte(&(Copy_pstrEEPROMHandler->AdminsCount) , 90); // number of admins
     f76:	fe 01       	movw	r30, r28
     f78:	e2 5a       	subi	r30, 0xA2	; 162
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	88 96       	adiw	r24, 0x28	; 40
     f82:	6a e5       	ldi	r22, 0x5A	; 90
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <EEPROM_enuReadDataByte>
     f8a:	fe 01       	movw	r30, r28
     f8c:	ef 5a       	subi	r30, 0xAF	; 175
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a8 e4       	ldi	r26, 0x48	; 72
     f96:	b2 e4       	ldi	r27, 0x42	; 66
     f98:	80 83       	st	Z, r24
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	a2 83       	std	Z+2, r26	; 0x02
     f9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	8e 01       	movw	r16, r28
     fa2:	03 5b       	subi	r16, 0xB3	; 179
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	fe 01       	movw	r30, r28
     fa8:	ef 5a       	subi	r30, 0xAF	; 175
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	60 81       	ld	r22, Z
     fae:	71 81       	ldd	r23, Z+1	; 0x01
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4a e7       	ldi	r20, 0x7A	; 122
     fba:	53 e4       	ldi	r21, 0x43	; 67
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	f8 01       	movw	r30, r16
     fc6:	80 83       	st	Z, r24
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	a2 83       	std	Z+2, r26	; 0x02
     fcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fce:	fe 01       	movw	r30, r28
     fd0:	e3 5b       	subi	r30, 0xB3	; 179
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	44 f4       	brge	.+16     	; 0xffc <EEPROM_enuRestoreData+0xb2>
		__ticks = 1;
     fec:	fe 01       	movw	r30, r28
     fee:	e5 5b       	subi	r30, 0xB5	; 181
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
     ffa:	64 c0       	rjmp	.+200    	; 0x10c4 <EEPROM_enuRestoreData+0x17a>
	else if (__tmp > 65535)
     ffc:	fe 01       	movw	r30, r28
     ffe:	e3 5b       	subi	r30, 0xB3	; 179
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	3f ef       	ldi	r19, 0xFF	; 255
    100e:	4f e7       	ldi	r20, 0x7F	; 127
    1010:	57 e4       	ldi	r21, 0x47	; 71
    1012:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1016:	18 16       	cp	r1, r24
    1018:	0c f0       	brlt	.+2      	; 0x101c <EEPROM_enuRestoreData+0xd2>
    101a:	43 c0       	rjmp	.+134    	; 0x10a2 <EEPROM_enuRestoreData+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101c:	fe 01       	movw	r30, r28
    101e:	ef 5a       	subi	r30, 0xAF	; 175
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	8e 01       	movw	r16, r28
    103c:	05 5b       	subi	r16, 0xB5	; 181
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	f8 01       	movw	r30, r16
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
    1052:	1f c0       	rjmp	.+62     	; 0x1092 <EEPROM_enuRestoreData+0x148>
    1054:	fe 01       	movw	r30, r28
    1056:	e7 5b       	subi	r30, 0xB7	; 183
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	89 e1       	ldi	r24, 0x19	; 25
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1062:	fe 01       	movw	r30, r28
    1064:	e7 5b       	subi	r30, 0xB7	; 183
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <EEPROM_enuRestoreData+0x122>
    1070:	fe 01       	movw	r30, r28
    1072:	e7 5b       	subi	r30, 0xB7	; 183
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	de 01       	movw	r26, r28
    107c:	a5 5b       	subi	r26, 0xB5	; 181
    107e:	bf 4f       	sbci	r27, 0xFF	; 255
    1080:	fe 01       	movw	r30, r28
    1082:	e5 5b       	subi	r30, 0xB5	; 181
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	9c 93       	st	X, r25
    1090:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	fe 01       	movw	r30, r28
    1094:	e5 5b       	subi	r30, 0xB5	; 181
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	d1 f6       	brne	.-76     	; 0x1054 <EEPROM_enuRestoreData+0x10a>
    10a0:	27 c0       	rjmp	.+78     	; 0x10f0 <EEPROM_enuRestoreData+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a2:	8e 01       	movw	r16, r28
    10a4:	05 5b       	subi	r16, 0xB5	; 181
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	fe 01       	movw	r30, r28
    10aa:	e3 5b       	subi	r30, 0xB3	; 179
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	f8 01       	movw	r30, r16
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
    10c4:	de 01       	movw	r26, r28
    10c6:	a9 5b       	subi	r26, 0xB9	; 185
    10c8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ca:	fe 01       	movw	r30, r28
    10cc:	e5 5b       	subi	r30, 0xB5	; 181
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	8d 93       	st	X+, r24
    10d6:	9c 93       	st	X, r25
    10d8:	fe 01       	movw	r30, r28
    10da:	e9 5b       	subi	r30, 0xB9	; 185
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <EEPROM_enuRestoreData+0x198>
    10e6:	fe 01       	movw	r30, r28
    10e8:	e9 5b       	subi	r30, 0xB9	; 185
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
	_delay_ms(50);
	EEPROM_enuReadDataByte(&(Copy_pstrEEPROMHandler->UsersCount)  , 95); // number of users
    10f0:	fe 01       	movw	r30, r28
    10f2:	e2 5a       	subi	r30, 0xA2	; 162
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	8f 5a       	subi	r24, 0xAF	; 175
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	6f e5       	ldi	r22, 0x5F	; 95
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <EEPROM_enuReadDataByte>
    1106:	fe 01       	movw	r30, r28
    1108:	ed 5b       	subi	r30, 0xBD	; 189
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a8 e4       	ldi	r26, 0x48	; 72
    1112:	b2 e4       	ldi	r27, 0x42	; 66
    1114:	80 83       	st	Z, r24
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	a2 83       	std	Z+2, r26	; 0x02
    111a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	8e 01       	movw	r16, r28
    111e:	01 5c       	subi	r16, 0xC1	; 193
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	fe 01       	movw	r30, r28
    1124:	ed 5b       	subi	r30, 0xBD	; 189
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	4a e7       	ldi	r20, 0x7A	; 122
    1136:	53 e4       	ldi	r21, 0x43	; 67
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	f8 01       	movw	r30, r16
    1142:	80 83       	st	Z, r24
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	a2 83       	std	Z+2, r26	; 0x02
    1148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    114a:	fe 01       	movw	r30, r28
    114c:	ff 96       	adiw	r30, 0x3f	; 63
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1162:	88 23       	and	r24, r24
    1164:	2c f4       	brge	.+10     	; 0x1170 <EEPROM_enuRestoreData+0x226>
		__ticks = 1;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9e af       	std	Y+62, r25	; 0x3e
    116c:	8d af       	std	Y+61, r24	; 0x3d
    116e:	46 c0       	rjmp	.+140    	; 0x11fc <EEPROM_enuRestoreData+0x2b2>
	else if (__tmp > 65535)
    1170:	fe 01       	movw	r30, r28
    1172:	ff 96       	adiw	r30, 0x3f	; 63
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	3f ef       	ldi	r19, 0xFF	; 255
    1180:	4f e7       	ldi	r20, 0x7F	; 127
    1182:	57 e4       	ldi	r21, 0x47	; 71
    1184:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1188:	18 16       	cp	r1, r24
    118a:	64 f5       	brge	.+88     	; 0x11e4 <EEPROM_enuRestoreData+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118c:	fe 01       	movw	r30, r28
    118e:	ed 5b       	subi	r30, 0xBD	; 189
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e2       	ldi	r20, 0x20	; 32
    11a0:	51 e4       	ldi	r21, 0x41	; 65
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9e af       	std	Y+62, r25	; 0x3e
    11b8:	8d af       	std	Y+61, r24	; 0x3d
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <EEPROM_enuRestoreData+0x290>
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c af       	std	Y+60, r25	; 0x3c
    11c2:	8b af       	std	Y+59, r24	; 0x3b
    11c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    11c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <EEPROM_enuRestoreData+0x27e>
    11cc:	9c af       	std	Y+60, r25	; 0x3c
    11ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	9e af       	std	Y+62, r25	; 0x3e
    11d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11da:	8d ad       	ldd	r24, Y+61	; 0x3d
    11dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	69 f7       	brne	.-38     	; 0x11bc <EEPROM_enuRestoreData+0x272>
    11e2:	16 c0       	rjmp	.+44     	; 0x1210 <EEPROM_enuRestoreData+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e4:	fe 01       	movw	r30, r28
    11e6:	ff 96       	adiw	r30, 0x3f	; 63
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9e af       	std	Y+62, r25	; 0x3e
    11fa:	8d af       	std	Y+61, r24	; 0x3d
    11fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    11fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1200:	9a af       	std	Y+58, r25	; 0x3a
    1202:	89 af       	std	Y+57, r24	; 0x39
    1204:	89 ad       	ldd	r24, Y+57	; 0x39
    1206:	9a ad       	ldd	r25, Y+58	; 0x3a
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <EEPROM_enuRestoreData+0x2be>
    120c:	9a af       	std	Y+58, r25	; 0x3a
    120e:	89 af       	std	Y+57, r24	; 0x39
	/*******************************************************
	               array of admins IDs
	 ******************************************************/

	/*Admin ID from address 0 to 19*/
	temp = Copy_pstrEEPROMHandler->AdminsCount;
    1210:	de 01       	movw	r26, r28
    1212:	a4 5a       	subi	r26, 0xA4	; 164
    1214:	bf 4f       	sbci	r27, 0xFF	; 255
    1216:	fe 01       	movw	r30, r28
    1218:	e2 5a       	subi	r30, 0xA2	; 162
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	01 90       	ld	r0, Z+
    121e:	f0 81       	ld	r31, Z
    1220:	e0 2d       	mov	r30, r0
    1222:	80 a5       	ldd	r24, Z+40	; 0x28
    1224:	8c 93       	st	X, r24
	for(u8 i=0 ; i<temp; i++)
    1226:	fe 01       	movw	r30, r28
    1228:	e5 5a       	subi	r30, 0xA5	; 165
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	10 82       	st	Z, r1
    122e:	93 c0       	rjmp	.+294    	; 0x1356 <EEPROM_enuRestoreData+0x40c>
	{
		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->AdminID + i) , i);
    1230:	fe 01       	movw	r30, r28
    1232:	e2 5a       	subi	r30, 0xA2	; 162
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	20 81       	ld	r18, Z
    1238:	31 81       	ldd	r19, Z+1	; 0x01
    123a:	fe 01       	movw	r30, r28
    123c:	e5 5a       	subi	r30, 0xA5	; 165
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 81       	ld	r24, Z
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	48 0f       	add	r20, r24
    124a:	59 1f       	adc	r21, r25
    124c:	fe 01       	movw	r30, r28
    124e:	e5 5a       	subi	r30, 0xA5	; 165
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	ca 01       	movw	r24, r20
    125a:	b9 01       	movw	r22, r18
    125c:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <EEPROM_enuReadDataByte>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a8 e4       	ldi	r26, 0x48	; 72
    1266:	b2 e4       	ldi	r27, 0x42	; 66
    1268:	8d ab       	std	Y+53, r24	; 0x35
    126a:	9e ab       	std	Y+54, r25	; 0x36
    126c:	af ab       	std	Y+55, r26	; 0x37
    126e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6d a9       	ldd	r22, Y+53	; 0x35
    1272:	7e a9       	ldd	r23, Y+54	; 0x36
    1274:	8f a9       	ldd	r24, Y+55	; 0x37
    1276:	98 ad       	ldd	r25, Y+56	; 0x38
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a e7       	ldi	r20, 0x7A	; 122
    127e:	53 e4       	ldi	r21, 0x43	; 67
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	89 ab       	std	Y+49, r24	; 0x31
    128a:	9a ab       	std	Y+50, r25	; 0x32
    128c:	ab ab       	std	Y+51, r26	; 0x33
    128e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1290:	69 a9       	ldd	r22, Y+49	; 0x31
    1292:	7a a9       	ldd	r23, Y+50	; 0x32
    1294:	8b a9       	ldd	r24, Y+51	; 0x33
    1296:	9c a9       	ldd	r25, Y+52	; 0x34
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <EEPROM_enuRestoreData+0x368>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	98 ab       	std	Y+48, r25	; 0x30
    12ae:	8f a7       	std	Y+47, r24	; 0x2f
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <EEPROM_enuRestoreData+0x3e6>
	else if (__tmp > 65535)
    12b2:	69 a9       	ldd	r22, Y+49	; 0x31
    12b4:	7a a9       	ldd	r23, Y+50	; 0x32
    12b6:	8b a9       	ldd	r24, Y+51	; 0x33
    12b8:	9c a9       	ldd	r25, Y+52	; 0x34
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <EEPROM_enuRestoreData+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6d a9       	ldd	r22, Y+53	; 0x35
    12cc:	7e a9       	ldd	r23, Y+54	; 0x36
    12ce:	8f a9       	ldd	r24, Y+55	; 0x37
    12d0:	98 ad       	ldd	r25, Y+56	; 0x38
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <EEPROM_enuRestoreData+0x3c8>
    12f4:	89 e1       	ldi	r24, 0x19	; 25
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9e a7       	std	Y+46, r25	; 0x2e
    12fa:	8d a7       	std	Y+45, r24	; 0x2d
    12fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <EEPROM_enuRestoreData+0x3b6>
    1304:	9e a7       	std	Y+46, r25	; 0x2e
    1306:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8f a5       	ldd	r24, Y+47	; 0x2f
    130a:	98 a9       	ldd	r25, Y+48	; 0x30
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	98 ab       	std	Y+48, r25	; 0x30
    1310:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8f a5       	ldd	r24, Y+47	; 0x2f
    1314:	98 a9       	ldd	r25, Y+48	; 0x30
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <EEPROM_enuRestoreData+0x3aa>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <EEPROM_enuRestoreData+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	69 a9       	ldd	r22, Y+49	; 0x31
    131e:	7a a9       	ldd	r23, Y+50	; 0x32
    1320:	8b a9       	ldd	r24, Y+51	; 0x33
    1322:	9c a9       	ldd	r25, Y+52	; 0x34
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	98 ab       	std	Y+48, r25	; 0x30
    132e:	8f a7       	std	Y+47, r24	; 0x2f
    1330:	8f a5       	ldd	r24, Y+47	; 0x2f
    1332:	98 a9       	ldd	r25, Y+48	; 0x30
    1334:	9c a7       	std	Y+44, r25	; 0x2c
    1336:	8b a7       	std	Y+43, r24	; 0x2b
    1338:	8b a5       	ldd	r24, Y+43	; 0x2b
    133a:	9c a5       	ldd	r25, Y+44	; 0x2c
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <EEPROM_enuRestoreData+0x3f2>
    1340:	9c a7       	std	Y+44, r25	; 0x2c
    1342:	8b a7       	std	Y+43, r24	; 0x2b
	               array of admins IDs
	 ******************************************************/

	/*Admin ID from address 0 to 19*/
	temp = Copy_pstrEEPROMHandler->AdminsCount;
	for(u8 i=0 ; i<temp; i++)
    1344:	de 01       	movw	r26, r28
    1346:	a5 5a       	subi	r26, 0xA5	; 165
    1348:	bf 4f       	sbci	r27, 0xFF	; 255
    134a:	fe 01       	movw	r30, r28
    134c:	e5 5a       	subi	r30, 0xA5	; 165
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	8c 93       	st	X, r24
    1356:	fe 01       	movw	r30, r28
    1358:	e5 5a       	subi	r30, 0xA5	; 165
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	de 01       	movw	r26, r28
    135e:	a4 5a       	subi	r26, 0xA4	; 164
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	90 81       	ld	r25, Z
    1364:	8c 91       	ld	r24, X
    1366:	98 17       	cp	r25, r24
    1368:	08 f4       	brcc	.+2      	; 0x136c <EEPROM_enuRestoreData+0x422>
    136a:	62 cf       	rjmp	.-316    	; 0x1230 <EEPROM_enuRestoreData+0x2e6>
	/*******************************************************
	               array of admins passwords
	 ******************************************************/

	/*Admin password from address 20 to 39*/
	temp = Copy_pstrEEPROMHandler->AdminsCount + 20;
    136c:	fe 01       	movw	r30, r28
    136e:	e2 5a       	subi	r30, 0xA2	; 162
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	01 90       	ld	r0, Z+
    1374:	f0 81       	ld	r31, Z
    1376:	e0 2d       	mov	r30, r0
    1378:	80 a5       	ldd	r24, Z+40	; 0x28
    137a:	fe 01       	movw	r30, r28
    137c:	e4 5a       	subi	r30, 0xA4	; 164
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	8c 5e       	subi	r24, 0xEC	; 236
    1382:	80 83       	st	Z, r24
	for(u8 i=20 ; i<temp ; i++)
    1384:	fe 01       	movw	r30, r28
    1386:	e6 5a       	subi	r30, 0xA6	; 166
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	84 e1       	ldi	r24, 0x14	; 20
    138c:	80 83       	st	Z, r24
    138e:	a3 c0       	rjmp	.+326    	; 0x14d6 <EEPROM_enuRestoreData+0x58c>
	{
		u8 Local_u8ArrIndex = 0;
    1390:	fe 01       	movw	r30, r28
    1392:	e7 5a       	subi	r30, 0xA7	; 167
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	10 82       	st	Z, r1

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->AdminPAS + Local_u8ArrIndex) , i);
    1398:	fe 01       	movw	r30, r28
    139a:	e2 5a       	subi	r30, 0xA2	; 162
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	9c 01       	movw	r18, r24
    13a4:	2c 5e       	subi	r18, 0xEC	; 236
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	fe 01       	movw	r30, r28
    13aa:	e7 5a       	subi	r30, 0xA7	; 167
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	48 0f       	add	r20, r24
    13b8:	59 1f       	adc	r21, r25
    13ba:	fe 01       	movw	r30, r28
    13bc:	e6 5a       	subi	r30, 0xA6	; 166
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	ca 01       	movw	r24, r20
    13c8:	b9 01       	movw	r22, r18
    13ca:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
    13ce:	de 01       	movw	r26, r28
    13d0:	a7 5a       	subi	r26, 0xA7	; 167
    13d2:	bf 4f       	sbci	r27, 0xFF	; 255
    13d4:	fe 01       	movw	r30, r28
    13d6:	e7 5a       	subi	r30, 0xA7	; 167
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	8c 93       	st	X, r24
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a8 e4       	ldi	r26, 0x48	; 72
    13e6:	b2 e4       	ldi	r27, 0x42	; 66
    13e8:	8f a3       	std	Y+39, r24	; 0x27
    13ea:	98 a7       	std	Y+40, r25	; 0x28
    13ec:	a9 a7       	std	Y+41, r26	; 0x29
    13ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	6f a1       	ldd	r22, Y+39	; 0x27
    13f2:	78 a5       	ldd	r23, Y+40	; 0x28
    13f4:	89 a5       	ldd	r24, Y+41	; 0x29
    13f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4a e7       	ldi	r20, 0x7A	; 122
    13fe:	53 e4       	ldi	r21, 0x43	; 67
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8b a3       	std	Y+35, r24	; 0x23
    140a:	9c a3       	std	Y+36, r25	; 0x24
    140c:	ad a3       	std	Y+37, r26	; 0x25
    140e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1410:	6b a1       	ldd	r22, Y+35	; 0x23
    1412:	7c a1       	ldd	r23, Y+36	; 0x24
    1414:	8d a1       	ldd	r24, Y+37	; 0x25
    1416:	9e a1       	ldd	r25, Y+38	; 0x26
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	2c f4       	brge	.+10     	; 0x1432 <EEPROM_enuRestoreData+0x4e8>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9a a3       	std	Y+34, r25	; 0x22
    142e:	89 a3       	std	Y+33, r24	; 0x21
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <EEPROM_enuRestoreData+0x566>
	else if (__tmp > 65535)
    1432:	6b a1       	ldd	r22, Y+35	; 0x23
    1434:	7c a1       	ldd	r23, Y+36	; 0x24
    1436:	8d a1       	ldd	r24, Y+37	; 0x25
    1438:	9e a1       	ldd	r25, Y+38	; 0x26
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	4c f5       	brge	.+82     	; 0x149c <EEPROM_enuRestoreData+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	6f a1       	ldd	r22, Y+39	; 0x27
    144c:	78 a5       	ldd	r23, Y+40	; 0x28
    144e:	89 a5       	ldd	r24, Y+41	; 0x29
    1450:	9a a5       	ldd	r25, Y+42	; 0x2a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9a a3       	std	Y+34, r25	; 0x22
    1470:	89 a3       	std	Y+33, r24	; 0x21
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <EEPROM_enuRestoreData+0x548>
    1474:	89 e1       	ldi	r24, 0x19	; 25
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	98 a3       	std	Y+32, r25	; 0x20
    147a:	8f 8f       	std	Y+31, r24	; 0x1f
    147c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    147e:	98 a1       	ldd	r25, Y+32	; 0x20
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <EEPROM_enuRestoreData+0x536>
    1484:	98 a3       	std	Y+32, r25	; 0x20
    1486:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	89 a1       	ldd	r24, Y+33	; 0x21
    148a:	9a a1       	ldd	r25, Y+34	; 0x22
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	9a a3       	std	Y+34, r25	; 0x22
    1490:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1492:	89 a1       	ldd	r24, Y+33	; 0x21
    1494:	9a a1       	ldd	r25, Y+34	; 0x22
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f7       	brne	.-38     	; 0x1474 <EEPROM_enuRestoreData+0x52a>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <EEPROM_enuRestoreData+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	6b a1       	ldd	r22, Y+35	; 0x23
    149e:	7c a1       	ldd	r23, Y+36	; 0x24
    14a0:	8d a1       	ldd	r24, Y+37	; 0x25
    14a2:	9e a1       	ldd	r25, Y+38	; 0x26
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	89 a1       	ldd	r24, Y+33	; 0x21
    14b2:	9a a1       	ldd	r25, Y+34	; 0x22
    14b4:	9e 8f       	std	Y+30, r25	; 0x1e
    14b6:	8d 8f       	std	Y+29, r24	; 0x1d
    14b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <EEPROM_enuRestoreData+0x572>
    14c0:	9e 8f       	std	Y+30, r25	; 0x1e
    14c2:	8d 8f       	std	Y+29, r24	; 0x1d
	               array of admins passwords
	 ******************************************************/

	/*Admin password from address 20 to 39*/
	temp = Copy_pstrEEPROMHandler->AdminsCount + 20;
	for(u8 i=20 ; i<temp ; i++)
    14c4:	de 01       	movw	r26, r28
    14c6:	a6 5a       	subi	r26, 0xA6	; 166
    14c8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	e6 5a       	subi	r30, 0xA6	; 166
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	8c 93       	st	X, r24
    14d6:	fe 01       	movw	r30, r28
    14d8:	e6 5a       	subi	r30, 0xA6	; 166
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	de 01       	movw	r26, r28
    14de:	a4 5a       	subi	r26, 0xA4	; 164
    14e0:	bf 4f       	sbci	r27, 0xFF	; 255
    14e2:	90 81       	ld	r25, Z
    14e4:	8c 91       	ld	r24, X
    14e6:	98 17       	cp	r25, r24
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <EEPROM_enuRestoreData+0x5a2>
    14ea:	52 cf       	rjmp	.-348    	; 0x1390 <EEPROM_enuRestoreData+0x446>

	/*******************************************************
	               array of users IDs
	 ******************************************************/
	/*User ID from address 40 to 59*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 40;
    14ec:	fe 01       	movw	r30, r28
    14ee:	e2 5a       	subi	r30, 0xA2	; 162
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	fc 01       	movw	r30, r24
    14f8:	ef 5a       	subi	r30, 0xAF	; 175
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	fe 01       	movw	r30, r28
    1500:	e4 5a       	subi	r30, 0xA4	; 164
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	88 5d       	subi	r24, 0xD8	; 216
    1506:	80 83       	st	Z, r24
	for(u8 i=40 ; i<temp ; i++)
    1508:	fe 01       	movw	r30, r28
    150a:	e8 5a       	subi	r30, 0xA8	; 168
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	88 e2       	ldi	r24, 0x28	; 40
    1510:	80 83       	st	Z, r24
    1512:	a3 c0       	rjmp	.+326    	; 0x165a <EEPROM_enuRestoreData+0x710>
	{
		u8 Local_u8ArrIndex = 0;
    1514:	fe 01       	movw	r30, r28
    1516:	e9 5a       	subi	r30, 0xA9	; 169
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	10 82       	st	Z, r1

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->UserID + Local_u8ArrIndex) , i);
    151c:	fe 01       	movw	r30, r28
    151e:	e2 5a       	subi	r30, 0xA2	; 162
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	9c 01       	movw	r18, r24
    1528:	27 5d       	subi	r18, 0xD7	; 215
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	fe 01       	movw	r30, r28
    152e:	e9 5a       	subi	r30, 0xA9	; 169
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a9 01       	movw	r20, r18
    153a:	48 0f       	add	r20, r24
    153c:	59 1f       	adc	r21, r25
    153e:	fe 01       	movw	r30, r28
    1540:	e8 5a       	subi	r30, 0xA8	; 168
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	ca 01       	movw	r24, r20
    154c:	b9 01       	movw	r22, r18
    154e:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
    1552:	de 01       	movw	r26, r28
    1554:	a9 5a       	subi	r26, 0xA9	; 169
    1556:	bf 4f       	sbci	r27, 0xFF	; 255
    1558:	fe 01       	movw	r30, r28
    155a:	e9 5a       	subi	r30, 0xA9	; 169
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	80 81       	ld	r24, Z
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	8c 93       	st	X, r24
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a8 e4       	ldi	r26, 0x48	; 72
    156a:	b2 e4       	ldi	r27, 0x42	; 66
    156c:	89 8f       	std	Y+25, r24	; 0x19
    156e:	9a 8f       	std	Y+26, r25	; 0x1a
    1570:	ab 8f       	std	Y+27, r26	; 0x1b
    1572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	69 8d       	ldd	r22, Y+25	; 0x19
    1576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a e7       	ldi	r20, 0x7A	; 122
    1582:	53 e4       	ldi	r21, 0x43	; 67
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8d 8b       	std	Y+21, r24	; 0x15
    158e:	9e 8b       	std	Y+22, r25	; 0x16
    1590:	af 8b       	std	Y+23, r26	; 0x17
    1592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1594:	6d 89       	ldd	r22, Y+21	; 0x15
    1596:	7e 89       	ldd	r23, Y+22	; 0x16
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	98 8d       	ldd	r25, Y+24	; 0x18
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <EEPROM_enuRestoreData+0x66c>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 8b       	std	Y+20, r25	; 0x14
    15b2:	8b 8b       	std	Y+19, r24	; 0x13
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <EEPROM_enuRestoreData+0x6ea>
	else if (__tmp > 65535)
    15b6:	6d 89       	ldd	r22, Y+21	; 0x15
    15b8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ba:	8f 89       	ldd	r24, Y+23	; 0x17
    15bc:	98 8d       	ldd	r25, Y+24	; 0x18
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <EEPROM_enuRestoreData+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	69 8d       	ldd	r22, Y+25	; 0x19
    15d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <EEPROM_enuRestoreData+0x6cc>
    15f8:	89 e1       	ldi	r24, 0x19	; 25
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9a 8b       	std	Y+18, r25	; 0x12
    15fe:	89 8b       	std	Y+17, r24	; 0x11
    1600:	89 89       	ldd	r24, Y+17	; 0x11
    1602:	9a 89       	ldd	r25, Y+18	; 0x12
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <EEPROM_enuRestoreData+0x6ba>
    1608:	9a 8b       	std	Y+18, r25	; 0x12
    160a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9c 8b       	std	Y+20, r25	; 0x14
    1614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	8b 89       	ldd	r24, Y+19	; 0x13
    1618:	9c 89       	ldd	r25, Y+20	; 0x14
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <EEPROM_enuRestoreData+0x6ae>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <EEPROM_enuRestoreData+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9c 8b       	std	Y+20, r25	; 0x14
    1632:	8b 8b       	std	Y+19, r24	; 0x13
    1634:	8b 89       	ldd	r24, Y+19	; 0x13
    1636:	9c 89       	ldd	r25, Y+20	; 0x14
    1638:	98 8b       	std	Y+16, r25	; 0x10
    163a:	8f 87       	std	Y+15, r24	; 0x0f
    163c:	8f 85       	ldd	r24, Y+15	; 0x0f
    163e:	98 89       	ldd	r25, Y+16	; 0x10
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <EEPROM_enuRestoreData+0x6f6>
    1644:	98 8b       	std	Y+16, r25	; 0x10
    1646:	8f 87       	std	Y+15, r24	; 0x0f
	/*******************************************************
	               array of users IDs
	 ******************************************************/
	/*User ID from address 40 to 59*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 40;
	for(u8 i=40 ; i<temp ; i++)
    1648:	de 01       	movw	r26, r28
    164a:	a8 5a       	subi	r26, 0xA8	; 168
    164c:	bf 4f       	sbci	r27, 0xFF	; 255
    164e:	fe 01       	movw	r30, r28
    1650:	e8 5a       	subi	r30, 0xA8	; 168
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	8c 93       	st	X, r24
    165a:	fe 01       	movw	r30, r28
    165c:	e8 5a       	subi	r30, 0xA8	; 168
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	de 01       	movw	r26, r28
    1662:	a4 5a       	subi	r26, 0xA4	; 164
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	90 81       	ld	r25, Z
    1668:	8c 91       	ld	r24, X
    166a:	98 17       	cp	r25, r24
    166c:	08 f4       	brcc	.+2      	; 0x1670 <EEPROM_enuRestoreData+0x726>
    166e:	52 cf       	rjmp	.-348    	; 0x1514 <EEPROM_enuRestoreData+0x5ca>

	/*******************************************************
	               array of users passwords
	 ******************************************************/
	/*User password from address 60 to 79*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 60;
    1670:	fe 01       	movw	r30, r28
    1672:	e2 5a       	subi	r30, 0xA2	; 162
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	fc 01       	movw	r30, r24
    167c:	ef 5a       	subi	r30, 0xAF	; 175
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 81       	ld	r24, Z
    1682:	fe 01       	movw	r30, r28
    1684:	e4 5a       	subi	r30, 0xA4	; 164
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	84 5c       	subi	r24, 0xC4	; 196
    168a:	80 83       	st	Z, r24
	for(u8 i=60 ; i<temp ;i++)
    168c:	fe 01       	movw	r30, r28
    168e:	ea 5a       	subi	r30, 0xAA	; 170
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	8c e3       	ldi	r24, 0x3C	; 60
    1694:	80 83       	st	Z, r24
    1696:	a3 c0       	rjmp	.+326    	; 0x17de <EEPROM_enuRestoreData+0x894>
	{
		u8 Local_u8ArrIndex = 0;
    1698:	fe 01       	movw	r30, r28
    169a:	eb 5a       	subi	r30, 0xAB	; 171
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	10 82       	st	Z, r1

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->UserPAS + Local_u8ArrIndex) , i);
    16a0:	fe 01       	movw	r30, r28
    16a2:	e2 5a       	subi	r30, 0xA2	; 162
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	9c 01       	movw	r18, r24
    16ac:	23 5c       	subi	r18, 0xC3	; 195
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	eb 5a       	subi	r30, 0xAB	; 171
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a9 01       	movw	r20, r18
    16be:	48 0f       	add	r20, r24
    16c0:	59 1f       	adc	r21, r25
    16c2:	fe 01       	movw	r30, r28
    16c4:	ea 5a       	subi	r30, 0xAA	; 170
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	ca 01       	movw	r24, r20
    16d0:	b9 01       	movw	r22, r18
    16d2:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
    16d6:	de 01       	movw	r26, r28
    16d8:	ab 5a       	subi	r26, 0xAB	; 171
    16da:	bf 4f       	sbci	r27, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	eb 5a       	subi	r30, 0xAB	; 171
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	8c 93       	st	X, r24
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a8 e4       	ldi	r26, 0x48	; 72
    16ee:	b2 e4       	ldi	r27, 0x42	; 66
    16f0:	8b 87       	std	Y+11, r24	; 0x0b
    16f2:	9c 87       	std	Y+12, r25	; 0x0c
    16f4:	ad 87       	std	Y+13, r26	; 0x0d
    16f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	4a e7       	ldi	r20, 0x7A	; 122
    1706:	53 e4       	ldi	r21, 0x43	; 67
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	8f 83       	std	Y+7, r24	; 0x07
    1712:	98 87       	std	Y+8, r25	; 0x08
    1714:	a9 87       	std	Y+9, r26	; 0x09
    1716:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    172c:	88 23       	and	r24, r24
    172e:	2c f4       	brge	.+10     	; 0x173a <EEPROM_enuRestoreData+0x7f0>
		__ticks = 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	3f c0       	rjmp	.+126    	; 0x17b8 <EEPROM_enuRestoreData+0x86e>
	else if (__tmp > 65535)
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    1746:	4f e7       	ldi	r20, 0x7F	; 127
    1748:	57 e4       	ldi	r21, 0x47	; 71
    174a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    174e:	18 16       	cp	r1, r24
    1750:	4c f5       	brge	.+82     	; 0x17a4 <EEPROM_enuRestoreData+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	6b 85       	ldd	r22, Y+11	; 0x0b
    1754:	7c 85       	ldd	r23, Y+12	; 0x0c
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	9e 85       	ldd	r25, Y+14	; 0x0e
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e2       	ldi	r20, 0x20	; 32
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	0f c0       	rjmp	.+30     	; 0x179a <EEPROM_enuRestoreData+0x850>
    177c:	89 e1       	ldi	r24, 0x19	; 25
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 83       	std	Y+4, r25	; 0x04
    1782:	8b 83       	std	Y+3, r24	; 0x03
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <EEPROM_enuRestoreData+0x83e>
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	69 f7       	brne	.-38     	; 0x177c <EEPROM_enuRestoreData+0x832>
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <EEPROM_enuRestoreData+0x882>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <EEPROM_enuRestoreData+0x87a>
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
	/*******************************************************
	               array of users passwords
	 ******************************************************/
	/*User password from address 60 to 79*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 60;
	for(u8 i=60 ; i<temp ;i++)
    17cc:	de 01       	movw	r26, r28
    17ce:	aa 5a       	subi	r26, 0xAA	; 170
    17d0:	bf 4f       	sbci	r27, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	ea 5a       	subi	r30, 0xAA	; 170
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	8c 93       	st	X, r24
    17de:	fe 01       	movw	r30, r28
    17e0:	ea 5a       	subi	r30, 0xAA	; 170
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	de 01       	movw	r26, r28
    17e6:	a4 5a       	subi	r26, 0xA4	; 164
    17e8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ea:	90 81       	ld	r25, Z
    17ec:	8c 91       	ld	r24, X
    17ee:	98 17       	cp	r25, r24
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <EEPROM_enuRestoreData+0x8aa>
    17f2:	52 cf       	rjmp	.-348    	; 0x1698 <EEPROM_enuRestoreData+0x74e>
		Local_u8ArrIndex++;

		_delay_ms(50);
	}

	Local_enuErrState=ES_OK;
    17f4:	fe 01       	movw	r30, r28
    17f6:	e3 5a       	subi	r30, 0xA3	; 163
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	80 83       	st	Z, r24

	return Local_enuErrState;
    17fe:	fe 01       	movw	r30, r28
    1800:	e3 5a       	subi	r30, 0xA3	; 163
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	80 81       	ld	r24, Z
}
    1806:	c1 5a       	subi	r28, 0xA1	; 161
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <EEPROM_enuAddAdmin>:

/*
 * add admin in system
 */
ES_t EEPROM_enuAddAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrAdmin)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	af 97       	sbiw	r28, 0x2f	; 47
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	9d a7       	std	Y+45, r25	; 0x2d
    1834:	8c a7       	std	Y+44, r24	; 0x2c
    1836:	7f a7       	std	Y+47, r23	; 0x2f
    1838:	6e a7       	std	Y+46, r22	; 0x2e
	ES_t Local_enuErrState=ES_NOK;
    183a:	1b a6       	std	Y+43, r1	; 0x2b

	if(Copy_pstrEEPROMHandler->AdminsCount < 20)
    183c:	ec a5       	ldd	r30, Y+44	; 0x2c
    183e:	fd a5       	ldd	r31, Y+45	; 0x2d
    1840:	80 a5       	ldd	r24, Z+40	; 0x28
    1842:	84 31       	cpi	r24, 0x14	; 20
    1844:	08 f0       	brcs	.+2      	; 0x1848 <EEPROM_enuAddAdmin+0x2a>
    1846:	9e c1       	rjmp	.+828    	; 0x1b84 <EEPROM_enuAddAdmin+0x366>
	{
		/*add the admin in the array*/
		Copy_pstrEEPROMHandler->AdminID[Copy_pstrEEPROMHandler->AdminsCount] = Copy_pstrAdmin->ID ;
    1848:	ec a5       	ldd	r30, Y+44	; 0x2c
    184a:	fd a5       	ldd	r31, Y+45	; 0x2d
    184c:	80 a5       	ldd	r24, Z+40	; 0x28
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	ee a5       	ldd	r30, Y+46	; 0x2e
    1854:	ff a5       	ldd	r31, Y+47	; 0x2f
    1856:	40 81       	ld	r20, Z
    1858:	8c a5       	ldd	r24, Y+44	; 0x2c
    185a:	9d a5       	ldd	r25, Y+45	; 0x2d
    185c:	fc 01       	movw	r30, r24
    185e:	e2 0f       	add	r30, r18
    1860:	f3 1f       	adc	r31, r19
    1862:	40 83       	st	Z, r20
		Copy_pstrEEPROMHandler->AdminPAS[Copy_pstrEEPROMHandler->AdminsCount] = Copy_pstrAdmin->Password ;
    1864:	ec a5       	ldd	r30, Y+44	; 0x2c
    1866:	fd a5       	ldd	r31, Y+45	; 0x2d
    1868:	80 a5       	ldd	r24, Z+40	; 0x28
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1870:	ff a5       	ldd	r31, Y+47	; 0x2f
    1872:	41 81       	ldd	r20, Z+1	; 0x01
    1874:	8c a5       	ldd	r24, Y+44	; 0x2c
    1876:	9d a5       	ldd	r25, Y+45	; 0x2d
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	fc 01       	movw	r30, r24
    187e:	74 96       	adiw	r30, 0x14	; 20
    1880:	40 83       	st	Z, r20

		/*add the admin in EEPROM*/
		EEPROM_enuWriteDataByte(Copy_pstrAdmin->ID, Copy_pstrEEPROMHandler->AdminsCount);
    1882:	ee a5       	ldd	r30, Y+46	; 0x2e
    1884:	ff a5       	ldd	r31, Y+47	; 0x2f
    1886:	90 81       	ld	r25, Z
    1888:	ec a5       	ldd	r30, Y+44	; 0x2c
    188a:	fd a5       	ldd	r31, Y+45	; 0x2d
    188c:	80 a5       	ldd	r24, Z+40	; 0x28
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	89 2f       	mov	r24, r25
    1894:	b9 01       	movw	r22, r18
    1896:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a8 e4       	ldi	r26, 0x48	; 72
    18a0:	b2 e4       	ldi	r27, 0x42	; 66
    18a2:	8f a3       	std	Y+39, r24	; 0x27
    18a4:	98 a7       	std	Y+40, r25	; 0x28
    18a6:	a9 a7       	std	Y+41, r26	; 0x29
    18a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	6f a1       	ldd	r22, Y+39	; 0x27
    18ac:	78 a5       	ldd	r23, Y+40	; 0x28
    18ae:	89 a5       	ldd	r24, Y+41	; 0x29
    18b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a e7       	ldi	r20, 0x7A	; 122
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8b a3       	std	Y+35, r24	; 0x23
    18c4:	9c a3       	std	Y+36, r25	; 0x24
    18c6:	ad a3       	std	Y+37, r26	; 0x25
    18c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ca:	6b a1       	ldd	r22, Y+35	; 0x23
    18cc:	7c a1       	ldd	r23, Y+36	; 0x24
    18ce:	8d a1       	ldd	r24, Y+37	; 0x25
    18d0:	9e a1       	ldd	r25, Y+38	; 0x26
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <EEPROM_enuAddAdmin+0xce>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9a a3       	std	Y+34, r25	; 0x22
    18e8:	89 a3       	std	Y+33, r24	; 0x21
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <EEPROM_enuAddAdmin+0x14c>
	else if (__tmp > 65535)
    18ec:	6b a1       	ldd	r22, Y+35	; 0x23
    18ee:	7c a1       	ldd	r23, Y+36	; 0x24
    18f0:	8d a1       	ldd	r24, Y+37	; 0x25
    18f2:	9e a1       	ldd	r25, Y+38	; 0x26
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <EEPROM_enuAddAdmin+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	6f a1       	ldd	r22, Y+39	; 0x27
    1906:	78 a5       	ldd	r23, Y+40	; 0x28
    1908:	89 a5       	ldd	r24, Y+41	; 0x29
    190a:	9a a5       	ldd	r25, Y+42	; 0x2a
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9a a3       	std	Y+34, r25	; 0x22
    192a:	89 a3       	std	Y+33, r24	; 0x21
    192c:	0f c0       	rjmp	.+30     	; 0x194c <EEPROM_enuAddAdmin+0x12e>
    192e:	89 e1       	ldi	r24, 0x19	; 25
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	98 a3       	std	Y+32, r25	; 0x20
    1934:	8f 8f       	std	Y+31, r24	; 0x1f
    1936:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1938:	98 a1       	ldd	r25, Y+32	; 0x20
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <EEPROM_enuAddAdmin+0x11c>
    193e:	98 a3       	std	Y+32, r25	; 0x20
    1940:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	89 a1       	ldd	r24, Y+33	; 0x21
    1944:	9a a1       	ldd	r25, Y+34	; 0x22
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9a a3       	std	Y+34, r25	; 0x22
    194a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	89 a1       	ldd	r24, Y+33	; 0x21
    194e:	9a a1       	ldd	r25, Y+34	; 0x22
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <EEPROM_enuAddAdmin+0x110>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <EEPROM_enuAddAdmin+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	6b a1       	ldd	r22, Y+35	; 0x23
    1958:	7c a1       	ldd	r23, Y+36	; 0x24
    195a:	8d a1       	ldd	r24, Y+37	; 0x25
    195c:	9e a1       	ldd	r25, Y+38	; 0x26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9a a3       	std	Y+34, r25	; 0x22
    1968:	89 a3       	std	Y+33, r24	; 0x21
    196a:	89 a1       	ldd	r24, Y+33	; 0x21
    196c:	9a a1       	ldd	r25, Y+34	; 0x22
    196e:	9e 8f       	std	Y+30, r25	; 0x1e
    1970:	8d 8f       	std	Y+29, r24	; 0x1d
    1972:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1974:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <EEPROM_enuAddAdmin+0x158>
    197a:	9e 8f       	std	Y+30, r25	; 0x1e
    197c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		EEPROM_enuWriteDataByte(Copy_pstrAdmin->Password, Copy_pstrEEPROMHandler->AdminsCount+20);
    197e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1980:	ff a5       	ldd	r31, Y+47	; 0x2f
    1982:	41 81       	ldd	r20, Z+1	; 0x01
    1984:	ec a5       	ldd	r30, Y+44	; 0x2c
    1986:	fd a5       	ldd	r31, Y+45	; 0x2d
    1988:	80 a5       	ldd	r24, Z+40	; 0x28
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	44 96       	adiw	r24, 0x14	; 20
    1990:	9c 01       	movw	r18, r24
    1992:	84 2f       	mov	r24, r20
    1994:	b9 01       	movw	r22, r18
    1996:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a8 e4       	ldi	r26, 0x48	; 72
    19a0:	b2 e4       	ldi	r27, 0x42	; 66
    19a2:	89 8f       	std	Y+25, r24	; 0x19
    19a4:	9a 8f       	std	Y+26, r25	; 0x1a
    19a6:	ab 8f       	std	Y+27, r26	; 0x1b
    19a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	69 8d       	ldd	r22, Y+25	; 0x19
    19ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a e7       	ldi	r20, 0x7A	; 122
    19b8:	53 e4       	ldi	r21, 0x43	; 67
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8d 8b       	std	Y+21, r24	; 0x15
    19c4:	9e 8b       	std	Y+22, r25	; 0x16
    19c6:	af 8b       	std	Y+23, r26	; 0x17
    19c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ca:	6d 89       	ldd	r22, Y+21	; 0x15
    19cc:	7e 89       	ldd	r23, Y+22	; 0x16
    19ce:	8f 89       	ldd	r24, Y+23	; 0x17
    19d0:	98 8d       	ldd	r25, Y+24	; 0x18
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <EEPROM_enuAddAdmin+0x1ce>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <EEPROM_enuAddAdmin+0x24c>
	else if (__tmp > 65535)
    19ec:	6d 89       	ldd	r22, Y+21	; 0x15
    19ee:	7e 89       	ldd	r23, Y+22	; 0x16
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <EEPROM_enuAddAdmin+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	69 8d       	ldd	r22, Y+25	; 0x19
    1a06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <EEPROM_enuAddAdmin+0x22e>
    1a2e:	89 e1       	ldi	r24, 0x19	; 25
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9a 8b       	std	Y+18, r25	; 0x12
    1a34:	89 8b       	std	Y+17, r24	; 0x11
    1a36:	89 89       	ldd	r24, Y+17	; 0x11
    1a38:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <EEPROM_enuAddAdmin+0x21c>
    1a3e:	9a 8b       	std	Y+18, r25	; 0x12
    1a40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8b 89       	ldd	r24, Y+19	; 0x13
    1a44:	9c 89       	ldd	r25, Y+20	; 0x14
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <EEPROM_enuAddAdmin+0x210>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <EEPROM_enuAddAdmin+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6d 89       	ldd	r22, Y+21	; 0x15
    1a58:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	98 8b       	std	Y+16, r25	; 0x10
    1a70:	8f 87       	std	Y+15, r24	; 0x0f
    1a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a74:	98 89       	ldd	r25, Y+16	; 0x10
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <EEPROM_enuAddAdmin+0x258>
    1a7a:	98 8b       	std	Y+16, r25	; 0x10
    1a7c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		/*save the number of admins*/
		Copy_pstrEEPROMHandler->AdminsCount++;
    1a7e:	ec a5       	ldd	r30, Y+44	; 0x2c
    1a80:	fd a5       	ldd	r31, Y+45	; 0x2d
    1a82:	80 a5       	ldd	r24, Z+40	; 0x28
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	ec a5       	ldd	r30, Y+44	; 0x2c
    1a88:	fd a5       	ldd	r31, Y+45	; 0x2d
    1a8a:	80 a7       	std	Z+40, r24	; 0x28
		EEPROM_enuWriteDataByte(Copy_pstrEEPROMHandler->AdminsCount, 90);
    1a8c:	ec a5       	ldd	r30, Y+44	; 0x2c
    1a8e:	fd a5       	ldd	r31, Y+45	; 0x2d
    1a90:	80 a5       	ldd	r24, Z+40	; 0x28
    1a92:	6a e5       	ldi	r22, 0x5A	; 90
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a8 e4       	ldi	r26, 0x48	; 72
    1aa0:	b2 e4       	ldi	r27, 0x42	; 66
    1aa2:	8b 87       	std	Y+11, r24	; 0x0b
    1aa4:	9c 87       	std	Y+12, r25	; 0x0c
    1aa6:	ad 87       	std	Y+13, r26	; 0x0d
    1aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a e7       	ldi	r20, 0x7A	; 122
    1ab8:	53 e4       	ldi	r21, 0x43	; 67
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8f 83       	std	Y+7, r24	; 0x07
    1ac4:	98 87       	std	Y+8, r25	; 0x08
    1ac6:	a9 87       	std	Y+9, r26	; 0x09
    1ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <EEPROM_enuAddAdmin+0x2ce>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <EEPROM_enuAddAdmin+0x34c>
	else if (__tmp > 65535)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <EEPROM_enuAddAdmin+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <EEPROM_enuAddAdmin+0x32e>
    1b2e:	89 e1       	ldi	r24, 0x19	; 25
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <EEPROM_enuAddAdmin+0x31c>
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <EEPROM_enuAddAdmin+0x310>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <EEPROM_enuAddAdmin+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <EEPROM_enuAddAdmin+0x358>
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_enuErrState=ES_OK;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <EEPROM_enuAddAdmin+0x368>
	}
	else
	{
		/*the system has max number admins */
		Local_enuErrState=ES_NOK;
    1b84:	1b a6       	std	Y+43, r1	; 0x2b
	}

	return Local_enuErrState;
    1b86:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1b88:	af 96       	adiw	r28, 0x2f	; 47
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <EEPROM_enuAddUser>:

/*
 * add user in system
 */
ES_t EEPROM_enuAddUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrUser)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	af 97       	sbiw	r28, 0x2f	; 47
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	9d a7       	std	Y+45, r25	; 0x2d
    1bb0:	8c a7       	std	Y+44, r24	; 0x2c
    1bb2:	7f a7       	std	Y+47, r23	; 0x2f
    1bb4:	6e a7       	std	Y+46, r22	; 0x2e
	ES_t Local_enuErrState=ES_NOK;
    1bb6:	1b a6       	std	Y+43, r1	; 0x2b
	if(Copy_pstrEEPROMHandler->AdminsCount < 20)
    1bb8:	ec a5       	ldd	r30, Y+44	; 0x2c
    1bba:	fd a5       	ldd	r31, Y+45	; 0x2d
    1bbc:	80 a5       	ldd	r24, Z+40	; 0x28
    1bbe:	84 31       	cpi	r24, 0x14	; 20
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <EEPROM_enuAddUser+0x2a>
    1bc2:	b7 c1       	rjmp	.+878    	; 0x1f32 <EEPROM_enuAddUser+0x398>
	{
		/*add the admin in the array*/
		Copy_pstrEEPROMHandler->UserID[Copy_pstrEEPROMHandler->UsersCount] = Copy_pstrUser->ID ;
    1bc4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bc6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bc8:	fc 01       	movw	r30, r24
    1bca:	ef 5a       	subi	r30, 0xAF	; 175
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	ee a5       	ldd	r30, Y+46	; 0x2e
    1bd6:	ff a5       	ldd	r31, Y+47	; 0x2f
    1bd8:	40 81       	ld	r20, Z
    1bda:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bdc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bde:	82 0f       	add	r24, r18
    1be0:	93 1f       	adc	r25, r19
    1be2:	fc 01       	movw	r30, r24
    1be4:	b9 96       	adiw	r30, 0x29	; 41
    1be6:	40 83       	st	Z, r20
		Copy_pstrEEPROMHandler->UserPAS[Copy_pstrEEPROMHandler->UsersCount] = Copy_pstrUser->Password ;
    1be8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bea:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bec:	fc 01       	movw	r30, r24
    1bee:	ef 5a       	subi	r30, 0xAF	; 175
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	ee a5       	ldd	r30, Y+46	; 0x2e
    1bfa:	ff a5       	ldd	r31, Y+47	; 0x2f
    1bfc:	41 81       	ldd	r20, Z+1	; 0x01
    1bfe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c00:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c02:	82 0f       	add	r24, r18
    1c04:	93 1f       	adc	r25, r19
    1c06:	fc 01       	movw	r30, r24
    1c08:	fd 96       	adiw	r30, 0x3d	; 61
    1c0a:	40 83       	st	Z, r20

		/*add the admin in EEPROM*/
		EEPROM_enuWriteDataByte(Copy_pstrUser->ID, Copy_pstrEEPROMHandler->UsersCount + 40);
    1c0c:	ee a5       	ldd	r30, Y+46	; 0x2e
    1c0e:	ff a5       	ldd	r31, Y+47	; 0x2f
    1c10:	40 81       	ld	r20, Z
    1c12:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c14:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c16:	fc 01       	movw	r30, r24
    1c18:	ef 5a       	subi	r30, 0xAF	; 175
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	88 96       	adiw	r24, 0x28	; 40
    1c24:	9c 01       	movw	r18, r24
    1c26:	84 2f       	mov	r24, r20
    1c28:	b9 01       	movw	r22, r18
    1c2a:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a8 e4       	ldi	r26, 0x48	; 72
    1c34:	b2 e4       	ldi	r27, 0x42	; 66
    1c36:	8f a3       	std	Y+39, r24	; 0x27
    1c38:	98 a7       	std	Y+40, r25	; 0x28
    1c3a:	a9 a7       	std	Y+41, r26	; 0x29
    1c3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c40:	78 a5       	ldd	r23, Y+40	; 0x28
    1c42:	89 a5       	ldd	r24, Y+41	; 0x29
    1c44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a e7       	ldi	r20, 0x7A	; 122
    1c4c:	53 e4       	ldi	r21, 0x43	; 67
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	8b a3       	std	Y+35, r24	; 0x23
    1c58:	9c a3       	std	Y+36, r25	; 0x24
    1c5a:	ad a3       	std	Y+37, r26	; 0x25
    1c5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c60:	7c a1       	ldd	r23, Y+36	; 0x24
    1c62:	8d a1       	ldd	r24, Y+37	; 0x25
    1c64:	9e a1       	ldd	r25, Y+38	; 0x26
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e8       	ldi	r20, 0x80	; 128
    1c6c:	5f e3       	ldi	r21, 0x3F	; 63
    1c6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <EEPROM_enuAddUser+0xe6>
		__ticks = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9a a3       	std	Y+34, r25	; 0x22
    1c7c:	89 a3       	std	Y+33, r24	; 0x21
    1c7e:	3f c0       	rjmp	.+126    	; 0x1cfe <EEPROM_enuAddUser+0x164>
	else if (__tmp > 65535)
    1c80:	6b a1       	ldd	r22, Y+35	; 0x23
    1c82:	7c a1       	ldd	r23, Y+36	; 0x24
    1c84:	8d a1       	ldd	r24, Y+37	; 0x25
    1c86:	9e a1       	ldd	r25, Y+38	; 0x26
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	4c f5       	brge	.+82     	; 0x1cea <EEPROM_enuAddUser+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9a a3       	std	Y+34, r25	; 0x22
    1cbe:	89 a3       	std	Y+33, r24	; 0x21
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <EEPROM_enuAddUser+0x146>
    1cc2:	89 e1       	ldi	r24, 0x19	; 25
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	98 a3       	std	Y+32, r25	; 0x20
    1cc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1cca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ccc:	98 a1       	ldd	r25, Y+32	; 0x20
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <EEPROM_enuAddUser+0x134>
    1cd2:	98 a3       	std	Y+32, r25	; 0x20
    1cd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	9a a3       	std	Y+34, r25	; 0x22
    1cde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	69 f7       	brne	.-38     	; 0x1cc2 <EEPROM_enuAddUser+0x128>
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <EEPROM_enuAddUser+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cea:	6b a1       	ldd	r22, Y+35	; 0x23
    1cec:	7c a1       	ldd	r23, Y+36	; 0x24
    1cee:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9a a3       	std	Y+34, r25	; 0x22
    1cfc:	89 a3       	std	Y+33, r24	; 0x21
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	9e 8f       	std	Y+30, r25	; 0x1e
    1d04:	8d 8f       	std	Y+29, r24	; 0x1d
    1d06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <EEPROM_enuAddUser+0x170>
    1d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d10:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		EEPROM_enuWriteDataByte(Copy_pstrUser->Password, Copy_pstrEEPROMHandler->UsersCount +60);
    1d12:	ee a5       	ldd	r30, Y+46	; 0x2e
    1d14:	ff a5       	ldd	r31, Y+47	; 0x2f
    1d16:	41 81       	ldd	r20, Z+1	; 0x01
    1d18:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	ef 5a       	subi	r30, 0xAF	; 175
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	cc 96       	adiw	r24, 0x3c	; 60
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	84 2f       	mov	r24, r20
    1d2e:	b9 01       	movw	r22, r18
    1d30:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a8 e4       	ldi	r26, 0x48	; 72
    1d3a:	b2 e4       	ldi	r27, 0x42	; 66
    1d3c:	89 8f       	std	Y+25, r24	; 0x19
    1d3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d40:	ab 8f       	std	Y+27, r26	; 0x1b
    1d42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	69 8d       	ldd	r22, Y+25	; 0x19
    1d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a e7       	ldi	r20, 0x7A	; 122
    1d52:	53 e4       	ldi	r21, 0x43	; 67
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8d 8b       	std	Y+21, r24	; 0x15
    1d5e:	9e 8b       	std	Y+22, r25	; 0x16
    1d60:	af 8b       	std	Y+23, r26	; 0x17
    1d62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d64:	6d 89       	ldd	r22, Y+21	; 0x15
    1d66:	7e 89       	ldd	r23, Y+22	; 0x16
    1d68:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <EEPROM_enuAddUser+0x1ec>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <EEPROM_enuAddUser+0x26a>
	else if (__tmp > 65535)
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <EEPROM_enuAddUser+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e2       	ldi	r20, 0x20	; 32
    1dac:	51 e4       	ldi	r21, 0x41	; 65
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <EEPROM_enuAddUser+0x24c>
    1dc8:	89 e1       	ldi	r24, 0x19	; 25
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9a 8b       	std	Y+18, r25	; 0x12
    1dce:	89 8b       	std	Y+17, r24	; 0x11
    1dd0:	89 89       	ldd	r24, Y+17	; 0x11
    1dd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <EEPROM_enuAddUser+0x23a>
    1dd8:	9a 8b       	std	Y+18, r25	; 0x12
    1dda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dde:	9c 89       	ldd	r25, Y+20	; 0x14
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9c 8b       	std	Y+20, r25	; 0x14
    1de4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	8b 89       	ldd	r24, Y+19	; 0x13
    1de8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <EEPROM_enuAddUser+0x22e>
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <EEPROM_enuAddUser+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	6d 89       	ldd	r22, Y+21	; 0x15
    1df2:	7e 89       	ldd	r23, Y+22	; 0x16
    1df4:	8f 89       	ldd	r24, Y+23	; 0x17
    1df6:	98 8d       	ldd	r25, Y+24	; 0x18
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	9c 89       	ldd	r25, Y+20	; 0x14
    1e08:	98 8b       	std	Y+16, r25	; 0x10
    1e0a:	8f 87       	std	Y+15, r24	; 0x0f
    1e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e0e:	98 89       	ldd	r25, Y+16	; 0x10
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <EEPROM_enuAddUser+0x276>
    1e14:	98 8b       	std	Y+16, r25	; 0x10
    1e16:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		/*save the number of admins*/
		Copy_pstrEEPROMHandler->UsersCount++;
    1e18:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	ef 5a       	subi	r30, 0xAF	; 175
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	28 2f       	mov	r18, r24
    1e26:	2f 5f       	subi	r18, 0xFF	; 255
    1e28:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e2a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	ef 5a       	subi	r30, 0xAF	; 175
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	20 83       	st	Z, r18
		EEPROM_enuWriteDataByte(Copy_pstrEEPROMHandler->UsersCount, 95);
    1e34:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e36:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e38:	fc 01       	movw	r30, r24
    1e3a:	ef 5a       	subi	r30, 0xAF	; 175
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	6f e5       	ldi	r22, 0x5F	; 95
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a8 e4       	ldi	r26, 0x48	; 72
    1e4e:	b2 e4       	ldi	r27, 0x42	; 66
    1e50:	8b 87       	std	Y+11, r24	; 0x0b
    1e52:	9c 87       	std	Y+12, r25	; 0x0c
    1e54:	ad 87       	std	Y+13, r26	; 0x0d
    1e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	53 e4       	ldi	r21, 0x43	; 67
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8f 83       	std	Y+7, r24	; 0x07
    1e72:	98 87       	std	Y+8, r25	; 0x08
    1e74:	a9 87       	std	Y+9, r26	; 0x09
    1e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <EEPROM_enuAddUser+0x300>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <EEPROM_enuAddUser+0x37e>
	else if (__tmp > 65535)
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <EEPROM_enuAddUser+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <EEPROM_enuAddUser+0x360>
    1edc:	89 e1       	ldi	r24, 0x19	; 25
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <EEPROM_enuAddUser+0x34e>
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <EEPROM_enuAddUser+0x342>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <EEPROM_enuAddUser+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <EEPROM_enuAddUser+0x38a>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_enuErrState=ES_OK;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	8b a7       	std	Y+43, r24	; 0x2b
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <EEPROM_enuAddUser+0x39a>
	}
	else
	{
		/*the system has max number admins */
		Local_enuErrState=ES_NOK;
    1f32:	1b a6       	std	Y+43, r1	; 0x2b
	}

	return Local_enuErrState;
    1f34:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1f36:	af 96       	adiw	r28, 0x2f	; 47
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <EEPROM_enuRemoveAdmin>:

/*
 * remove admin in system
 */
ES_t EEPROM_enuRemoveAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrAdmin)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <EEPROM_enuRemoveAdmin+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <EEPROM_enuRemoveAdmin+0x8>
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	9b 83       	std	Y+3, r25	; 0x03
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	7d 83       	std	Y+5, r23	; 0x05
    1f5c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrState=ES_NOK;
    1f5e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrState;
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <EEPROM_enuRemoveUser>:

/*
 * remove user in system
 */
ES_t EEPROM_enuRemoveUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrUser)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <EEPROM_enuRemoveUser+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <EEPROM_enuRemoveUser+0x8>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	9b 83       	std	Y+3, r25	; 0x03
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    1f84:	7d 83       	std	Y+5, r23	; 0x05
    1f86:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrState=ES_NOK;
    1f88:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrState;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <Timer0_enuInit>:
void (*TIMER0_OVF_CallBack)(void)= NULL;
void (*TIMER0_CTC_CallBack)(void)= NULL;


ES_t Timer0_enuInit()
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_PRESCALER==TIMER0_STOP

#elif TIMER0_PRESCALER==TIMER0_SCALER_1
	TCCR0|=(masking_bit<<CS00);
#elif TIMER0_PRESCALER==TIMER0_SCALER_8
	TCCR0|=(masking_bit<<CS01);
    1fa4:	a3 e5       	ldi	r26, 0x53	; 83
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e3 e5       	ldi	r30, 0x53	; 83
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	82 60       	ori	r24, 0x02	; 2
    1fb0:	8c 93       	st	X, r24
#else
	#error"Attention!!, OC0_PIN state is wrong or the mode is not CTC...."
	#endif

#endif
	return ES_OK;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <Timer0_enuSetPreload>:

ES_t Timer0_enuSetPreload(u8 copy_u8preload)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <Timer0_enuSetPreload+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_VOIDPRELOAD(copy_u8preload);
    1fc6:	e2 e5       	ldi	r30, 0x52	; 82
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 83       	st	Z, r24
	//return ES_OK;
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <Timer0_enuSetCTC_Value>:


ES_t Timer0_enuSetCTC_Value(u8 Copy_u8CTC_Value)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <Timer0_enuSetCTC_Value+0x6>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_VOIDSETCTC(Copy_u8CTC_Value);
    1fe4:	ec e5       	ldi	r30, 0x5C	; 92
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	80 83       	st	Z, r24
	//return ES_OK;
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <Timer0_enuAsysncDelay>:




ES_t Timer0_enuAsysncDelay(int copy_ms)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	2d 97       	sbiw	r28, 0x0d	; 13
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	9c 87       	std	Y+12, r25	; 0x0c
    200c:	8b 87       	std	Y+11, r24	; 0x0b
	if(TIMER0_MODE==TIMER0_Normal)
	{
		//(TIMER0_PRESCALER==TIMER0_SCALER_1||TIMER0_PRESCALER==TIMER0_SCALER_8)&&
	    float local_ovf_t= (float)TIMER0_OVF_COUNTS * ((float)TIMER0_PRESCALER/TIMER0_F_CPU);
    200e:	8f e6       	ldi	r24, 0x6F	; 111
    2010:	92 e1       	ldi	r25, 0x12	; 18
    2012:	a3 e0       	ldi	r26, 0x03	; 3
    2014:	bf e3       	ldi	r27, 0x3F	; 63
    2016:	8f 83       	std	Y+7, r24	; 0x07
    2018:	98 87       	std	Y+8, r25	; 0x08
    201a:	a9 87       	std	Y+9, r26	; 0x09
    201c:	ba 87       	std	Y+10, r27	; 0x0a
		float local_ovf_num= copy_ms/local_ovf_t;
    201e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2020:	9c 85       	ldd	r25, Y+12	; 0x0c
    2022:	aa 27       	eor	r26, r26
    2024:	97 fd       	sbrc	r25, 7
    2026:	a0 95       	com	r26
    2028:	ba 2f       	mov	r27, r26
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	2f 81       	ldd	r18, Y+7	; 0x07
    203c:	38 85       	ldd	r19, Y+8	; 0x08
    203e:	49 85       	ldd	r20, Y+9	; 0x09
    2040:	5a 85       	ldd	r21, Y+10	; 0x0a
    2042:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	ad 83       	std	Y+5, r26	; 0x05
    2050:	be 83       	std	Y+6, r27	; 0x06
		u8_OVF_num=(int)local_ovf_num;
    2052:	6b 81       	ldd	r22, Y+3	; 0x03
    2054:	7c 81       	ldd	r23, Y+4	; 0x04
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	80 93 f4 01 	sts	0x01F4, r24
		if(local_ovf_num-(int)local_ovf_num!=0.0)
    2066:	6b 81       	ldd	r22, Y+3	; 0x03
    2068:	7c 81       	ldd	r23, Y+4	; 0x04
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	aa 27       	eor	r26, r26
    2078:	97 fd       	sbrc	r25, 7
    207a:	a0 95       	com	r26
    207c:	ba 2f       	mov	r27, r26
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	6b 81       	ldd	r22, Y+3	; 0x03
    208c:	7c 81       	ldd	r23, Y+4	; 0x04
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    20aa:	88 23       	and	r24, r24
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <Timer0_enuAsysncDelay+0xba>
    20ae:	56 c0       	rjmp	.+172    	; 0x215c <Timer0_enuAsysncDelay+0x166>
		{
			//int int_ovf_num=(int)ovf_num+1;
			int preload=TIMER0_OVF_COUNTS-((local_ovf_num-(int)local_ovf_num)*256);
    20b0:	6b 81       	ldd	r22, Y+3	; 0x03
    20b2:	7c 81       	ldd	r23, Y+4	; 0x04
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	aa 27       	eor	r26, r26
    20c2:	97 fd       	sbrc	r25, 7
    20c4:	a0 95       	com	r26
    20c6:	ba 2f       	mov	r27, r26
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    20d0:	9b 01       	movw	r18, r22
    20d2:	ac 01       	movw	r20, r24
    20d4:	6b 81       	ldd	r22, Y+3	; 0x03
    20d6:	7c 81       	ldd	r23, Y+4	; 0x04
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	53 ec       	ldi	r21, 0xC3	; 195
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	53 e4       	ldi	r21, 0x43	; 67
    2104:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
			u8_OVF_num=ceil(local_ovf_num)+1;
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	ad 81       	ldd	r26, Y+5	; 0x05
    2122:	be 81       	ldd	r27, Y+6	; 0x06
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <ceil>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	80 93 f4 01 	sts	0x01F4, r24
			TIMER0_VIOD_SET_PRELOAD(preload);
    2154:	e2 e5       	ldi	r30, 0x52	; 82
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	80 83       	st	Z, r24
		#warning "To take high accuracy on Delay function, Choose OVF mode and one or eight prescaler";\
		 "OR CTC mode , 64 prescaler and OCR0 = 124"
	}


}
    215c:	2d 96       	adiw	r28, 0x0d	; 13
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <TIMER0_enuGeneratePWM>:


ES_t TIMER0_enuGeneratePWM(int Copy_u8DutyCycle)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <TIMER0_enuGeneratePWM+0x6>
    2174:	0f 92       	push	r0
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
#else
	//#error"Attention!!, OC0_PIN state is wrong or the mode is not Fast PWM...."
	#endif
}

}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <Timer0_enuSyncDlay>:

//

ES_t Timer0_enuSyncDlay(int copy_ms)
{
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	61 97       	sbiw	r28, 0x11	; 17
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
	    float ttick=TIMER0_PRESCALER/TIMER0_F_CPU;
    21aa:	8f e6       	ldi	r24, 0x6F	; 111
    21ac:	92 e1       	ldi	r25, 0x12	; 18
    21ae:	a3 e0       	ldi	r26, 0x03	; 3
    21b0:	bb e3       	ldi	r27, 0x3B	; 59
    21b2:	8b 87       	std	Y+11, r24	; 0x0b
    21b4:	9c 87       	std	Y+12, r25	; 0x0c
    21b6:	ad 87       	std	Y+13, r26	; 0x0d
    21b8:	be 87       	std	Y+14, r27	; 0x0e
		float tmaxdelay=TIMER0_OVF_COUNTS*ttick;  //ovf real time
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	53 e4       	ldi	r21, 0x43	; 67
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8f 83       	std	Y+7, r24	; 0x07
    21d4:	98 87       	std	Y+8, r25	; 0x08
    21d6:	a9 87       	std	Y+9, r26	; 0x09
    21d8:	ba 87       	std	Y+10, r27	; 0x0a
		char nof,preload;
		if(copy_ms<tmaxdelay)
    21da:	8f 85       	ldd	r24, Y+15	; 0x0f
    21dc:	98 89       	ldd	r25, Y+16	; 0x10
    21de:	aa 27       	eor	r26, r26
    21e0:	97 fd       	sbrc	r25, 7
    21e2:	a0 95       	com	r26
    21e4:	ba 2f       	mov	r27, r26
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	2f 81       	ldd	r18, Y+7	; 0x07
    21f8:	38 85       	ldd	r19, Y+8	; 0x08
    21fa:	49 85       	ldd	r20, Y+9	; 0x09
    21fc:	5a 85       	ldd	r21, Y+10	; 0x0a
    21fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	a4 f5       	brge	.+104    	; 0x226e <Timer0_enuSyncDlay+0xe4>
		{
			nof=1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	8e 83       	std	Y+6, r24	; 0x06
			preload=TIMER0_OVF_COUNTS-(((float)copy_ms/tmaxdelay)*(float)TIMER0_OVF_COUNTS);//(tmaxdelay-copy_ms)/ttick;
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	98 89       	ldd	r25, Y+16	; 0x10
    220e:	aa 27       	eor	r26, r26
    2210:	97 fd       	sbrc	r25, 7
    2212:	a0 95       	com	r26
    2214:	ba 2f       	mov	r27, r26
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	2f 81       	ldd	r18, Y+7	; 0x07
    2228:	38 85       	ldd	r19, Y+8	; 0x08
    222a:	49 85       	ldd	r20, Y+9	; 0x09
    222c:	5a 85       	ldd	r21, Y+10	; 0x0a
    222e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	53 ec       	ldi	r21, 0xC3	; 195
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	9c c0       	rjmp	.+312    	; 0x23a6 <Timer0_enuSyncDlay+0x21c>
		}
		else if(copy_ms==(int)tmaxdelay)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9c 01       	movw	r18, r24
    2280:	8f 85       	ldd	r24, Y+15	; 0x0f
    2282:	98 89       	ldd	r25, Y+16	; 0x10
    2284:	28 17       	cp	r18, r24
    2286:	39 07       	cpc	r19, r25
    2288:	21 f4       	brne	.+8      	; 0x2292 <Timer0_enuSyncDlay+0x108>
		{
			nof=1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	8e 83       	std	Y+6, r24	; 0x06
			preload=0;
    228e:	1d 82       	std	Y+5, r1	; 0x05
    2290:	8a c0       	rjmp	.+276    	; 0x23a6 <Timer0_enuSyncDlay+0x21c>
		}
		else
		{
			nof=ceil((float)copy_ms/tmaxdelay);
    2292:	8f 85       	ldd	r24, Y+15	; 0x0f
    2294:	98 89       	ldd	r25, Y+16	; 0x10
    2296:	aa 27       	eor	r26, r26
    2298:	97 fd       	sbrc	r25, 7
    229a:	a0 95       	com	r26
    229c:	ba 2f       	mov	r27, r26
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	2f 81       	ldd	r18, Y+7	; 0x07
    22b0:	38 85       	ldd	r19, Y+8	; 0x08
    22b2:	49 85       	ldd	r20, Y+9	; 0x09
    22b4:	5a 85       	ldd	r21, Y+10	; 0x0a
    22b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <ceil>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8e 83       	std	Y+6, r24	; 0x06
			float fraction =((float)copy_ms/tmaxdelay)-((int)(float)copy_ms/tmaxdelay);
    22d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22da:	98 89       	ldd	r25, Y+16	; 0x10
    22dc:	aa 27       	eor	r26, r26
    22de:	97 fd       	sbrc	r25, 7
    22e0:	a0 95       	com	r26
    22e2:	ba 2f       	mov	r27, r26
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	2f 81       	ldd	r18, Y+7	; 0x07
    22f6:	38 85       	ldd	r19, Y+8	; 0x08
    22f8:	49 85       	ldd	r20, Y+9	; 0x09
    22fa:	5a 85       	ldd	r21, Y+10	; 0x0a
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	7c 01       	movw	r14, r24
    2306:	8d 01       	movw	r16, r26
    2308:	8f 85       	ldd	r24, Y+15	; 0x0f
    230a:	98 89       	ldd	r25, Y+16	; 0x10
    230c:	aa 27       	eor	r26, r26
    230e:	97 fd       	sbrc	r25, 7
    2310:	a0 95       	com	r26
    2312:	ba 2f       	mov	r27, r26
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	aa 27       	eor	r26, r26
    232e:	97 fd       	sbrc	r25, 7
    2330:	a0 95       	com	r26
    2332:	ba 2f       	mov	r27, r26
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	2f 81       	ldd	r18, Y+7	; 0x07
    2346:	38 85       	ldd	r19, Y+8	; 0x08
    2348:	49 85       	ldd	r20, Y+9	; 0x09
    234a:	5a 85       	ldd	r21, Y+10	; 0x0a
    234c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9c 01       	movw	r18, r24
    2356:	ad 01       	movw	r20, r26
    2358:	c8 01       	movw	r24, r16
    235a:	b7 01       	movw	r22, r14
    235c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	ab 83       	std	Y+3, r26	; 0x03
    236a:	bc 83       	std	Y+4, r27	; 0x04
			preload=TIMER0_OVF_COUNTS-(fraction*(float)TIMER0_OVF_COUNTS);
    236c:	69 81       	ldd	r22, Y+1	; 0x01
    236e:	7a 81       	ldd	r23, Y+2	; 0x02
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	53 ec       	ldi	r21, 0xC3	; 195
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	53 e4       	ldi	r21, 0x43	; 67
    2390:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8d 83       	std	Y+5, r24	; 0x05
					//TIMER0_OVF_COUNTS-(copy_ms/ttick)/nof;
		}
		TIMER0_VIOD_SET_PRELOAD(0);
    23a6:	e2 e5       	ldi	r30, 0x52	; 82
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	10 82       	st	Z, r1
		TIMER0_VIOD_SET_PRELOAD(preload);
    23ac:	e2 e5       	ldi	r30, 0x52	; 82
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
    23b2:	80 83       	st	Z, r24
    23b4:	13 c0       	rjmp	.+38     	; 0x23dc <Timer0_enuSyncDlay+0x252>
		while(nof>0)
		{
			while(((TIFR>>0)&1)==0);
    23b6:	e8 e5       	ldi	r30, 0x58	; 88
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	81 70       	andi	r24, 0x01	; 1
    23c2:	90 70       	andi	r25, 0x00	; 0
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	b9 f3       	breq	.-18     	; 0x23b6 <Timer0_enuSyncDlay+0x22c>
			nof--;
    23c8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ca:	81 50       	subi	r24, 0x01	; 1
    23cc:	8e 83       	std	Y+6, r24	; 0x06
			TIFR|=(1<<0);
    23ce:	a8 e5       	ldi	r26, 0x58	; 88
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e8 e5       	ldi	r30, 0x58	; 88
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	81 60       	ori	r24, 0x01	; 1
    23da:	8c 93       	st	X, r24
			preload=TIMER0_OVF_COUNTS-(fraction*(float)TIMER0_OVF_COUNTS);
					//TIMER0_OVF_COUNTS-(copy_ms/ttick)/nof;
		}
		TIMER0_VIOD_SET_PRELOAD(0);
		TIMER0_VIOD_SET_PRELOAD(preload);
		while(nof>0)
    23dc:	8e 81       	ldd	r24, Y+6	; 0x06
    23de:	88 23       	and	r24, r24
    23e0:	51 f7       	brne	.-44     	; 0x23b6 <Timer0_enuSyncDlay+0x22c>
		{
			while(((TIFR>>0)&1)==0);
			nof--;
			TIFR|=(1<<0);
		}
}
    23e2:	61 96       	adiw	r28, 0x11	; 17
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	08 95       	ret

000023fc <TIMER0_voidEnableCTC_Interrupt>:

void TIMER0_voidEnableCTC_Interrupt(void)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	TIMSK|=(masking_bit<<OCIE0);
    2404:	a9 e5       	ldi	r26, 0x59	; 89
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e9 e5       	ldi	r30, 0x59	; 89
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	82 60       	ori	r24, 0x02	; 2
    2410:	8c 93       	st	X, r24
	TIMSK&=~(masking_bit<<TOIE0);
    2412:	a9 e5       	ldi	r26, 0x59	; 89
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e9 e5       	ldi	r30, 0x59	; 89
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8e 7f       	andi	r24, 0xFE	; 254
    241e:	8c 93       	st	X, r24
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <TIMER0_enuEnableOVF_Interrupt>:


ES_t TIMER0_enuEnableOVF_Interrupt(void)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	TIMSK|=(masking_bit<<TOIE0);
    2430:	a9 e5       	ldi	r26, 0x59	; 89
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e9 e5       	ldi	r30, 0x59	; 89
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	81 60       	ori	r24, 0x01	; 1
    243c:	8c 93       	st	X, r24
	TIMSK&=~(masking_bit<<OCIE0);
    243e:	a9 e5       	ldi	r26, 0x59	; 89
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e9 e5       	ldi	r30, 0x59	; 89
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8d 7f       	andi	r24, 0xFD	; 253
    244a:	8c 93       	st	X, r24
}
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <TIMER_voidEnable_GI>:


void TIMER_voidEnable_GI()
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
	SREG|=(masking_bit<<GI);
    245c:	af e5       	ldi	r26, 0x5F	; 95
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ef e5       	ldi	r30, 0x5F	; 95
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	8c 93       	st	X, r24
}
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <TIMER_voidDisable_GI>:

void TIMER_voidDisable_GI()
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
	SREG&=~(masking_bit<<GI);
    2478:	af e5       	ldi	r26, 0x5F	; 95
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	ef e5       	ldi	r30, 0x5F	; 95
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8f 77       	andi	r24, 0x7F	; 127
    2484:	8c 93       	st	X, r24
}
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <TIMER_voidCall_Back_OVF>:

void TIMER_voidCall_Back_OVF(void (*copy_pf)(void))
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <TIMER_voidCall_Back_OVF+0x6>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pf!=NULL)
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	31 f0       	breq	.+12     	; 0x24ae <TIMER_voidCall_Back_OVF+0x22>
	{
		TIMER0_OVF_CallBack=copy_pf;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	90 93 f6 01 	sts	0x01F6, r25
    24aa:	80 93 f5 01 	sts	0x01F5, r24
	}
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <TIMER_voidCall_Back_CTC>:

void TIMER_voidCall_Back_CTC(void (*copy_pf)(void))
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	00 d0       	rcall	.+0      	; 0x24be <TIMER_voidCall_Back_CTC+0x6>
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pf!=NULL)
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	31 f0       	breq	.+12     	; 0x24da <TIMER_voidCall_Back_CTC+0x22>
	{
		TIMER0_CTC_CallBack=copy_pf;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	90 93 f8 01 	sts	0x01F8, r25
    24d6:	80 93 f7 01 	sts	0x01F7, r24
	}
}
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <__vector_11>:


ISR(TIMER0_OVF_VEC)
{
    24e4:	1f 92       	push	r1
    24e6:	0f 92       	push	r0
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	0f 92       	push	r0
    24ec:	11 24       	eor	r1, r1
    24ee:	2f 93       	push	r18
    24f0:	3f 93       	push	r19
    24f2:	4f 93       	push	r20
    24f4:	5f 93       	push	r21
    24f6:	6f 93       	push	r22
    24f8:	7f 93       	push	r23
    24fa:	8f 93       	push	r24
    24fc:	9f 93       	push	r25
    24fe:	af 93       	push	r26
    2500:	bf 93       	push	r27
    2502:	ef 93       	push	r30
    2504:	ff 93       	push	r31
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	static u32 local_count=0;
	local_count++;
    250e:	80 91 f9 01 	lds	r24, 0x01F9
    2512:	90 91 fa 01 	lds	r25, 0x01FA
    2516:	a0 91 fb 01 	lds	r26, 0x01FB
    251a:	b0 91 fc 01 	lds	r27, 0x01FC
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	a1 1d       	adc	r26, r1
    2522:	b1 1d       	adc	r27, r1
    2524:	80 93 f9 01 	sts	0x01F9, r24
    2528:	90 93 fa 01 	sts	0x01FA, r25
    252c:	a0 93 fb 01 	sts	0x01FB, r26
    2530:	b0 93 fc 01 	sts	0x01FC, r27
	if(u8_OVF_num==local_count){
    2534:	80 91 f4 01 	lds	r24, 0x01F4
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	80 91 f9 01 	lds	r24, 0x01F9
    2544:	90 91 fa 01 	lds	r25, 0x01FA
    2548:	a0 91 fb 01 	lds	r26, 0x01FB
    254c:	b0 91 fc 01 	lds	r27, 0x01FC
    2550:	28 17       	cp	r18, r24
    2552:	39 07       	cpc	r19, r25
    2554:	4a 07       	cpc	r20, r26
    2556:	5b 07       	cpc	r21, r27
    2558:	69 f4       	brne	.+26     	; 0x2574 <__vector_11+0x90>
		//TIMER0_STOPTIMER;
		TIMER0_OVF_CallBack();
    255a:	e0 91 f5 01 	lds	r30, 0x01F5
    255e:	f0 91 f6 01 	lds	r31, 0x01F6
    2562:	09 95       	icall
		local_count=0;
    2564:	10 92 f9 01 	sts	0x01F9, r1
    2568:	10 92 fa 01 	sts	0x01FA, r1
    256c:	10 92 fb 01 	sts	0x01FB, r1
    2570:	10 92 fc 01 	sts	0x01FC, r1
	}
}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	ff 91       	pop	r31
    257a:	ef 91       	pop	r30
    257c:	bf 91       	pop	r27
    257e:	af 91       	pop	r26
    2580:	9f 91       	pop	r25
    2582:	8f 91       	pop	r24
    2584:	7f 91       	pop	r23
    2586:	6f 91       	pop	r22
    2588:	5f 91       	pop	r21
    258a:	4f 91       	pop	r20
    258c:	3f 91       	pop	r19
    258e:	2f 91       	pop	r18
    2590:	0f 90       	pop	r0
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	0f 90       	pop	r0
    2596:	1f 90       	pop	r1
    2598:	18 95       	reti

0000259a <__vector_10>:


ISR(TIMER0_CTC_VEC)
{
    259a:	1f 92       	push	r1
    259c:	0f 92       	push	r0
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	0f 92       	push	r0
    25a2:	11 24       	eor	r1, r1
    25a4:	2f 93       	push	r18
    25a6:	3f 93       	push	r19
    25a8:	4f 93       	push	r20
    25aa:	5f 93       	push	r21
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	ef 93       	push	r30
    25b6:	ff 93       	push	r31
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	static u32 local_count=0;
	local_count++;
    25c0:	80 91 fd 01 	lds	r24, 0x01FD
    25c4:	90 91 fe 01 	lds	r25, 0x01FE
    25c8:	a0 91 ff 01 	lds	r26, 0x01FF
    25cc:	b0 91 00 02 	lds	r27, 0x0200
    25d0:	01 96       	adiw	r24, 0x01	; 1
    25d2:	a1 1d       	adc	r26, r1
    25d4:	b1 1d       	adc	r27, r1
    25d6:	80 93 fd 01 	sts	0x01FD, r24
    25da:	90 93 fe 01 	sts	0x01FE, r25
    25de:	a0 93 ff 01 	sts	0x01FF, r26
    25e2:	b0 93 00 02 	sts	0x0200, r27
	if(u8_OVF_num==local_count){
    25e6:	80 91 f4 01 	lds	r24, 0x01F4
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	80 91 fd 01 	lds	r24, 0x01FD
    25f6:	90 91 fe 01 	lds	r25, 0x01FE
    25fa:	a0 91 ff 01 	lds	r26, 0x01FF
    25fe:	b0 91 00 02 	lds	r27, 0x0200
    2602:	28 17       	cp	r18, r24
    2604:	39 07       	cpc	r19, r25
    2606:	4a 07       	cpc	r20, r26
    2608:	5b 07       	cpc	r21, r27
    260a:	59 f4       	brne	.+22     	; 0x2622 <__vector_10+0x88>
		TIMER0_STOPTIMER;
    260c:	e3 e5       	ldi	r30, 0x53	; 83
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	10 82       	st	Z, r1
		local_count=0;
    2612:	10 92 fd 01 	sts	0x01FD, r1
    2616:	10 92 fe 01 	sts	0x01FE, r1
    261a:	10 92 ff 01 	sts	0x01FF, r1
    261e:	10 92 00 02 	sts	0x0200, r1
	}
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	ff 91       	pop	r31
    2628:	ef 91       	pop	r30
    262a:	bf 91       	pop	r27
    262c:	af 91       	pop	r26
    262e:	9f 91       	pop	r25
    2630:	8f 91       	pop	r24
    2632:	5f 91       	pop	r21
    2634:	4f 91       	pop	r20
    2636:	3f 91       	pop	r19
    2638:	2f 91       	pop	r18
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    2640:	1f 90       	pop	r1
    2642:	18 95       	reti

00002644 <TWI_enuInitMaster>:
#include "TWI_int.h"
#include "TWI_config.h"
#include "TWI_priv.h"

ES_t TWI_enuInitMaster(void)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    264e:	19 82       	std	Y+1, r1	; 0x01

	TWBR = 0x02;
    2650:	e0 e2       	ldi	r30, 0x20	; 32
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	80 83       	st	Z, r24
	TWSR = 0x00;
    2658:	e1 e2       	ldi	r30, 0x21	; 33
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	10 82       	st	Z, r1

	TWAR = TWI_MC_ADDRESS<<1;
    265e:	e2 e2       	ldi	r30, 0x22	; 34
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	82 e8       	ldi	r24, 0x82	; 130
    2664:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
    2666:	e6 e5       	ldi	r30, 0x56	; 86
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	84 e0       	ldi	r24, 0x04	; 4
    266c:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2672:	89 81       	ldd	r24, Y+1	; 0x01
}
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <TWI_enuInitSlave>:

ES_t TWI_enuInitSlave(void)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	0f 92       	push	r0
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2686:	19 82       	std	Y+1, r1	; 0x01

	TWAR = TWI_MC_ADDRESS<<1;
    2688:	e2 e2       	ldi	r30, 0x22	; 34
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	82 e8       	ldi	r24, 0x82	; 130
    268e:	80 83       	st	Z, r24
	/*Enable TWI peripheral*/
	TWCR = (1<<TWEN);
    2690:	e6 e5       	ldi	r30, 0x56	; 86
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	84 e0       	ldi	r24, 0x04	; 4
    2696:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    269c:	89 81       	ldd	r24, Y+1	; 0x01
}
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <TWI_enuMasterSendStartCondition>:



ES_t TWI_enuMasterSendStartCondition(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	0f 92       	push	r0
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    26b0:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    26b2:	e6 e5       	ldi	r30, 0x56	; 86
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	84 ea       	ldi	r24, 0xA4	; 164
    26b8:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    26ba:	e6 e5       	ldi	r30, 0x56	; 86
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	88 23       	and	r24, r24
    26c2:	dc f7       	brge	.-10     	; 0x26ba <TWI_enuMasterSendStartCondition+0x14>

	/*Read the status register*/
	if((TWSR&0xf8) == TWI_SATRT_COND_TRANSMIT)
    26c4:	e1 e2       	ldi	r30, 0x21	; 33
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	88 7f       	andi	r24, 0xF8	; 248
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	91 05       	cpc	r25, r1
    26d6:	19 f4       	brne	.+6      	; 0x26de <TWI_enuMasterSendStartCondition+0x38>
	{
		Local_enuErrorState = ES_OK;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <TWI_enuMasterSendStartCondition+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_TWI_START_COND_ERROR;
    26de:	87 e0       	ldi	r24, 0x07	; 7
    26e0:	89 83       	std	Y+1, r24	; 0x01
		//CLEAR_BIT(TWCR,TWSTA); //clear start condition bit
	}

	return Local_enuErrorState;
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <TWI_enuSendReapeatedStart>:

ES_t TWI_enuSendReapeatedStart(void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    26f6:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    26f8:	e6 e5       	ldi	r30, 0x56	; 86
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	84 ea       	ldi	r24, 0xA4	; 164
    26fe:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2700:	e6 e5       	ldi	r30, 0x56	; 86
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	88 23       	and	r24, r24
    2708:	dc f7       	brge	.-10     	; 0x2700 <TWI_enuSendReapeatedStart+0x14>

	/*Read the status register*/
	if((TWSR&0xf8) == TWI_REP_START_TRANSMIT)
    270a:	e1 e2       	ldi	r30, 0x21	; 33
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	88 7f       	andi	r24, 0xF8	; 248
    2716:	90 70       	andi	r25, 0x00	; 0
    2718:	80 31       	cpi	r24, 0x10	; 16
    271a:	91 05       	cpc	r25, r1
    271c:	19 f4       	brne	.+6      	; 0x2724 <TWI_enuSendReapeatedStart+0x38>
	{
		Local_enuErrorState = ES_OK;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <TWI_enuSendReapeatedStart+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_TWI_REP_START_COND_ERROR;
    2724:	88 e0       	ldi	r24, 0x08	; 8
    2726:	89 83       	std	Y+1, r24	; 0x01
		//CLEAR_BIT(TWCR,TWSTA);//clear start condition bit
	}

	return Local_enuErrorState;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
}
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <TWI_enuSendSlaveAddressWithWriteReq>:

ES_t TWI_enuSendSlaveAddressWithWriteReq(u8 Copy_u8SlaveAddress)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	00 d0       	rcall	.+0      	; 0x2738 <TWI_enuSendSlaveAddressWithWriteReq+0x6>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    273e:	19 82       	std	Y+1, r1	; 0x01

	/*set the slave address in msb in the data register and clear the bit0*/
	TWDR = (u8)(Copy_u8SlaveAddress<<1) ;
    2740:	e3 e2       	ldi	r30, 0x23	; 35
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	88 0f       	add	r24, r24
    2748:	80 83       	st	Z, r24


	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    274a:	e6 e5       	ldi	r30, 0x56	; 86
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	84 e8       	ldi	r24, 0x84	; 132
    2750:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2752:	e6 e5       	ldi	r30, 0x56	; 86
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	88 23       	and	r24, r24
    275a:	dc f7       	brge	.-10     	; 0x2752 <TWI_enuSendSlaveAddressWithWriteReq+0x20>

	/*Read the status register*/
	if((TWSR&0xf8) == SLAVE_ADDR_AND_WRITE)
    275c:	e1 e2       	ldi	r30, 0x21	; 33
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	88 7f       	andi	r24, 0xF8	; 248
    2768:	90 70       	andi	r25, 0x00	; 0
    276a:	88 31       	cpi	r24, 0x18	; 24
    276c:	91 05       	cpc	r25, r1
    276e:	19 f4       	brne	.+6      	; 0x2776 <TWI_enuSendSlaveAddressWithWriteReq+0x44>
	{
		Local_enuErrorState = ES_OK;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	02 c0       	rjmp	.+4      	; 0x277a <TWI_enuSendSlaveAddressWithWriteReq+0x48>
	}
	else
	{
		Local_enuErrorState = ES_TWI_SLAVE_ADD_WRITE_ERROR;
    2776:	89 e0       	ldi	r24, 0x09	; 9
    2778:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    277a:	89 81       	ldd	r24, Y+1	; 0x01
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <TWI_enuSendSlaveAddressWithReadReq>:

ES_t TWI_enuSendSlaveAddressWithReadReq(u8 Copy_u8SlaveAddress)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <TWI_enuSendSlaveAddressWithReadReq+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2792:	19 82       	std	Y+1, r1	; 0x01

	/*set the slave address in msb in the data register and set the bit0*/
	TWDR = (u8)((Copy_u8SlaveAddress<<1) |1);
    2794:	e3 e2       	ldi	r30, 0x23	; 35
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	81 60       	ori	r24, 0x01	; 1
    27a4:	80 83       	st	Z, r24


	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    27a6:	e6 e5       	ldi	r30, 0x56	; 86
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	84 e8       	ldi	r24, 0x84	; 132
    27ac:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    27ae:	e6 e5       	ldi	r30, 0x56	; 86
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	dc f7       	brge	.-10     	; 0x27ae <TWI_enuSendSlaveAddressWithReadReq+0x28>

	/*Read the status register*/
	if(( TWSR&0xf8) == SLAVE_ADDR_AND_READ)
    27b8:	e1 e2       	ldi	r30, 0x21	; 33
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	88 7f       	andi	r24, 0xF8	; 248
    27c4:	90 70       	andi	r25, 0x00	; 0
    27c6:	80 34       	cpi	r24, 0x40	; 64
    27c8:	91 05       	cpc	r25, r1
    27ca:	19 f4       	brne	.+6      	; 0x27d2 <TWI_enuSendSlaveAddressWithReadReq+0x4c>
	{
		Local_enuErrorState = ES_OK;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <TWI_enuSendSlaveAddressWithReadReq+0x50>
	}
	else
	{
		Local_enuErrorState = ES_TWI_SLAVE_ADD_READ_ERROR;
    27d2:	8a e0       	ldi	r24, 0x0A	; 10
    27d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <TWI_enuMasterWriteDataByte>:

ES_t TWI_enuMasterWriteDataByte(u8 Copy_u8Data)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <TWI_enuMasterWriteDataByte+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    27ee:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data in data register*/
	TWDR = Copy_u8Data;
    27f0:	e3 e2       	ldi	r30, 0x23	; 35
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	80 83       	st	Z, r24

	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    27f8:	e6 e5       	ldi	r30, 0x56	; 86
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	84 e8       	ldi	r24, 0x84	; 132
    27fe:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2800:	e6 e5       	ldi	r30, 0x56	; 86
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	88 23       	and	r24, r24
    2808:	dc f7       	brge	.-10     	; 0x2800 <TWI_enuMasterWriteDataByte+0x1e>

	/*Read the status register*/
	if((TWSR&0xf8) == MASTER_TRANSMIT_DATA)
    280a:	e1 e2       	ldi	r30, 0x21	; 33
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	88 7f       	andi	r24, 0xF8	; 248
    2816:	90 70       	andi	r25, 0x00	; 0
    2818:	88 32       	cpi	r24, 0x28	; 40
    281a:	91 05       	cpc	r25, r1
    281c:	19 f4       	brne	.+6      	; 0x2824 <TWI_enuMasterWriteDataByte+0x42>
	{
		Local_enuErrorState = ES_OK;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <TWI_enuMasterWriteDataByte+0x46>
	}
	else
	{
		Local_enuErrorState = ES_TWI_MASTER_WRITE_DATA_BYTE_ERROR;
    2824:	8b e0       	ldi	r24, 0x0B	; 11
    2826:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2828:	89 81       	ldd	r24, Y+1	; 0x01
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <TWI_enuMasterReadDataByte>:

ES_t TWI_enuMasterReadDataByte(u8* Copy_pu8Data)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <TWI_enuMasterReadDataByte+0x6>
    283a:	0f 92       	push	r0
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	9b 83       	std	Y+3, r25	; 0x03
    2842:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2844:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the TWI flag to let the slave sending the data*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    2846:	e6 e5       	ldi	r30, 0x56	; 86
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	84 e8       	ldi	r24, 0x84	; 132
    284c:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    284e:	e6 e5       	ldi	r30, 0x56	; 86
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	88 23       	and	r24, r24
    2856:	dc f7       	brge	.-10     	; 0x284e <TWI_enuMasterReadDataByte+0x1a>

	*Copy_pu8Data = TWDR;
    2858:	e3 e2       	ldi	r30, 0x23	; 35
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	ea 81       	ldd	r30, Y+2	; 0x02
    2860:	fb 81       	ldd	r31, Y+3	; 0x03
    2862:	80 83       	st	Z, r24

	/*Read the status register*/
	if((TWSR&0xf8) == MASTER_RECEIVED_DATA_WITH_ACK)
    2864:	e1 e2       	ldi	r30, 0x21	; 33
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	88 7f       	andi	r24, 0xF8	; 248
    2870:	90 70       	andi	r25, 0x00	; 0
    2872:	80 35       	cpi	r24, 0x50	; 80
    2874:	91 05       	cpc	r25, r1
    2876:	19 f4       	brne	.+6      	; 0x287e <TWI_enuMasterReadDataByte+0x4a>
	{
		/*Read received data*/
		Local_enuErrorState = ES_OK;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <TWI_enuMasterReadDataByte+0x4e>
	}
	else
	{
		Local_enuErrorState = ES_TWI_MASTER_READ_DATA_BYTE_ERROR;
    287e:	8c e0       	ldi	r24, 0x0C	; 12
    2880:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2882:	89 81       	ldd	r24, Y+1	; 0x01
}
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <TWI_enuMasterSendStopCondition>:

ES_t TWI_enuMasterSendStopCondition(void)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	0f 92       	push	r0
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    289a:	19 82       	std	Y+1, r1	; 0x01

	/*Set stop condition bit*/
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    289c:	e6 e5       	ldi	r30, 0x56	; 86
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	84 e9       	ldi	r24, 0x94	; 148
    28a2:	80 83       	st	Z, r24

	/*Clear the TWI flag to send the stop condition*/
	SET_BIT(TWCR,TWINT);
    28a4:	a6 e5       	ldi	r26, 0x56	; 86
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e6 e5       	ldi	r30, 0x56	; 86
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	80 68       	ori	r24, 0x80	; 128
    28b0:	8c 93       	st	X, r24

	return Local_enuErrorState;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <DIO_enuInit>:
#include"../../LIB/stdtypes.h"

#include"DIO_priv.h"
#include"DIO_config.h"

ES_t DIO_enuInit(void){
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	0f 92       	push	r0
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62

	DDRA=CONC(PORTA_PIN7,PORTA_PIN6,PORTA_PIN5,PORTA_PIN4,PORTA_PIN3,PORTA_PIN2,PORTA_PIN1,PORTA_PIN0);
    28c6:	ea e3       	ldi	r30, 0x3A	; 58
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	89 e0       	ldi	r24, 0x09	; 9
    28cc:	80 83       	st	Z, r24
	DDRB=CONC(PORTB_PIN7,PORTB_PIN6,PORTB_PIN5,PORTB_PIN4,PORTB_PIN3,PORTB_PIN2,PORTB_PIN1,PORTB_PIN0);
    28ce:	e7 e3       	ldi	r30, 0x37	; 55
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	10 82       	st	Z, r1
	DDRC=CONC(PORTC_PIN7,PORTC_PIN6,PORTC_PIN5,PORTC_PIN4,PORTC_PIN3,PORTC_PIN2,PORTC_PIN1,PORTC_PIN0);
    28d4:	e4 e3       	ldi	r30, 0x34	; 52
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	10 82       	st	Z, r1
	DDRD=CONC(PORTD_PIN7,PORTD_PIN6,PORTD_PIN5,PORTD_PIN4,PORTD_PIN3,PORTD_PIN2,PORTD_PIN1,PORTD_PIN0);
    28da:	e1 e3       	ldi	r30, 0x31	; 49
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	10 82       	st	Z, r1

}
    28e0:	0f 90       	pop	r0
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <DIO_enuSetPortDIR>:
ES_t DIO_enuSetPortDIR(u8 copy_u8port, u8 copy_u8value){
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <DIO_enuSetPortDIR+0x6>
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <DIO_enuSetPortDIR+0x8>
    28f0:	0f 92       	push	r0
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	6a 83       	std	Y+2, r22	; 0x02
switch(copy_u8port){
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	3c 83       	std	Y+4, r19	; 0x04
    2902:	2b 83       	std	Y+3, r18	; 0x03
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	91 05       	cpc	r25, r1
    290c:	d1 f0       	breq	.+52     	; 0x2942 <DIO_enuSetPortDIR+0x5a>
    290e:	2b 81       	ldd	r18, Y+3	; 0x03
    2910:	3c 81       	ldd	r19, Y+4	; 0x04
    2912:	22 30       	cpi	r18, 0x02	; 2
    2914:	31 05       	cpc	r19, r1
    2916:	2c f4       	brge	.+10     	; 0x2922 <DIO_enuSetPortDIR+0x3a>
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	61 f0       	breq	.+24     	; 0x2938 <DIO_enuSetPortDIR+0x50>
    2920:	1e c0       	rjmp	.+60     	; 0x295e <DIO_enuSetPortDIR+0x76>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	22 30       	cpi	r18, 0x02	; 2
    2928:	31 05       	cpc	r19, r1
    292a:	81 f0       	breq	.+32     	; 0x294c <DIO_enuSetPortDIR+0x64>
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	83 30       	cpi	r24, 0x03	; 3
    2932:	91 05       	cpc	r25, r1
    2934:	81 f0       	breq	.+32     	; 0x2956 <DIO_enuSetPortDIR+0x6e>
    2936:	13 c0       	rjmp	.+38     	; 0x295e <DIO_enuSetPortDIR+0x76>
case DIO_u8PORTA:
	DDRA=copy_u8value;
    2938:	ea e3       	ldi	r30, 0x3A	; 58
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	80 83       	st	Z, r24
    2940:	0e c0       	rjmp	.+28     	; 0x295e <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTB:
	DDRB=copy_u8value;
    2942:	e7 e3       	ldi	r30, 0x37	; 55
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	80 83       	st	Z, r24
    294a:	09 c0       	rjmp	.+18     	; 0x295e <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTC:
	DDRC=copy_u8value;
    294c:	e4 e3       	ldi	r30, 0x34	; 52
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	80 83       	st	Z, r24
    2954:	04 c0       	rjmp	.+8      	; 0x295e <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTD:
	DDRD=copy_u8value;
    2956:	e1 e3       	ldi	r30, 0x31	; 49
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	80 83       	st	Z, r24
	break;
}
}
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 copy_u8port, u8 copy_u8value){
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <DIO_enuSetPortVAL+0x6>
    2974:	00 d0       	rcall	.+0      	; 0x2976 <DIO_enuSetPortVAL+0x8>
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	3c 83       	std	Y+4, r19	; 0x04
    2988:	2b 83       	std	Y+3, r18	; 0x03
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	91 05       	cpc	r25, r1
    2992:	d1 f0       	breq	.+52     	; 0x29c8 <DIO_enuSetPortVAL+0x5a>
    2994:	2b 81       	ldd	r18, Y+3	; 0x03
    2996:	3c 81       	ldd	r19, Y+4	; 0x04
    2998:	22 30       	cpi	r18, 0x02	; 2
    299a:	31 05       	cpc	r19, r1
    299c:	2c f4       	brge	.+10     	; 0x29a8 <DIO_enuSetPortVAL+0x3a>
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	61 f0       	breq	.+24     	; 0x29be <DIO_enuSetPortVAL+0x50>
    29a6:	1e c0       	rjmp	.+60     	; 0x29e4 <DIO_enuSetPortVAL+0x76>
    29a8:	2b 81       	ldd	r18, Y+3	; 0x03
    29aa:	3c 81       	ldd	r19, Y+4	; 0x04
    29ac:	22 30       	cpi	r18, 0x02	; 2
    29ae:	31 05       	cpc	r19, r1
    29b0:	81 f0       	breq	.+32     	; 0x29d2 <DIO_enuSetPortVAL+0x64>
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	9c 81       	ldd	r25, Y+4	; 0x04
    29b6:	83 30       	cpi	r24, 0x03	; 3
    29b8:	91 05       	cpc	r25, r1
    29ba:	81 f0       	breq	.+32     	; 0x29dc <DIO_enuSetPortVAL+0x6e>
    29bc:	13 c0       	rjmp	.+38     	; 0x29e4 <DIO_enuSetPortVAL+0x76>
	case DIO_u8PORTA:
		PORTA=copy_u8value;
    29be:	eb e3       	ldi	r30, 0x3B	; 59
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	80 83       	st	Z, r24
    29c6:	0e c0       	rjmp	.+28     	; 0x29e4 <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTB:
		PORTB=copy_u8value;
    29c8:	e8 e3       	ldi	r30, 0x38	; 56
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	80 83       	st	Z, r24
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTC:
		PORTC=copy_u8value;
    29d2:	e5 e3       	ldi	r30, 0x35	; 53
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	80 83       	st	Z, r24
    29da:	04 c0       	rjmp	.+8      	; 0x29e4 <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTD:
		PORTD=copy_u8value;
    29dc:	e2 e3       	ldi	r30, 0x32	; 50
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	80 83       	st	Z, r24
		break;
	}
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <DIO_enuTogPort>:
ES_t DIO_enuTogPort(u8 copy_u8port){
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <DIO_enuTogPort+0x6>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <DIO_enuTogPort+0x8>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8port){
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	28 2f       	mov	r18, r24
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	3b 83       	std	Y+3, r19	; 0x03
    2a0a:	2a 83       	std	Y+2, r18	; 0x02
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	91 05       	cpc	r25, r1
    2a14:	e9 f0       	breq	.+58     	; 0x2a50 <DIO_enuTogPort+0x5c>
    2a16:	2a 81       	ldd	r18, Y+2	; 0x02
    2a18:	3b 81       	ldd	r19, Y+3	; 0x03
    2a1a:	22 30       	cpi	r18, 0x02	; 2
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <DIO_enuTogPort+0x36>
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	9b 81       	ldd	r25, Y+3	; 0x03
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	61 f0       	breq	.+24     	; 0x2a40 <DIO_enuTogPort+0x4c>
    2a28:	2a c0       	rjmp	.+84     	; 0x2a7e <DIO_enuTogPort+0x8a>
    2a2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2a2c:	3b 81       	ldd	r19, Y+3	; 0x03
    2a2e:	22 30       	cpi	r18, 0x02	; 2
    2a30:	31 05       	cpc	r19, r1
    2a32:	b1 f0       	breq	.+44     	; 0x2a60 <DIO_enuTogPort+0x6c>
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	83 30       	cpi	r24, 0x03	; 3
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	c9 f0       	breq	.+50     	; 0x2a70 <DIO_enuTogPort+0x7c>
    2a3e:	1f c0       	rjmp	.+62     	; 0x2a7e <DIO_enuTogPort+0x8a>
		case DIO_u8PORTA:
			PORTA=~PORTA;
    2a40:	ab e3       	ldi	r26, 0x3B	; 59
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	eb e3       	ldi	r30, 0x3B	; 59
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 95       	com	r24
    2a4c:	8c 93       	st	X, r24
    2a4e:	17 c0       	rjmp	.+46     	; 0x2a7e <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTB:
			PORTB=~PORTB;
    2a50:	a8 e3       	ldi	r26, 0x38	; 56
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e8 e3       	ldi	r30, 0x38	; 56
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	80 95       	com	r24
    2a5c:	8c 93       	st	X, r24
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTC:
			PORTC=~PORTC;
    2a60:	a5 e3       	ldi	r26, 0x35	; 53
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e5 e3       	ldi	r30, 0x35	; 53
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 95       	com	r24
    2a6c:	8c 93       	st	X, r24
    2a6e:	07 c0       	rjmp	.+14     	; 0x2a7e <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTD:
			PORTD=~PORTD;
    2a70:	a2 e3       	ldi	r26, 0x32	; 50
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e2 e3       	ldi	r30, 0x32	; 50
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 95       	com	r24
    2a7c:	8c 93       	st	X, r24
			break;
		}

}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <DIO_enuSetPinDIR>:
ES_t DIO_enuSetPinDIR(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <DIO_enuSetPinDIR+0x6>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <DIO_enuSetPinDIR+0x8>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <DIO_enuSetPinDIR+0xa>
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	6a 83       	std	Y+2, r22	; 0x02
    2a9e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin>=PIN0&&copy_u8pin<=PIN7&&copy_u8value>=INPUT&&copy_u8value<=OUTPUT){
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	88 30       	cpi	r24, 0x08	; 8
    2aa4:	08 f0       	brcs	.+2      	; 0x2aa8 <DIO_enuSetPinDIR+0x1c>
    2aa6:	ca c0       	rjmp	.+404    	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	82 30       	cpi	r24, 0x02	; 2
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <DIO_enuSetPinDIR+0x24>
    2aae:	c6 c0       	rjmp	.+396    	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
	switch(copy_u8port){
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	3d 83       	std	Y+5, r19	; 0x05
    2ab8:	2c 83       	std	Y+4, r18	; 0x04
    2aba:	6c 81       	ldd	r22, Y+4	; 0x04
    2abc:	7d 81       	ldd	r23, Y+5	; 0x05
    2abe:	61 30       	cpi	r22, 0x01	; 1
    2ac0:	71 05       	cpc	r23, r1
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <DIO_enuSetPinDIR+0x3a>
    2ac4:	41 c0       	rjmp	.+130    	; 0x2b48 <DIO_enuSetPinDIR+0xbc>
    2ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	91 05       	cpc	r25, r1
    2ace:	34 f4       	brge	.+12     	; 0x2adc <DIO_enuSetPinDIR+0x50>
    2ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ad4:	21 15       	cp	r18, r1
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	71 f0       	breq	.+28     	; 0x2af6 <DIO_enuSetPinDIR+0x6a>
    2ada:	b0 c0       	rjmp	.+352    	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
    2adc:	6c 81       	ldd	r22, Y+4	; 0x04
    2ade:	7d 81       	ldd	r23, Y+5	; 0x05
    2ae0:	62 30       	cpi	r22, 0x02	; 2
    2ae2:	71 05       	cpc	r23, r1
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <DIO_enuSetPinDIR+0x5c>
    2ae6:	59 c0       	rjmp	.+178    	; 0x2b9a <DIO_enuSetPinDIR+0x10e>
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	9d 81       	ldd	r25, Y+5	; 0x05
    2aec:	83 30       	cpi	r24, 0x03	; 3
    2aee:	91 05       	cpc	r25, r1
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <DIO_enuSetPinDIR+0x68>
    2af2:	7c c0       	rjmp	.+248    	; 0x2bec <DIO_enuSetPinDIR+0x160>
    2af4:	a3 c0       	rjmp	.+326    	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
		case DIO_u8PORTA:
			DDRA&=~(masking_bit<<copy_u8pin);
    2af6:	aa e3       	ldi	r26, 0x3A	; 58
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	ea e3       	ldi	r30, 0x3A	; 58
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	48 2f       	mov	r20, r24
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <DIO_enuSetPinDIR+0x86>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	2a 95       	dec	r18
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <DIO_enuSetPinDIR+0x82>
    2b16:	80 95       	com	r24
    2b18:	84 23       	and	r24, r20
    2b1a:	8c 93       	st	X, r24
			DDRA|=(copy_u8value<<copy_u8pin);
    2b1c:	aa e3       	ldi	r26, 0x3A	; 58
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	ea e3       	ldi	r30, 0x3A	; 58
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	48 2f       	mov	r20, r24
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	b9 01       	movw	r22, r18
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <DIO_enuSetPinDIR+0xb0>
    2b38:	66 0f       	add	r22, r22
    2b3a:	77 1f       	adc	r23, r23
    2b3c:	8a 95       	dec	r24
    2b3e:	e2 f7       	brpl	.-8      	; 0x2b38 <DIO_enuSetPinDIR+0xac>
    2b40:	cb 01       	movw	r24, r22
    2b42:	84 2b       	or	r24, r20
    2b44:	8c 93       	st	X, r24
    2b46:	7a c0       	rjmp	.+244    	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTB:
			DDRB&=~(masking_bit<<copy_u8pin);
    2b48:	a7 e3       	ldi	r26, 0x37	; 55
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e7 e3       	ldi	r30, 0x37	; 55
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	48 2f       	mov	r20, r24
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <DIO_enuSetPinDIR+0xd8>
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	2a 95       	dec	r18
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <DIO_enuSetPinDIR+0xd4>
    2b68:	80 95       	com	r24
    2b6a:	84 23       	and	r24, r20
    2b6c:	8c 93       	st	X, r24
			DDRB|=(copy_u8value<<copy_u8pin);
    2b6e:	a7 e3       	ldi	r26, 0x37	; 55
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e7 e3       	ldi	r30, 0x37	; 55
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	48 2f       	mov	r20, r24
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	b9 01       	movw	r22, r18
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <DIO_enuSetPinDIR+0x102>
    2b8a:	66 0f       	add	r22, r22
    2b8c:	77 1f       	adc	r23, r23
    2b8e:	8a 95       	dec	r24
    2b90:	e2 f7       	brpl	.-8      	; 0x2b8a <DIO_enuSetPinDIR+0xfe>
    2b92:	cb 01       	movw	r24, r22
    2b94:	84 2b       	or	r24, r20
    2b96:	8c 93       	st	X, r24
    2b98:	51 c0       	rjmp	.+162    	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTC:
			DDRC&=~(masking_bit<<copy_u8pin);
    2b9a:	a4 e3       	ldi	r26, 0x34	; 52
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e4 e3       	ldi	r30, 0x34	; 52
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	48 2f       	mov	r20, r24
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	28 2f       	mov	r18, r24
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <DIO_enuSetPinDIR+0x12a>
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	2a 95       	dec	r18
    2bb8:	e2 f7       	brpl	.-8      	; 0x2bb2 <DIO_enuSetPinDIR+0x126>
    2bba:	80 95       	com	r24
    2bbc:	84 23       	and	r24, r20
    2bbe:	8c 93       	st	X, r24
			DDRC|=(copy_u8value<<copy_u8pin);
    2bc0:	a4 e3       	ldi	r26, 0x34	; 52
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e4 e3       	ldi	r30, 0x34	; 52
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	48 2f       	mov	r20, r24
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	b9 01       	movw	r22, r18
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <DIO_enuSetPinDIR+0x154>
    2bdc:	66 0f       	add	r22, r22
    2bde:	77 1f       	adc	r23, r23
    2be0:	8a 95       	dec	r24
    2be2:	e2 f7       	brpl	.-8      	; 0x2bdc <DIO_enuSetPinDIR+0x150>
    2be4:	cb 01       	movw	r24, r22
    2be6:	84 2b       	or	r24, r20
    2be8:	8c 93       	st	X, r24
    2bea:	28 c0       	rjmp	.+80     	; 0x2c3c <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTD:
			DDRD&=~(masking_bit<<copy_u8pin);
    2bec:	a1 e3       	ldi	r26, 0x31	; 49
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e1 e3       	ldi	r30, 0x31	; 49
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	48 2f       	mov	r20, r24
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <DIO_enuSetPinDIR+0x17c>
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	2a 95       	dec	r18
    2c0a:	e2 f7       	brpl	.-8      	; 0x2c04 <DIO_enuSetPinDIR+0x178>
    2c0c:	80 95       	com	r24
    2c0e:	84 23       	and	r24, r20
    2c10:	8c 93       	st	X, r24
			DDRD|=(copy_u8value<<copy_u8pin);
    2c12:	a1 e3       	ldi	r26, 0x31	; 49
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e1 e3       	ldi	r30, 0x31	; 49
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	48 2f       	mov	r20, r24
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <DIO_enuSetPinDIR+0x1a6>
    2c2e:	66 0f       	add	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	8a 95       	dec	r24
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <DIO_enuSetPinDIR+0x1a2>
    2c36:	cb 01       	movw	r24, r22
    2c38:	84 2b       	or	r24, r20
    2c3a:	8c 93       	st	X, r24
			break;
		}
	}
}
    2c3c:	26 96       	adiw	r28, 0x06	; 6
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <DIO_enuSetPinVAL>:

ES_t DIO_enuSetPinVAL(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <DIO_enuSetPinVAL+0x6>
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <DIO_enuSetPinVAL+0x8>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <DIO_enuSetPinVAL+0xa>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	6a 83       	std	Y+2, r22	; 0x02
    2c60:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin>=PIN0&&copy_u8pin<=PIN7&&copy_u8value>=LOW&&copy_u8value<=HIGH){
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	88 30       	cpi	r24, 0x08	; 8
    2c66:	08 f0       	brcs	.+2      	; 0x2c6a <DIO_enuSetPinVAL+0x1c>
    2c68:	ca c0       	rjmp	.+404    	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	82 30       	cpi	r24, 0x02	; 2
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <DIO_enuSetPinVAL+0x24>
    2c70:	c6 c0       	rjmp	.+396    	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
	switch(copy_u8port){
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	3d 83       	std	Y+5, r19	; 0x05
    2c7a:	2c 83       	std	Y+4, r18	; 0x04
    2c7c:	6c 81       	ldd	r22, Y+4	; 0x04
    2c7e:	7d 81       	ldd	r23, Y+5	; 0x05
    2c80:	61 30       	cpi	r22, 0x01	; 1
    2c82:	71 05       	cpc	r23, r1
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <DIO_enuSetPinVAL+0x3a>
    2c86:	41 c0       	rjmp	.+130    	; 0x2d0a <DIO_enuSetPinVAL+0xbc>
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	82 30       	cpi	r24, 0x02	; 2
    2c8e:	91 05       	cpc	r25, r1
    2c90:	34 f4       	brge	.+12     	; 0x2c9e <DIO_enuSetPinVAL+0x50>
    2c92:	2c 81       	ldd	r18, Y+4	; 0x04
    2c94:	3d 81       	ldd	r19, Y+5	; 0x05
    2c96:	21 15       	cp	r18, r1
    2c98:	31 05       	cpc	r19, r1
    2c9a:	71 f0       	breq	.+28     	; 0x2cb8 <DIO_enuSetPinVAL+0x6a>
    2c9c:	b0 c0       	rjmp	.+352    	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
    2c9e:	6c 81       	ldd	r22, Y+4	; 0x04
    2ca0:	7d 81       	ldd	r23, Y+5	; 0x05
    2ca2:	62 30       	cpi	r22, 0x02	; 2
    2ca4:	71 05       	cpc	r23, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <DIO_enuSetPinVAL+0x5c>
    2ca8:	59 c0       	rjmp	.+178    	; 0x2d5c <DIO_enuSetPinVAL+0x10e>
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	9d 81       	ldd	r25, Y+5	; 0x05
    2cae:	83 30       	cpi	r24, 0x03	; 3
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <DIO_enuSetPinVAL+0x68>
    2cb4:	7c c0       	rjmp	.+248    	; 0x2dae <DIO_enuSetPinVAL+0x160>
    2cb6:	a3 c0       	rjmp	.+326    	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
		case DIO_u8PORTA:
			PORTA&=~(masking_bit<<copy_u8pin);
    2cb8:	ab e3       	ldi	r26, 0x3B	; 59
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	eb e3       	ldi	r30, 0x3B	; 59
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	48 2f       	mov	r20, r24
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <DIO_enuSetPinVAL+0x86>
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	2a 95       	dec	r18
    2cd6:	e2 f7       	brpl	.-8      	; 0x2cd0 <DIO_enuSetPinVAL+0x82>
    2cd8:	80 95       	com	r24
    2cda:	84 23       	and	r24, r20
    2cdc:	8c 93       	st	X, r24
			PORTA|=(copy_u8value<<copy_u8pin);
    2cde:	ab e3       	ldi	r26, 0x3B	; 59
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	eb e3       	ldi	r30, 0x3B	; 59
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	48 2f       	mov	r20, r24
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	b9 01       	movw	r22, r18
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <DIO_enuSetPinVAL+0xb0>
    2cfa:	66 0f       	add	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	8a 95       	dec	r24
    2d00:	e2 f7       	brpl	.-8      	; 0x2cfa <DIO_enuSetPinVAL+0xac>
    2d02:	cb 01       	movw	r24, r22
    2d04:	84 2b       	or	r24, r20
    2d06:	8c 93       	st	X, r24
    2d08:	7a c0       	rjmp	.+244    	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTB:
			PORTB&=~(masking_bit<<copy_u8pin);
    2d0a:	a8 e3       	ldi	r26, 0x38	; 56
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e8 e3       	ldi	r30, 0x38	; 56
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	48 2f       	mov	r20, r24
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <DIO_enuSetPinVAL+0xd8>
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	2a 95       	dec	r18
    2d28:	e2 f7       	brpl	.-8      	; 0x2d22 <DIO_enuSetPinVAL+0xd4>
    2d2a:	80 95       	com	r24
    2d2c:	84 23       	and	r24, r20
    2d2e:	8c 93       	st	X, r24
			PORTB|=(copy_u8value<<copy_u8pin);
    2d30:	a8 e3       	ldi	r26, 0x38	; 56
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e8 e3       	ldi	r30, 0x38	; 56
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	48 2f       	mov	r20, r24
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	88 2f       	mov	r24, r24
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	b9 01       	movw	r22, r18
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <DIO_enuSetPinVAL+0x102>
    2d4c:	66 0f       	add	r22, r22
    2d4e:	77 1f       	adc	r23, r23
    2d50:	8a 95       	dec	r24
    2d52:	e2 f7       	brpl	.-8      	; 0x2d4c <DIO_enuSetPinVAL+0xfe>
    2d54:	cb 01       	movw	r24, r22
    2d56:	84 2b       	or	r24, r20
    2d58:	8c 93       	st	X, r24
    2d5a:	51 c0       	rjmp	.+162    	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTC:
			PORTC&=~(masking_bit<<copy_u8pin);
    2d5c:	a5 e3       	ldi	r26, 0x35	; 53
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e5 e3       	ldi	r30, 0x35	; 53
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	48 2f       	mov	r20, r24
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <DIO_enuSetPinVAL+0x12a>
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	2a 95       	dec	r18
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <DIO_enuSetPinVAL+0x126>
    2d7c:	80 95       	com	r24
    2d7e:	84 23       	and	r24, r20
    2d80:	8c 93       	st	X, r24
			PORTC|=(copy_u8value<<copy_u8pin);
    2d82:	a5 e3       	ldi	r26, 0x35	; 53
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e5 e3       	ldi	r30, 0x35	; 53
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	48 2f       	mov	r20, r24
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	28 2f       	mov	r18, r24
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	8a 81       	ldd	r24, Y+2	; 0x02
    2d96:	88 2f       	mov	r24, r24
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <DIO_enuSetPinVAL+0x154>
    2d9e:	66 0f       	add	r22, r22
    2da0:	77 1f       	adc	r23, r23
    2da2:	8a 95       	dec	r24
    2da4:	e2 f7       	brpl	.-8      	; 0x2d9e <DIO_enuSetPinVAL+0x150>
    2da6:	cb 01       	movw	r24, r22
    2da8:	84 2b       	or	r24, r20
    2daa:	8c 93       	st	X, r24
    2dac:	28 c0       	rjmp	.+80     	; 0x2dfe <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTD:
			PORTD&=~(masking_bit<<copy_u8pin);
    2dae:	a2 e3       	ldi	r26, 0x32	; 50
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e2 e3       	ldi	r30, 0x32	; 50
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	48 2f       	mov	r20, r24
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <DIO_enuSetPinVAL+0x17c>
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	2a 95       	dec	r18
    2dcc:	e2 f7       	brpl	.-8      	; 0x2dc6 <DIO_enuSetPinVAL+0x178>
    2dce:	80 95       	com	r24
    2dd0:	84 23       	and	r24, r20
    2dd2:	8c 93       	st	X, r24
			PORTD|=(copy_u8value<<copy_u8pin);
    2dd4:	a2 e3       	ldi	r26, 0x32	; 50
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e2 e3       	ldi	r30, 0x32	; 50
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	48 2f       	mov	r20, r24
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	b9 01       	movw	r22, r18
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <DIO_enuSetPinVAL+0x1a6>
    2df0:	66 0f       	add	r22, r22
    2df2:	77 1f       	adc	r23, r23
    2df4:	8a 95       	dec	r24
    2df6:	e2 f7       	brpl	.-8      	; 0x2df0 <DIO_enuSetPinVAL+0x1a2>
    2df8:	cb 01       	movw	r24, r22
    2dfa:	84 2b       	or	r24, r20
    2dfc:	8c 93       	st	X, r24
			break;
		}
	}
}
    2dfe:	26 96       	adiw	r28, 0x06	; 6
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <DIO_enuTogPin>:
ES_t DIO_enuTogPin(u8 copy_u8port,u8 copy_u8pin){
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <DIO_enuTogPin+0x6>
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <DIO_enuTogPin+0x8>
    2e18:	0f 92       	push	r0
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	3c 83       	std	Y+4, r19	; 0x04
    2e2a:	2b 83       	std	Y+3, r18	; 0x03
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	91 05       	cpc	r25, r1
    2e34:	49 f1       	breq	.+82     	; 0x2e88 <DIO_enuTogPin+0x78>
    2e36:	2b 81       	ldd	r18, Y+3	; 0x03
    2e38:	3c 81       	ldd	r19, Y+4	; 0x04
    2e3a:	22 30       	cpi	r18, 0x02	; 2
    2e3c:	31 05       	cpc	r19, r1
    2e3e:	2c f4       	brge	.+10     	; 0x2e4a <DIO_enuTogPin+0x3a>
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	9c 81       	ldd	r25, Y+4	; 0x04
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	61 f0       	breq	.+24     	; 0x2e60 <DIO_enuTogPin+0x50>
    2e48:	5a c0       	rjmp	.+180    	; 0x2efe <DIO_enuTogPin+0xee>
    2e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4e:	22 30       	cpi	r18, 0x02	; 2
    2e50:	31 05       	cpc	r19, r1
    2e52:	71 f1       	breq	.+92     	; 0x2eb0 <DIO_enuTogPin+0xa0>
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	83 30       	cpi	r24, 0x03	; 3
    2e5a:	91 05       	cpc	r25, r1
    2e5c:	e9 f1       	breq	.+122    	; 0x2ed8 <DIO_enuTogPin+0xc8>
    2e5e:	4f c0       	rjmp	.+158    	; 0x2efe <DIO_enuTogPin+0xee>
			case DIO_u8PORTA:
				PORTA^=(masking_bit<<copy_u8pin);
    2e60:	ab e3       	ldi	r26, 0x3B	; 59
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	eb e3       	ldi	r30, 0x3B	; 59
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	48 2f       	mov	r20, r24
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	02 2e       	mov	r0, r18
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <DIO_enuTogPin+0x6e>
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	0a 94       	dec	r0
    2e80:	e2 f7       	brpl	.-8      	; 0x2e7a <DIO_enuTogPin+0x6a>
    2e82:	84 27       	eor	r24, r20
    2e84:	8c 93       	st	X, r24
    2e86:	3b c0       	rjmp	.+118    	; 0x2efe <DIO_enuTogPin+0xee>
				break;

			case DIO_u8PORTB:
				PORTB^=(masking_bit<<copy_u8pin);
    2e88:	a8 e3       	ldi	r26, 0x38	; 56
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e8 e3       	ldi	r30, 0x38	; 56
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	48 2f       	mov	r20, r24
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	02 2e       	mov	r0, r18
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <DIO_enuTogPin+0x96>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	0a 94       	dec	r0
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <DIO_enuTogPin+0x92>
    2eaa:	84 27       	eor	r24, r20
    2eac:	8c 93       	st	X, r24
    2eae:	27 c0       	rjmp	.+78     	; 0x2efe <DIO_enuTogPin+0xee>
				break;

			case DIO_u8PORTC:
				PORTC^=(masking_bit<<copy_u8pin);
    2eb0:	a5 e3       	ldi	r26, 0x35	; 53
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e5 e3       	ldi	r30, 0x35	; 53
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	48 2f       	mov	r20, r24
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	02 2e       	mov	r0, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <DIO_enuTogPin+0xbe>
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	0a 94       	dec	r0
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <DIO_enuTogPin+0xba>
    2ed2:	84 27       	eor	r24, r20
    2ed4:	8c 93       	st	X, r24
    2ed6:	13 c0       	rjmp	.+38     	; 0x2efe <DIO_enuTogPin+0xee>
				break;

			case DIO_u8PORTD:
				PORTD^=(masking_bit<<copy_u8pin);
    2ed8:	a2 e3       	ldi	r26, 0x32	; 50
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e2 e3       	ldi	r30, 0x32	; 50
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	48 2f       	mov	r20, r24
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	02 2e       	mov	r0, r18
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <DIO_enuTogPin+0xe6>
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	0a 94       	dec	r0
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <DIO_enuTogPin+0xe2>
    2efa:	84 27       	eor	r24, r20
    2efc:	8c 93       	st	X, r24
				break;
			}
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <DIO_enuGetPortval>:

ES_t DIO_enuGetPortval(u8 copy_u8port, u8 *copy_u8value){
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	00 d0       	rcall	.+0      	; 0x2f14 <DIO_enuGetPortval+0x6>
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <DIO_enuGetPortval+0x8>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <DIO_enuGetPortval+0xa>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	7b 83       	std	Y+3, r23	; 0x03
    2f20:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	3d 83       	std	Y+5, r19	; 0x05
    2f2a:	2c 83       	std	Y+4, r18	; 0x04
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	91 05       	cpc	r25, r1
    2f34:	e1 f0       	breq	.+56     	; 0x2f6e <DIO_enuGetPortval+0x60>
    2f36:	2c 81       	ldd	r18, Y+4	; 0x04
    2f38:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3a:	22 30       	cpi	r18, 0x02	; 2
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	2c f4       	brge	.+10     	; 0x2f4a <DIO_enuGetPortval+0x3c>
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	9d 81       	ldd	r25, Y+5	; 0x05
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	61 f0       	breq	.+24     	; 0x2f60 <DIO_enuGetPortval+0x52>
    2f48:	26 c0       	rjmp	.+76     	; 0x2f96 <DIO_enuGetPortval+0x88>
    2f4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f4e:	22 30       	cpi	r18, 0x02	; 2
    2f50:	31 05       	cpc	r19, r1
    2f52:	a1 f0       	breq	.+40     	; 0x2f7c <DIO_enuGetPortval+0x6e>
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	83 30       	cpi	r24, 0x03	; 3
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	b1 f0       	breq	.+44     	; 0x2f8a <DIO_enuGetPortval+0x7c>
    2f5e:	1b c0       	rjmp	.+54     	; 0x2f96 <DIO_enuGetPortval+0x88>
			case DIO_u8PORTA:
				*copy_u8value=PINA;
    2f60:	e9 e3       	ldi	r30, 0x39	; 57
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	ea 81       	ldd	r30, Y+2	; 0x02
    2f68:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6a:	80 83       	st	Z, r24
    2f6c:	14 c0       	rjmp	.+40     	; 0x2f96 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTB:
				*copy_u8value=PINB;
    2f6e:	e6 e3       	ldi	r30, 0x36	; 54
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	ea 81       	ldd	r30, Y+2	; 0x02
    2f76:	fb 81       	ldd	r31, Y+3	; 0x03
    2f78:	80 83       	st	Z, r24
    2f7a:	0d c0       	rjmp	.+26     	; 0x2f96 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTC:
				*copy_u8value=PINC;
    2f7c:	e3 e3       	ldi	r30, 0x33	; 51
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	ea 81       	ldd	r30, Y+2	; 0x02
    2f84:	fb 81       	ldd	r31, Y+3	; 0x03
    2f86:	80 83       	st	Z, r24
    2f88:	06 c0       	rjmp	.+12     	; 0x2f96 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTD:
				*copy_u8value=PIND;
    2f8a:	e0 e3       	ldi	r30, 0x30	; 48
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	ea 81       	ldd	r30, Y+2	; 0x02
    2f92:	fb 81       	ldd	r31, Y+3	; 0x03
    2f94:	80 83       	st	Z, r24
				break;
			}

}
    2f96:	26 96       	adiw	r28, 0x06	; 6
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <DIO_enuGetPinval>:
ES_t DIO_enuGetPinval(u8 copy_u8port,u8 copy_u8pin, u8 *copy_u8value){
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	27 97       	sbiw	r28, 0x07	; 7
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	6a 83       	std	Y+2, r22	; 0x02
    2fc0:	5c 83       	std	Y+4, r21	; 0x04
    2fc2:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8port){
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	3e 83       	std	Y+6, r19	; 0x06
    2fcc:	2d 83       	std	Y+5, r18	; 0x05
    2fce:	4d 81       	ldd	r20, Y+5	; 0x05
    2fd0:	5e 81       	ldd	r21, Y+6	; 0x06
    2fd2:	41 30       	cpi	r20, 0x01	; 1
    2fd4:	51 05       	cpc	r21, r1
    2fd6:	59 f1       	breq	.+86     	; 0x302e <DIO_enuGetPinval+0x86>
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	82 30       	cpi	r24, 0x02	; 2
    2fde:	91 05       	cpc	r25, r1
    2fe0:	34 f4       	brge	.+12     	; 0x2fee <DIO_enuGetPinval+0x46>
    2fe2:	2d 81       	ldd	r18, Y+5	; 0x05
    2fe4:	3e 81       	ldd	r19, Y+6	; 0x06
    2fe6:	21 15       	cp	r18, r1
    2fe8:	31 05       	cpc	r19, r1
    2fea:	69 f0       	breq	.+26     	; 0x3006 <DIO_enuGetPinval+0x5e>
    2fec:	5b c0       	rjmp	.+182    	; 0x30a4 <DIO_enuGetPinval+0xfc>
    2fee:	4d 81       	ldd	r20, Y+5	; 0x05
    2ff0:	5e 81       	ldd	r21, Y+6	; 0x06
    2ff2:	42 30       	cpi	r20, 0x02	; 2
    2ff4:	51 05       	cpc	r21, r1
    2ff6:	79 f1       	breq	.+94     	; 0x3056 <DIO_enuGetPinval+0xae>
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffc:	83 30       	cpi	r24, 0x03	; 3
    2ffe:	91 05       	cpc	r25, r1
    3000:	09 f4       	brne	.+2      	; 0x3004 <DIO_enuGetPinval+0x5c>
    3002:	3d c0       	rjmp	.+122    	; 0x307e <DIO_enuGetPinval+0xd6>
    3004:	4f c0       	rjmp	.+158    	; 0x30a4 <DIO_enuGetPinval+0xfc>
			case DIO_u8PORTA:
				*copy_u8value=((PINA>>copy_u8pin) &masking_bit);
    3006:	e9 e3       	ldi	r30, 0x39	; 57
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	88 2f       	mov	r24, r24
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	a9 01       	movw	r20, r18
    3018:	02 c0       	rjmp	.+4      	; 0x301e <DIO_enuGetPinval+0x76>
    301a:	55 95       	asr	r21
    301c:	47 95       	ror	r20
    301e:	8a 95       	dec	r24
    3020:	e2 f7       	brpl	.-8      	; 0x301a <DIO_enuGetPinval+0x72>
    3022:	ca 01       	movw	r24, r20
    3024:	81 70       	andi	r24, 0x01	; 1
    3026:	eb 81       	ldd	r30, Y+3	; 0x03
    3028:	fc 81       	ldd	r31, Y+4	; 0x04
    302a:	80 83       	st	Z, r24
    302c:	3b c0       	rjmp	.+118    	; 0x30a4 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTB:
				*copy_u8value=((PINB>>copy_u8pin) &masking_bit);
    302e:	e6 e3       	ldi	r30, 0x36	; 54
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	88 2f       	mov	r24, r24
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	a9 01       	movw	r20, r18
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <DIO_enuGetPinval+0x9e>
    3042:	55 95       	asr	r21
    3044:	47 95       	ror	r20
    3046:	8a 95       	dec	r24
    3048:	e2 f7       	brpl	.-8      	; 0x3042 <DIO_enuGetPinval+0x9a>
    304a:	ca 01       	movw	r24, r20
    304c:	81 70       	andi	r24, 0x01	; 1
    304e:	eb 81       	ldd	r30, Y+3	; 0x03
    3050:	fc 81       	ldd	r31, Y+4	; 0x04
    3052:	80 83       	st	Z, r24
    3054:	27 c0       	rjmp	.+78     	; 0x30a4 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTC:
				*copy_u8value=((PINC>>copy_u8pin) &masking_bit);
    3056:	e3 e3       	ldi	r30, 0x33	; 51
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a9 01       	movw	r20, r18
    3068:	02 c0       	rjmp	.+4      	; 0x306e <DIO_enuGetPinval+0xc6>
    306a:	55 95       	asr	r21
    306c:	47 95       	ror	r20
    306e:	8a 95       	dec	r24
    3070:	e2 f7       	brpl	.-8      	; 0x306a <DIO_enuGetPinval+0xc2>
    3072:	ca 01       	movw	r24, r20
    3074:	81 70       	andi	r24, 0x01	; 1
    3076:	eb 81       	ldd	r30, Y+3	; 0x03
    3078:	fc 81       	ldd	r31, Y+4	; 0x04
    307a:	80 83       	st	Z, r24
    307c:	13 c0       	rjmp	.+38     	; 0x30a4 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTD:
				*copy_u8value=((PIND>>copy_u8pin) &masking_bit);
    307e:	e0 e3       	ldi	r30, 0x30	; 48
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	8a 81       	ldd	r24, Y+2	; 0x02
    308a:	88 2f       	mov	r24, r24
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a9 01       	movw	r20, r18
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <DIO_enuGetPinval+0xee>
    3092:	55 95       	asr	r21
    3094:	47 95       	ror	r20
    3096:	8a 95       	dec	r24
    3098:	e2 f7       	brpl	.-8      	; 0x3092 <DIO_enuGetPinval+0xea>
    309a:	ca 01       	movw	r24, r20
    309c:	81 70       	andi	r24, 0x01	; 1
    309e:	eb 81       	ldd	r30, Y+3	; 0x03
    30a0:	fc 81       	ldd	r31, Y+4	; 0x04
    30a2:	80 83       	st	Z, r24
				break;
			}

}
    30a4:	27 96       	adiw	r28, 0x07	; 7
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <ADC_init>:

#include"../../LIB/stdtypes.h"
#include"ADC_int.h"

void ADC_init(void)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
	//VREF CONFIG
	ADMUX|=(MASKING_BIT<<REFS0);
    30be:	a7 e2       	ldi	r26, 0x27	; 39
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e7 e2       	ldi	r30, 0x27	; 39
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 64       	ori	r24, 0x40	; 64
    30ca:	8c 93       	st	X, r24
	ADMUX|=(MASKING_BIT<<REFS1);
    30cc:	a7 e2       	ldi	r26, 0x27	; 39
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e7 e2       	ldi	r30, 0x27	; 39
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	80 68       	ori	r24, 0x80	; 128
    30d8:	8c 93       	st	X, r24
	//CHANNEL7
	ADMUX|=(MASKING_BIT<<0);
    30da:	a7 e2       	ldi	r26, 0x27	; 39
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e7 e2       	ldi	r30, 0x27	; 39
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	81 60       	ori	r24, 0x01	; 1
    30e6:	8c 93       	st	X, r24
	ADMUX|=(MASKING_BIT<<1);
    30e8:	a7 e2       	ldi	r26, 0x27	; 39
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e7 e2       	ldi	r30, 0x27	; 39
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	82 60       	ori	r24, 0x02	; 2
    30f4:	8c 93       	st	X, r24
	ADMUX|=(MASKING_BIT<<2);
    30f6:	a7 e2       	ldi	r26, 0x27	; 39
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e7 e2       	ldi	r30, 0x27	; 39
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	84 60       	ori	r24, 0x04	; 4
    3102:	8c 93       	st	X, r24
	//ENABLE ADC
	ADCSRA|=(MASKING_BIT<<ADEN);
    3104:	a6 e2       	ldi	r26, 0x26	; 38
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e6 e2       	ldi	r30, 0x26	; 38
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	80 68       	ori	r24, 0x80	; 128
    3110:	8c 93       	st	X, r24
	//AUTO TRIGGER ENABLE
	ADCSRA|=(MASKING_BIT<<ADATE);
    3112:	a6 e2       	ldi	r26, 0x26	; 38
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e6 e2       	ldi	r30, 0x26	; 38
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	80 62       	ori	r24, 0x20	; 32
    311e:	8c 93       	st	X, r24
	//CLOCK ADJ
	ADCSRA|=(MASKING_BIT<<ADPS2);
    3120:	a6 e2       	ldi	r26, 0x26	; 38
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e6 e2       	ldi	r30, 0x26	; 38
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	84 60       	ori	r24, 0x04	; 4
    312c:	8c 93       	st	X, r24
	ADCSRA|=(MASKING_BIT<<ADPS1);
    312e:	a6 e2       	ldi	r26, 0x26	; 38
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e6 e2       	ldi	r30, 0x26	; 38
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	82 60       	ori	r24, 0x02	; 2
    313a:	8c 93       	st	X, r24
	//FREE RUNNING

}
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <ADC_read>:


void ADC_read(u16 *copy_u16Read)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	00 d0       	rcall	.+0      	; 0x3148 <ADC_read+0x6>
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|=(MASKING_BIT<<ADSC);
    3150:	a6 e2       	ldi	r26, 0x26	; 38
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e6 e2       	ldi	r30, 0x26	; 38
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	80 64       	ori	r24, 0x40	; 64
    315c:	8c 93       	st	X, r24
	while(((ADCSRA>>ADIF)&MASKING_BIT)==0);
    315e:	e6 e2       	ldi	r30, 0x26	; 38
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	82 95       	swap	r24
    3166:	8f 70       	andi	r24, 0x0F	; 15
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	81 70       	andi	r24, 0x01	; 1
    316e:	90 70       	andi	r25, 0x00	; 0
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	a9 f3       	breq	.-22     	; 0x315e <ADC_read+0x1c>
	ADCSRA|=(MASKING_BIT<<ADIF);
    3174:	a6 e2       	ldi	r26, 0x26	; 38
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	e6 e2       	ldi	r30, 0x26	; 38
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	80 61       	ori	r24, 0x10	; 16
    3180:	8c 93       	st	X, r24
	*copy_u16Read=(ADCL);
    3182:	e4 e2       	ldi	r30, 0x24	; 36
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
	*copy_u16Read|=(ADCH<<8);
    3194:	e9 81       	ldd	r30, Y+1	; 0x01
    3196:	fa 81       	ldd	r31, Y+2	; 0x02
    3198:	20 81       	ld	r18, Z
    319a:	31 81       	ldd	r19, Z+1	; 0x01
    319c:	e5 e2       	ldi	r30, 0x25	; 37
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	98 2f       	mov	r25, r24
    31a8:	88 27       	eor	r24, r24
    31aa:	82 2b       	or	r24, r18
    31ac:	93 2b       	or	r25, r19
    31ae:	e9 81       	ldd	r30, Y+1	; 0x01
    31b0:	fa 81       	ldd	r31, Y+2	; 0x02
    31b2:	91 83       	std	Z+1, r25	; 0x01
    31b4:	80 83       	st	Z, r24
}
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <SWITCH_init>:




ES_t SWITCH_init(void)
{
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	0f 92       	push	r0
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDIR(SWITCH_PORT,SWITCH_PIN,DIO_PIN_INPUT);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinVAL(SWITCH_PORT,SWITCH_PIN,DIO_HIGH);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
}
    31de:	0f 90       	pop	r0
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <SWITCH_read>:


ES_t SWITCH_read(u8 copy_SWITCH_port,u8 copy_SWITCH_pin,u8 *value)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <SWITCH_read+0x6>
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <SWITCH_read+0x8>
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	6a 83       	std	Y+2, r22	; 0x02
    31f8:	5c 83       	std	Y+4, r21	; 0x04
    31fa:	4b 83       	std	Y+3, r20	; 0x03
	DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,value); ///////////////////////////////!!!!!!!
    31fc:	2b 81       	ldd	r18, Y+3	; 0x03
    31fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	6a 81       	ldd	r22, Y+2	; 0x02
    3204:	a9 01       	movw	r20, r18
    3206:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <DIO_enuGetPinval>

}
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <LED_init>:
#include"LED_priv.h"
#include"LED_config.h"
//#include"LED_int.h"

ES_t LED_init(void)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	0f 92       	push	r0
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDIR(LED1_PORT,LED1_PIN,DIO_PIN_OUTPUT);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	62 e0       	ldi	r22, 0x02	; 2
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(LED2_PORT,LED2_PIN,DIO_PIN_OUTPUT);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	63 e0       	ldi	r22, 0x03	; 3
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
}
    3238:	0f 90       	pop	r0
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <LED_enuON>:

ES_t LED_enuON(u8 copy_port,u8 copy_pin)
{
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	00 d0       	rcall	.+0      	; 0x3246 <LED_enuON+0x6>
    3246:	0f 92       	push	r0
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinVAL(copy_port,copy_pin,DIO_HIGH);
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	6a 81       	ldd	r22, Y+2	; 0x02
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
}
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <LED_enuOFF>:

ES_t LED_enuOFF(u8 copy_port,u8 copy_pin)
{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	00 d0       	rcall	.+0      	; 0x326c <LED_enuOFF+0x6>
    326c:	0f 92       	push	r0
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	89 83       	std	Y+1, r24	; 0x01
    3274:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinVAL(copy_port,copy_pin,DIO_LOW);
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	6a 81       	ldd	r22, Y+2	; 0x02
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <LED_enuTOG>:

ES_t LED_enuTOG(u8 copy_port,u8 copy_pin)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	00 d0       	rcall	.+0      	; 0x3292 <LED_enuTOG+0x6>
    3292:	0f 92       	push	r0
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	89 83       	std	Y+1, r24	; 0x01
    329a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuTogPin(copy_port,copy_pin);
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	6a 81       	ldd	r22, Y+2	; 0x02
    32a0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <DIO_enuTogPin>
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <LCD_voidWriteData>:
#include "LCD_priv.h"
#include "LCD_config.h"


void LCD_voidWriteData(uint8 Copy_u8Data)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	0f 92       	push	r0
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinVAL(LCD_RS_PORT, LCD_RS_PIN, DIO_HIGH);
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	64 e0       	ldi	r22, 0x04	; 4
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(LCD_RW_PORT, LCD_RW_PIN, DIO_LOW );
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	65 e0       	ldi	r22, 0x05	; 5
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

		LCD_voidLatchEnable();

	#elif (LCD_MODE == MODE_4_BIT)

		DIO_enuSetPinVAL(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	82 95       	swap	r24
    32d4:	8f 70       	andi	r24, 0x0F	; 15
    32d6:	98 2f       	mov	r25, r24
    32d8:	91 70       	andi	r25, 0x01	; 1
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	49 2f       	mov	r20, r25
    32e0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	82 95       	swap	r24
    32e8:	86 95       	lsr	r24
    32ea:	87 70       	andi	r24, 0x07	; 7
    32ec:	98 2f       	mov	r25, r24
    32ee:	91 70       	andi	r25, 0x01	; 1
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	49 2f       	mov	r20, r25
    32f6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	82 95       	swap	r24
    32fe:	86 95       	lsr	r24
    3300:	86 95       	lsr	r24
    3302:	83 70       	andi	r24, 0x03	; 3
    3304:	98 2f       	mov	r25, r24
    3306:	91 70       	andi	r25, 0x01	; 1
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	62 e0       	ldi	r22, 0x02	; 2
    330c:	49 2f       	mov	r20, r25
    330e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	98 2f       	mov	r25, r24
    3316:	99 1f       	adc	r25, r25
    3318:	99 27       	eor	r25, r25
    331a:	99 1f       	adc	r25, r25
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	63 e0       	ldi	r22, 0x03	; 3
    3320:	49 2f       	mov	r20, r25
    3322:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

		LCD_voidLatchEnable();
    3326:	0e 94 7f 20 	call	0x40fe	; 0x40fe <LCD_voidLatchEnable>

		DIO_enuSetPinVAL(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	98 2f       	mov	r25, r24
    332e:	91 70       	andi	r25, 0x01	; 1
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	49 2f       	mov	r20, r25
    3336:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	86 95       	lsr	r24
    333e:	98 2f       	mov	r25, r24
    3340:	91 70       	andi	r25, 0x01	; 1
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	61 e0       	ldi	r22, 0x01	; 1
    3346:	49 2f       	mov	r20, r25
    3348:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	86 95       	lsr	r24
    3350:	86 95       	lsr	r24
    3352:	98 2f       	mov	r25, r24
    3354:	91 70       	andi	r25, 0x01	; 1
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	62 e0       	ldi	r22, 0x02	; 2
    335a:	49 2f       	mov	r20, r25
    335c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	86 95       	lsr	r24
    3364:	86 95       	lsr	r24
    3366:	86 95       	lsr	r24
    3368:	98 2f       	mov	r25, r24
    336a:	91 70       	andi	r25, 0x01	; 1
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	63 e0       	ldi	r22, 0x03	; 3
    3370:	49 2f       	mov	r20, r25
    3372:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

		LCD_voidLatchEnable();
    3376:	0e 94 7f 20 	call	0x40fe	; 0x40fe <LCD_voidLatchEnable>

	#endif

}
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <LCD_voidInit>:


void LCD_voidInit(void)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	e8 97       	sbiw	r28, 0x38	; 56
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
	/* set lcd pins data as output */
	DIO_enuSetPinDIR(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	41 e0       	ldi	r20, 0x01	; 1
    33a6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	62 e0       	ldi	r22, 0x02	; 2
    33ae:	41 e0       	ldi	r20, 0x01	; 1
    33b0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	63 e0       	ldi	r22, 0x03	; 3
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>

	/* set RS, RW, EN pins  as output */
	DIO_enuSetPinDIR(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	64 e0       	ldi	r22, 0x04	; 4
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	65 e0       	ldi	r22, 0x05	; 5
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	66 e0       	ldi	r22, 0x06	; 6
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>

	/* Init data port & EN by zero */
	DIO_enuSetPinVAL(LCD_EN_PORT, LCD_EN_PIN, DIO_LOW);
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	66 e0       	ldi	r22, 0x06	; 6
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 ef       	ldi	r26, 0xF0	; 240
    33ec:	b1 e4       	ldi	r27, 0x41	; 65
    33ee:	8d ab       	std	Y+53, r24	; 0x35
    33f0:	9e ab       	std	Y+54, r25	; 0x36
    33f2:	af ab       	std	Y+55, r26	; 0x37
    33f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	6d a9       	ldd	r22, Y+53	; 0x35
    33f8:	7e a9       	ldd	r23, Y+54	; 0x36
    33fa:	8f a9       	ldd	r24, Y+55	; 0x37
    33fc:	98 ad       	ldd	r25, Y+56	; 0x38
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a e7       	ldi	r20, 0x7A	; 122
    3404:	53 e4       	ldi	r21, 0x43	; 67
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	89 ab       	std	Y+49, r24	; 0x31
    3410:	9a ab       	std	Y+50, r25	; 0x32
    3412:	ab ab       	std	Y+51, r26	; 0x33
    3414:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3416:	69 a9       	ldd	r22, Y+49	; 0x31
    3418:	7a a9       	ldd	r23, Y+50	; 0x32
    341a:	8b a9       	ldd	r24, Y+51	; 0x33
    341c:	9c a9       	ldd	r25, Y+52	; 0x34
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	2c f4       	brge	.+10     	; 0x3438 <LCD_voidInit+0xb6>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	98 ab       	std	Y+48, r25	; 0x30
    3434:	8f a7       	std	Y+47, r24	; 0x2f
    3436:	3f c0       	rjmp	.+126    	; 0x34b6 <LCD_voidInit+0x134>
	else if (__tmp > 65535)
    3438:	69 a9       	ldd	r22, Y+49	; 0x31
    343a:	7a a9       	ldd	r23, Y+50	; 0x32
    343c:	8b a9       	ldd	r24, Y+51	; 0x33
    343e:	9c a9       	ldd	r25, Y+52	; 0x34
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	4c f5       	brge	.+82     	; 0x34a2 <LCD_voidInit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3450:	6d a9       	ldd	r22, Y+53	; 0x35
    3452:	7e a9       	ldd	r23, Y+54	; 0x36
    3454:	8f a9       	ldd	r24, Y+55	; 0x37
    3456:	98 ad       	ldd	r25, Y+56	; 0x38
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	98 ab       	std	Y+48, r25	; 0x30
    3476:	8f a7       	std	Y+47, r24	; 0x2f
    3478:	0f c0       	rjmp	.+30     	; 0x3498 <LCD_voidInit+0x116>
    347a:	89 e1       	ldi	r24, 0x19	; 25
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	9e a7       	std	Y+46, r25	; 0x2e
    3480:	8d a7       	std	Y+45, r24	; 0x2d
    3482:	8d a5       	ldd	r24, Y+45	; 0x2d
    3484:	9e a5       	ldd	r25, Y+46	; 0x2e
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <LCD_voidInit+0x104>
    348a:	9e a7       	std	Y+46, r25	; 0x2e
    348c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3490:	98 a9       	ldd	r25, Y+48	; 0x30
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	98 ab       	std	Y+48, r25	; 0x30
    3496:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3498:	8f a5       	ldd	r24, Y+47	; 0x2f
    349a:	98 a9       	ldd	r25, Y+48	; 0x30
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	69 f7       	brne	.-38     	; 0x347a <LCD_voidInit+0xf8>
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <LCD_voidInit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a2:	69 a9       	ldd	r22, Y+49	; 0x31
    34a4:	7a a9       	ldd	r23, Y+50	; 0x32
    34a6:	8b a9       	ldd	r24, Y+51	; 0x33
    34a8:	9c a9       	ldd	r25, Y+52	; 0x34
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	98 ab       	std	Y+48, r25	; 0x30
    34b4:	8f a7       	std	Y+47, r24	; 0x2f
    34b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b8:	98 a9       	ldd	r25, Y+48	; 0x30
    34ba:	9c a7       	std	Y+44, r25	; 0x2c
    34bc:	8b a7       	std	Y+43, r24	; 0x2b
    34be:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	f1 f7       	brne	.-4      	; 0x34c2 <LCD_voidInit+0x140>
    34c6:	9c a7       	std	Y+44, r25	; 0x2c
    34c8:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	#elif (LCD_MODE == MODE_4_BIT)

		LCD_voidSendCommand(0x33);
    34ca:	83 e3       	ldi	r24, 0x33	; 51
    34cc:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
		LCD_voidSendCommand(0x32);
    34d0:	82 e3       	ldi	r24, 0x32	; 50
    34d2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
		LCD_voidSendCommand(0x28);
    34d6:	88 e2       	ldi	r24, 0x28	; 40
    34d8:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	a0 e8       	ldi	r26, 0x80	; 128
    34e2:	bf e3       	ldi	r27, 0x3F	; 63
    34e4:	8f a3       	std	Y+39, r24	; 0x27
    34e6:	98 a7       	std	Y+40, r25	; 0x28
    34e8:	a9 a7       	std	Y+41, r26	; 0x29
    34ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ec:	6f a1       	ldd	r22, Y+39	; 0x27
    34ee:	78 a5       	ldd	r23, Y+40	; 0x28
    34f0:	89 a5       	ldd	r24, Y+41	; 0x29
    34f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	4a e7       	ldi	r20, 0x7A	; 122
    34fa:	53 e4       	ldi	r21, 0x43	; 67
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8b a3       	std	Y+35, r24	; 0x23
    3506:	9c a3       	std	Y+36, r25	; 0x24
    3508:	ad a3       	std	Y+37, r26	; 0x25
    350a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    350c:	6b a1       	ldd	r22, Y+35	; 0x23
    350e:	7c a1       	ldd	r23, Y+36	; 0x24
    3510:	8d a1       	ldd	r24, Y+37	; 0x25
    3512:	9e a1       	ldd	r25, Y+38	; 0x26
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e8       	ldi	r20, 0x80	; 128
    351a:	5f e3       	ldi	r21, 0x3F	; 63
    351c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3520:	88 23       	and	r24, r24
    3522:	2c f4       	brge	.+10     	; 0x352e <LCD_voidInit+0x1ac>
		__ticks = 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9a a3       	std	Y+34, r25	; 0x22
    352a:	89 a3       	std	Y+33, r24	; 0x21
    352c:	3f c0       	rjmp	.+126    	; 0x35ac <LCD_voidInit+0x22a>
	else if (__tmp > 65535)
    352e:	6b a1       	ldd	r22, Y+35	; 0x23
    3530:	7c a1       	ldd	r23, Y+36	; 0x24
    3532:	8d a1       	ldd	r24, Y+37	; 0x25
    3534:	9e a1       	ldd	r25, Y+38	; 0x26
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	3f ef       	ldi	r19, 0xFF	; 255
    353a:	4f e7       	ldi	r20, 0x7F	; 127
    353c:	57 e4       	ldi	r21, 0x47	; 71
    353e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3542:	18 16       	cp	r1, r24
    3544:	4c f5       	brge	.+82     	; 0x3598 <LCD_voidInit+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3546:	6f a1       	ldd	r22, Y+39	; 0x27
    3548:	78 a5       	ldd	r23, Y+40	; 0x28
    354a:	89 a5       	ldd	r24, Y+41	; 0x29
    354c:	9a a5       	ldd	r25, Y+42	; 0x2a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e2       	ldi	r20, 0x20	; 32
    3554:	51 e4       	ldi	r21, 0x41	; 65
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9a a3       	std	Y+34, r25	; 0x22
    356c:	89 a3       	std	Y+33, r24	; 0x21
    356e:	0f c0       	rjmp	.+30     	; 0x358e <LCD_voidInit+0x20c>
    3570:	89 e1       	ldi	r24, 0x19	; 25
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	98 a3       	std	Y+32, r25	; 0x20
    3576:	8f 8f       	std	Y+31, r24	; 0x1f
    3578:	8f 8d       	ldd	r24, Y+31	; 0x1f
    357a:	98 a1       	ldd	r25, Y+32	; 0x20
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <LCD_voidInit+0x1fa>
    3580:	98 a3       	std	Y+32, r25	; 0x20
    3582:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3584:	89 a1       	ldd	r24, Y+33	; 0x21
    3586:	9a a1       	ldd	r25, Y+34	; 0x22
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	9a a3       	std	Y+34, r25	; 0x22
    358c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358e:	89 a1       	ldd	r24, Y+33	; 0x21
    3590:	9a a1       	ldd	r25, Y+34	; 0x22
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	69 f7       	brne	.-38     	; 0x3570 <LCD_voidInit+0x1ee>
    3596:	14 c0       	rjmp	.+40     	; 0x35c0 <LCD_voidInit+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3598:	6b a1       	ldd	r22, Y+35	; 0x23
    359a:	7c a1       	ldd	r23, Y+36	; 0x24
    359c:	8d a1       	ldd	r24, Y+37	; 0x25
    359e:	9e a1       	ldd	r25, Y+38	; 0x26
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9a a3       	std	Y+34, r25	; 0x22
    35aa:	89 a3       	std	Y+33, r24	; 0x21
    35ac:	89 a1       	ldd	r24, Y+33	; 0x21
    35ae:	9a a1       	ldd	r25, Y+34	; 0x22
    35b0:	9e 8f       	std	Y+30, r25	; 0x1e
    35b2:	8d 8f       	std	Y+29, r24	; 0x1d
    35b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <LCD_voidInit+0x236>
    35bc:	9e 8f       	std	Y+30, r25	; 0x1e
    35be:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		LCD_voidSendCommand(DISPLAY_ON_OFF);
    35c0:	8e e0       	ldi	r24, 0x0E	; 14
    35c2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a0 e8       	ldi	r26, 0x80	; 128
    35cc:	bf e3       	ldi	r27, 0x3F	; 63
    35ce:	89 8f       	std	Y+25, r24	; 0x19
    35d0:	9a 8f       	std	Y+26, r25	; 0x1a
    35d2:	ab 8f       	std	Y+27, r26	; 0x1b
    35d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d6:	69 8d       	ldd	r22, Y+25	; 0x19
    35d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	4a e7       	ldi	r20, 0x7A	; 122
    35e4:	53 e4       	ldi	r21, 0x43	; 67
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	8d 8b       	std	Y+21, r24	; 0x15
    35f0:	9e 8b       	std	Y+22, r25	; 0x16
    35f2:	af 8b       	std	Y+23, r26	; 0x17
    35f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35f6:	6d 89       	ldd	r22, Y+21	; 0x15
    35f8:	7e 89       	ldd	r23, Y+22	; 0x16
    35fa:	8f 89       	ldd	r24, Y+23	; 0x17
    35fc:	98 8d       	ldd	r25, Y+24	; 0x18
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e8       	ldi	r20, 0x80	; 128
    3604:	5f e3       	ldi	r21, 0x3F	; 63
    3606:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    360a:	88 23       	and	r24, r24
    360c:	2c f4       	brge	.+10     	; 0x3618 <LCD_voidInit+0x296>
		__ticks = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	8b 8b       	std	Y+19, r24	; 0x13
    3616:	3f c0       	rjmp	.+126    	; 0x3696 <LCD_voidInit+0x314>
	else if (__tmp > 65535)
    3618:	6d 89       	ldd	r22, Y+21	; 0x15
    361a:	7e 89       	ldd	r23, Y+22	; 0x16
    361c:	8f 89       	ldd	r24, Y+23	; 0x17
    361e:	98 8d       	ldd	r25, Y+24	; 0x18
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	3f ef       	ldi	r19, 0xFF	; 255
    3624:	4f e7       	ldi	r20, 0x7F	; 127
    3626:	57 e4       	ldi	r21, 0x47	; 71
    3628:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    362c:	18 16       	cp	r1, r24
    362e:	4c f5       	brge	.+82     	; 0x3682 <LCD_voidInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3630:	69 8d       	ldd	r22, Y+25	; 0x19
    3632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e2       	ldi	r20, 0x20	; 32
    363e:	51 e4       	ldi	r21, 0x41	; 65
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9c 8b       	std	Y+20, r25	; 0x14
    3656:	8b 8b       	std	Y+19, r24	; 0x13
    3658:	0f c0       	rjmp	.+30     	; 0x3678 <LCD_voidInit+0x2f6>
    365a:	89 e1       	ldi	r24, 0x19	; 25
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9a 8b       	std	Y+18, r25	; 0x12
    3660:	89 8b       	std	Y+17, r24	; 0x11
    3662:	89 89       	ldd	r24, Y+17	; 0x11
    3664:	9a 89       	ldd	r25, Y+18	; 0x12
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <LCD_voidInit+0x2e4>
    366a:	9a 8b       	std	Y+18, r25	; 0x12
    366c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366e:	8b 89       	ldd	r24, Y+19	; 0x13
    3670:	9c 89       	ldd	r25, Y+20	; 0x14
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	9c 8b       	std	Y+20, r25	; 0x14
    3676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3678:	8b 89       	ldd	r24, Y+19	; 0x13
    367a:	9c 89       	ldd	r25, Y+20	; 0x14
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	69 f7       	brne	.-38     	; 0x365a <LCD_voidInit+0x2d8>
    3680:	14 c0       	rjmp	.+40     	; 0x36aa <LCD_voidInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3682:	6d 89       	ldd	r22, Y+21	; 0x15
    3684:	7e 89       	ldd	r23, Y+22	; 0x16
    3686:	8f 89       	ldd	r24, Y+23	; 0x17
    3688:	98 8d       	ldd	r25, Y+24	; 0x18
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9c 8b       	std	Y+20, r25	; 0x14
    3694:	8b 8b       	std	Y+19, r24	; 0x13
    3696:	8b 89       	ldd	r24, Y+19	; 0x13
    3698:	9c 89       	ldd	r25, Y+20	; 0x14
    369a:	98 8b       	std	Y+16, r25	; 0x10
    369c:	8f 87       	std	Y+15, r24	; 0x0f
    369e:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a0:	98 89       	ldd	r25, Y+16	; 0x10
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <LCD_voidInit+0x320>
    36a6:	98 8b       	std	Y+16, r25	; 0x10
    36a8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_voidSendCommand(DISPLAY_CLEAR);
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	a0 e0       	ldi	r26, 0x00	; 0
    36b6:	b0 e4       	ldi	r27, 0x40	; 64
    36b8:	8b 87       	std	Y+11, r24	; 0x0b
    36ba:	9c 87       	std	Y+12, r25	; 0x0c
    36bc:	ad 87       	std	Y+13, r26	; 0x0d
    36be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a e7       	ldi	r20, 0x7A	; 122
    36ce:	53 e4       	ldi	r21, 0x43	; 67
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8f 83       	std	Y+7, r24	; 0x07
    36da:	98 87       	std	Y+8, r25	; 0x08
    36dc:	a9 87       	std	Y+9, r26	; 0x09
    36de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e0:	6f 81       	ldd	r22, Y+7	; 0x07
    36e2:	78 85       	ldd	r23, Y+8	; 0x08
    36e4:	89 85       	ldd	r24, Y+9	; 0x09
    36e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e8       	ldi	r20, 0x80	; 128
    36ee:	5f e3       	ldi	r21, 0x3F	; 63
    36f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36f4:	88 23       	and	r24, r24
    36f6:	2c f4       	brge	.+10     	; 0x3702 <LCD_voidInit+0x380>
		__ticks = 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
    3700:	3f c0       	rjmp	.+126    	; 0x3780 <LCD_voidInit+0x3fe>
	else if (__tmp > 65535)
    3702:	6f 81       	ldd	r22, Y+7	; 0x07
    3704:	78 85       	ldd	r23, Y+8	; 0x08
    3706:	89 85       	ldd	r24, Y+9	; 0x09
    3708:	9a 85       	ldd	r25, Y+10	; 0x0a
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f e7       	ldi	r20, 0x7F	; 127
    3710:	57 e4       	ldi	r21, 0x47	; 71
    3712:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3716:	18 16       	cp	r1, r24
    3718:	4c f5       	brge	.+82     	; 0x376c <LCD_voidInit+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371a:	6b 85       	ldd	r22, Y+11	; 0x0b
    371c:	7c 85       	ldd	r23, Y+12	; 0x0c
    371e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3720:	9e 85       	ldd	r25, Y+14	; 0x0e
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9e 83       	std	Y+6, r25	; 0x06
    3740:	8d 83       	std	Y+5, r24	; 0x05
    3742:	0f c0       	rjmp	.+30     	; 0x3762 <LCD_voidInit+0x3e0>
    3744:	89 e1       	ldi	r24, 0x19	; 25
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	9c 83       	std	Y+4, r25	; 0x04
    374a:	8b 83       	std	Y+3, r24	; 0x03
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	9c 81       	ldd	r25, Y+4	; 0x04
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <LCD_voidInit+0x3ce>
    3754:	9c 83       	std	Y+4, r25	; 0x04
    3756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3758:	8d 81       	ldd	r24, Y+5	; 0x05
    375a:	9e 81       	ldd	r25, Y+6	; 0x06
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	9e 83       	std	Y+6, r25	; 0x06
    3760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	8d 81       	ldd	r24, Y+5	; 0x05
    3764:	9e 81       	ldd	r25, Y+6	; 0x06
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	69 f7       	brne	.-38     	; 0x3744 <LCD_voidInit+0x3c2>
    376a:	14 c0       	rjmp	.+40     	; 0x3794 <LCD_voidInit+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376c:	6f 81       	ldd	r22, Y+7	; 0x07
    376e:	78 85       	ldd	r23, Y+8	; 0x08
    3770:	89 85       	ldd	r24, Y+9	; 0x09
    3772:	9a 85       	ldd	r25, Y+10	; 0x0a
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9e 83       	std	Y+6, r25	; 0x06
    377e:	8d 83       	std	Y+5, r24	; 0x05
    3780:	8d 81       	ldd	r24, Y+5	; 0x05
    3782:	9e 81       	ldd	r25, Y+6	; 0x06
    3784:	9a 83       	std	Y+2, r25	; 0x02
    3786:	89 83       	std	Y+1, r24	; 0x01
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <LCD_voidInit+0x40a>
    3790:	9a 83       	std	Y+2, r25	; 0x02
    3792:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		LCD_voidSendCommand(ENTRY_MODE);
    3794:	86 e0       	ldi	r24, 0x06	; 6
    3796:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>

	#else
		#error("You have Choosed Wrong LCD Mode")
	#endif
}
    379a:	e8 96       	adiw	r28, 0x38	; 56
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	cf 91       	pop	r28
    37a8:	df 91       	pop	r29
    37aa:	08 95       	ret

000037ac <LCD_voidClearScreen>:


void LCD_voidClearScreen(void)
{
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	2e 97       	sbiw	r28, 0x0e	; 14
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(DISPLAY_CLEAR);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e0       	ldi	r26, 0x00	; 0
    37cc:	b0 e4       	ldi	r27, 0x40	; 64
    37ce:	8b 87       	std	Y+11, r24	; 0x0b
    37d0:	9c 87       	std	Y+12, r25	; 0x0c
    37d2:	ad 87       	std	Y+13, r26	; 0x0d
    37d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a e7       	ldi	r20, 0x7A	; 122
    37e4:	53 e4       	ldi	r21, 0x43	; 67
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	98 87       	std	Y+8, r25	; 0x08
    37f2:	a9 87       	std	Y+9, r26	; 0x09
    37f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <LCD_voidClearScreen+0xcc>
    385a:	89 e1       	ldi	r24, 0x19	; 25
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <LCD_voidClearScreen+0xba>
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <LCD_voidClearScreen+0xae>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6f 81       	ldd	r22, Y+7	; 0x07
    3884:	78 85       	ldd	r23, Y+8	; 0x08
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <LCD_voidClearScreen+0xf6>
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    38aa:	2e 96       	adiw	r28, 0x0e	; 14
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <LCD_voidCursorOff>:


void LCD_voidCursorOff(void)
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	2e 97       	sbiw	r28, 0x0e	; 14
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(CURSOR_OFF);
    38d0:	8c e0       	ldi	r24, 0x0C	; 12
    38d2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	a0 e0       	ldi	r26, 0x00	; 0
    38dc:	b0 e4       	ldi	r27, 0x40	; 64
    38de:	8b 87       	std	Y+11, r24	; 0x0b
    38e0:	9c 87       	std	Y+12, r25	; 0x0c
    38e2:	ad 87       	std	Y+13, r26	; 0x0d
    38e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a e7       	ldi	r20, 0x7A	; 122
    38f4:	53 e4       	ldi	r21, 0x43	; 67
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8f 83       	std	Y+7, r24	; 0x07
    3900:	98 87       	std	Y+8, r25	; 0x08
    3902:	a9 87       	std	Y+9, r26	; 0x09
    3904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3906:	6f 81       	ldd	r22, Y+7	; 0x07
    3908:	78 85       	ldd	r23, Y+8	; 0x08
    390a:	89 85       	ldd	r24, Y+9	; 0x09
    390c:	9a 85       	ldd	r25, Y+10	; 0x0a
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	2c f4       	brge	.+10     	; 0x3928 <LCD_voidCursorOff+0x6c>
		__ticks = 1;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9e 83       	std	Y+6, r25	; 0x06
    3924:	8d 83       	std	Y+5, r24	; 0x05
    3926:	3f c0       	rjmp	.+126    	; 0x39a6 <LCD_voidCursorOff+0xea>
	else if (__tmp > 65535)
    3928:	6f 81       	ldd	r22, Y+7	; 0x07
    392a:	78 85       	ldd	r23, Y+8	; 0x08
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	3f ef       	ldi	r19, 0xFF	; 255
    3934:	4f e7       	ldi	r20, 0x7F	; 127
    3936:	57 e4       	ldi	r21, 0x47	; 71
    3938:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    393c:	18 16       	cp	r1, r24
    393e:	4c f5       	brge	.+82     	; 0x3992 <LCD_voidCursorOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3940:	6b 85       	ldd	r22, Y+11	; 0x0b
    3942:	7c 85       	ldd	r23, Y+12	; 0x0c
    3944:	8d 85       	ldd	r24, Y+13	; 0x0d
    3946:	9e 85       	ldd	r25, Y+14	; 0x0e
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e2       	ldi	r20, 0x20	; 32
    394e:	51 e4       	ldi	r21, 0x41	; 65
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	bc 01       	movw	r22, r24
    395a:	cd 01       	movw	r24, r26
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
    3968:	0f c0       	rjmp	.+30     	; 0x3988 <LCD_voidCursorOff+0xcc>
    396a:	89 e1       	ldi	r24, 0x19	; 25
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9c 83       	std	Y+4, r25	; 0x04
    3970:	8b 83       	std	Y+3, r24	; 0x03
    3972:	8b 81       	ldd	r24, Y+3	; 0x03
    3974:	9c 81       	ldd	r25, Y+4	; 0x04
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <LCD_voidCursorOff+0xba>
    397a:	9c 83       	std	Y+4, r25	; 0x04
    397c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397e:	8d 81       	ldd	r24, Y+5	; 0x05
    3980:	9e 81       	ldd	r25, Y+6	; 0x06
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	69 f7       	brne	.-38     	; 0x396a <LCD_voidCursorOff+0xae>
    3990:	14 c0       	rjmp	.+40     	; 0x39ba <LCD_voidCursorOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3992:	6f 81       	ldd	r22, Y+7	; 0x07
    3994:	78 85       	ldd	r23, Y+8	; 0x08
    3996:	89 85       	ldd	r24, Y+9	; 0x09
    3998:	9a 85       	ldd	r25, Y+10	; 0x0a
    399a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	9e 83       	std	Y+6, r25	; 0x06
    39a4:	8d 83       	std	Y+5, r24	; 0x05
    39a6:	8d 81       	ldd	r24, Y+5	; 0x05
    39a8:	9e 81       	ldd	r25, Y+6	; 0x06
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	9a 81       	ldd	r25, Y+2	; 0x02
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <LCD_voidCursorOff+0xf6>
    39b6:	9a 83       	std	Y+2, r25	; 0x02
    39b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    39ba:	2e 96       	adiw	r28, 0x0e	; 14
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <LCD_voidCursorOn>:


void LCD_voidCursorOn(void)
{
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    39d4:	2e 97       	sbiw	r28, 0x0e	; 14
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	f8 94       	cli
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(CURSOR_ON);
    39e0:	8e e0       	ldi	r24, 0x0E	; 14
    39e2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	a0 e0       	ldi	r26, 0x00	; 0
    39ec:	b0 e4       	ldi	r27, 0x40	; 64
    39ee:	8b 87       	std	Y+11, r24	; 0x0b
    39f0:	9c 87       	std	Y+12, r25	; 0x0c
    39f2:	ad 87       	std	Y+13, r26	; 0x0d
    39f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	4a e7       	ldi	r20, 0x7A	; 122
    3a04:	53 e4       	ldi	r21, 0x43	; 67
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	8f 83       	std	Y+7, r24	; 0x07
    3a10:	98 87       	std	Y+8, r25	; 0x08
    3a12:	a9 87       	std	Y+9, r26	; 0x09
    3a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a16:	6f 81       	ldd	r22, Y+7	; 0x07
    3a18:	78 85       	ldd	r23, Y+8	; 0x08
    3a1a:	89 85       	ldd	r24, Y+9	; 0x09
    3a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e8       	ldi	r20, 0x80	; 128
    3a24:	5f e3       	ldi	r21, 0x3F	; 63
    3a26:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a2a:	88 23       	and	r24, r24
    3a2c:	2c f4       	brge	.+10     	; 0x3a38 <LCD_voidCursorOn+0x6c>
		__ticks = 1;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9e 83       	std	Y+6, r25	; 0x06
    3a34:	8d 83       	std	Y+5, r24	; 0x05
    3a36:	3f c0       	rjmp	.+126    	; 0x3ab6 <LCD_voidCursorOn+0xea>
	else if (__tmp > 65535)
    3a38:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3a:	78 85       	ldd	r23, Y+8	; 0x08
    3a3c:	89 85       	ldd	r24, Y+9	; 0x09
    3a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	3f ef       	ldi	r19, 0xFF	; 255
    3a44:	4f e7       	ldi	r20, 0x7F	; 127
    3a46:	57 e4       	ldi	r21, 0x47	; 71
    3a48:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a4c:	18 16       	cp	r1, r24
    3a4e:	4c f5       	brge	.+82     	; 0x3aa2 <LCD_voidCursorOn+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e2       	ldi	r20, 0x20	; 32
    3a5e:	51 e4       	ldi	r21, 0x41	; 65
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	9e 83       	std	Y+6, r25	; 0x06
    3a76:	8d 83       	std	Y+5, r24	; 0x05
    3a78:	0f c0       	rjmp	.+30     	; 0x3a98 <LCD_voidCursorOn+0xcc>
    3a7a:	89 e1       	ldi	r24, 0x19	; 25
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	9c 83       	std	Y+4, r25	; 0x04
    3a80:	8b 83       	std	Y+3, r24	; 0x03
    3a82:	8b 81       	ldd	r24, Y+3	; 0x03
    3a84:	9c 81       	ldd	r25, Y+4	; 0x04
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <LCD_voidCursorOn+0xba>
    3a8a:	9c 83       	std	Y+4, r25	; 0x04
    3a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a90:	9e 81       	ldd	r25, Y+6	; 0x06
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	9e 83       	std	Y+6, r25	; 0x06
    3a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a98:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	69 f7       	brne	.-38     	; 0x3a7a <LCD_voidCursorOn+0xae>
    3aa0:	14 c0       	rjmp	.+40     	; 0x3aca <LCD_voidCursorOn+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa4:	78 85       	ldd	r23, Y+8	; 0x08
    3aa6:	89 85       	ldd	r24, Y+9	; 0x09
    3aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	9e 83       	std	Y+6, r25	; 0x06
    3ab4:	8d 83       	std	Y+5, r24	; 0x05
    3ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aba:	9a 83       	std	Y+2, r25	; 0x02
    3abc:	89 83       	std	Y+1, r24	; 0x01
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <LCD_voidCursorOn+0xf6>
    3ac6:	9a 83       	std	Y+2, r25	; 0x02
    3ac8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3aca:	2e 96       	adiw	r28, 0x0e	; 14
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	08 95       	ret

00003adc <LCD_voidWriteString>:


void LCD_voidWriteString(char *Copy_cPtrData)
{
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <LCD_voidWriteString+0x6>
    3ae2:	0f 92       	push	r0
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	9b 83       	std	Y+3, r25	; 0x03
    3aea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter = 0;
    3aec:	19 82       	std	Y+1, r1	; 0x01
    3aee:	0e c0       	rjmp	.+28     	; 0x3b0c <LCD_voidWriteString+0x30>

	while(0 != Copy_cPtrData[Local_u8Counter])
	{
		LCD_voidWriteData(Copy_cPtrData[Local_u8Counter]);
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	28 2f       	mov	r18, r24
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	9b 81       	ldd	r25, Y+3	; 0x03
    3afa:	fc 01       	movw	r30, r24
    3afc:	e2 0f       	add	r30, r18
    3afe:	f3 1f       	adc	r31, r19
    3b00:	80 81       	ld	r24, Z
    3b02:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
		Local_u8Counter++;
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	8f 5f       	subi	r24, 0xFF	; 255
    3b0a:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(char *Copy_cPtrData)
{
	uint8 Local_u8Counter = 0;

	while(0 != Copy_cPtrData[Local_u8Counter])
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	fc 01       	movw	r30, r24
    3b18:	e2 0f       	add	r30, r18
    3b1a:	f3 1f       	adc	r31, r19
    3b1c:	80 81       	ld	r24, Z
    3b1e:	88 23       	and	r24, r24
    3b20:	39 f7       	brne	.-50     	; 0x3af0 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteData(Copy_cPtrData[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	08 95       	ret

00003b2e <LCD_voidSetPosition>:


void LCD_voidSetPosition(uint8 Copy_u8Row, uint8 Copy_u8Col)
{
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <LCD_voidSetPosition+0x6>
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	89 83       	std	Y+1, r24	; 0x01
    3b3a:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Copy_u8Row)
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	88 23       	and	r24, r24
    3b40:	29 f4       	brne	.+10     	; 0x3b4c <LCD_voidSetPosition+0x1e>
	{
		/* set ddram */
		LCD_voidSendCommand(LCD_SET_DDRAM_ROW0 + Copy_u8Col);
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	80 58       	subi	r24, 0x80	; 128
    3b46:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    3b4a:	07 c0       	rjmp	.+14     	; 0x3b5a <LCD_voidSetPosition+0x2c>
	}
	else if(1 == Copy_u8Row)
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	81 30       	cpi	r24, 0x01	; 1
    3b50:	21 f4       	brne	.+8      	; 0x3b5a <LCD_voidSetPosition+0x2c>
	{
		/* set ddram */
		LCD_voidSendCommand(LCD_SET_DDRAM_ROW1 + Copy_u8Col);
    3b52:	8a 81       	ldd	r24, Y+2	; 0x02
    3b54:	80 54       	subi	r24, 0x40	; 64
    3b56:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
	}
	else{  /* return error */ }

}
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <LCD_voidDisplayLoop>:


void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, char *Copy_cPtr)
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	a1 97       	sbiw	r28, 0x21	; 33
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	f8 94       	cli
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	0f be       	out	0x3f, r0	; 63
    3b76:	cd bf       	out	0x3d, r28	; 61
    3b78:	8e 8f       	std	Y+30, r24	; 0x1e
    3b7a:	6f 8f       	std	Y+31, r22	; 0x1f
    3b7c:	59 a3       	std	Y+33, r21	; 0x21
    3b7e:	48 a3       	std	Y+32, r20	; 0x20
	uint8 Local_u8Counter = 0;
    3b80:	1d 8e       	std	Y+29, r1	; 0x1d

	for(Local_u8Counter=0; Local_u8Counter<15; Local_u8Counter++)
    3b82:	1d 8e       	std	Y+29, r1	; 0x1d
    3b84:	f9 c0       	rjmp	.+498    	; 0x3d78 <LCD_voidDisplayLoop+0x214>
	{
		LCD_voidSetPosition(Copy_u8Row, Local_u8Counter);
    3b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b88:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b8a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>

		LCD_voidWriteString(Copy_cPtr);
    3b8e:	88 a1       	ldd	r24, Y+32	; 0x20
    3b90:	99 a1       	ldd	r25, Y+33	; 0x21
    3b92:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
		_delay_ms(Copy_u8Speed);
    3b96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	a0 e0       	ldi	r26, 0x00	; 0
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	cd 01       	movw	r24, r26
    3ba4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	89 8f       	std	Y+25, r24	; 0x19
    3bae:	9a 8f       	std	Y+26, r25	; 0x1a
    3bb0:	ab 8f       	std	Y+27, r26	; 0x1b
    3bb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    3bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4a e7       	ldi	r20, 0x7A	; 122
    3bc2:	53 e4       	ldi	r21, 0x43	; 67
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	8d 8b       	std	Y+21, r24	; 0x15
    3bce:	9e 8b       	std	Y+22, r25	; 0x16
    3bd0:	af 8b       	std	Y+23, r26	; 0x17
    3bd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bda:	98 8d       	ldd	r25, Y+24	; 0x18
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e8       	ldi	r20, 0x80	; 128
    3be2:	5f e3       	ldi	r21, 0x3F	; 63
    3be4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3be8:	88 23       	and	r24, r24
    3bea:	2c f4       	brge	.+10     	; 0x3bf6 <LCD_voidDisplayLoop+0x92>
		__ticks = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9c 8b       	std	Y+20, r25	; 0x14
    3bf2:	8b 8b       	std	Y+19, r24	; 0x13
    3bf4:	3f c0       	rjmp	.+126    	; 0x3c74 <LCD_voidDisplayLoop+0x110>
	else if (__tmp > 65535)
    3bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	3f ef       	ldi	r19, 0xFF	; 255
    3c02:	4f e7       	ldi	r20, 0x7F	; 127
    3c04:	57 e4       	ldi	r21, 0x47	; 71
    3c06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c0a:	18 16       	cp	r1, r24
    3c0c:	4c f5       	brge	.+82     	; 0x3c60 <LCD_voidDisplayLoop+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e2       	ldi	r20, 0x20	; 32
    3c1c:	51 e4       	ldi	r21, 0x41	; 65
    3c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	bc 01       	movw	r22, r24
    3c28:	cd 01       	movw	r24, r26
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9c 8b       	std	Y+20, r25	; 0x14
    3c34:	8b 8b       	std	Y+19, r24	; 0x13
    3c36:	0f c0       	rjmp	.+30     	; 0x3c56 <LCD_voidDisplayLoop+0xf2>
    3c38:	89 e1       	ldi	r24, 0x19	; 25
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9a 8b       	std	Y+18, r25	; 0x12
    3c3e:	89 8b       	std	Y+17, r24	; 0x11
    3c40:	89 89       	ldd	r24, Y+17	; 0x11
    3c42:	9a 89       	ldd	r25, Y+18	; 0x12
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <LCD_voidDisplayLoop+0xe0>
    3c48:	9a 8b       	std	Y+18, r25	; 0x12
    3c4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	9c 8b       	std	Y+20, r25	; 0x14
    3c54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c56:	8b 89       	ldd	r24, Y+19	; 0x13
    3c58:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	69 f7       	brne	.-38     	; 0x3c38 <LCD_voidDisplayLoop+0xd4>
    3c5e:	14 c0       	rjmp	.+40     	; 0x3c88 <LCD_voidDisplayLoop+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c60:	6d 89       	ldd	r22, Y+21	; 0x15
    3c62:	7e 89       	ldd	r23, Y+22	; 0x16
    3c64:	8f 89       	ldd	r24, Y+23	; 0x17
    3c66:	98 8d       	ldd	r25, Y+24	; 0x18
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9c 8b       	std	Y+20, r25	; 0x14
    3c72:	8b 8b       	std	Y+19, r24	; 0x13
    3c74:	8b 89       	ldd	r24, Y+19	; 0x13
    3c76:	9c 89       	ldd	r25, Y+20	; 0x14
    3c78:	98 8b       	std	Y+16, r25	; 0x10
    3c7a:	8f 87       	std	Y+15, r24	; 0x0f
    3c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c7e:	98 89       	ldd	r25, Y+16	; 0x10
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	f1 f7       	brne	.-4      	; 0x3c80 <LCD_voidDisplayLoop+0x11c>
    3c84:	98 8b       	std	Y+16, r25	; 0x10
    3c86:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_voidSendCommand(DISPLAY_CLEAR);
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	a0 e0       	ldi	r26, 0x00	; 0
    3c94:	b0 e4       	ldi	r27, 0x40	; 64
    3c96:	8b 87       	std	Y+11, r24	; 0x0b
    3c98:	9c 87       	std	Y+12, r25	; 0x0c
    3c9a:	ad 87       	std	Y+13, r26	; 0x0d
    3c9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	4a e7       	ldi	r20, 0x7A	; 122
    3cac:	53 e4       	ldi	r21, 0x43	; 67
    3cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	8f 83       	std	Y+7, r24	; 0x07
    3cb8:	98 87       	std	Y+8, r25	; 0x08
    3cba:	a9 87       	std	Y+9, r26	; 0x09
    3cbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc0:	78 85       	ldd	r23, Y+8	; 0x08
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	40 e8       	ldi	r20, 0x80	; 128
    3ccc:	5f e3       	ldi	r21, 0x3F	; 63
    3cce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cd2:	88 23       	and	r24, r24
    3cd4:	2c f4       	brge	.+10     	; 0x3ce0 <LCD_voidDisplayLoop+0x17c>
		__ticks = 1;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	9e 83       	std	Y+6, r25	; 0x06
    3cdc:	8d 83       	std	Y+5, r24	; 0x05
    3cde:	3f c0       	rjmp	.+126    	; 0x3d5e <LCD_voidDisplayLoop+0x1fa>
	else if (__tmp > 65535)
    3ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce2:	78 85       	ldd	r23, Y+8	; 0x08
    3ce4:	89 85       	ldd	r24, Y+9	; 0x09
    3ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	3f ef       	ldi	r19, 0xFF	; 255
    3cec:	4f e7       	ldi	r20, 0x7F	; 127
    3cee:	57 e4       	ldi	r21, 0x47	; 71
    3cf0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3cf4:	18 16       	cp	r1, r24
    3cf6:	4c f5       	brge	.+82     	; 0x3d4a <LCD_voidDisplayLoop+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	40 e2       	ldi	r20, 0x20	; 32
    3d06:	51 e4       	ldi	r21, 0x41	; 65
    3d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	bc 01       	movw	r22, r24
    3d12:	cd 01       	movw	r24, r26
    3d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	9e 83       	std	Y+6, r25	; 0x06
    3d1e:	8d 83       	std	Y+5, r24	; 0x05
    3d20:	0f c0       	rjmp	.+30     	; 0x3d40 <LCD_voidDisplayLoop+0x1dc>
    3d22:	89 e1       	ldi	r24, 0x19	; 25
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	9c 83       	std	Y+4, r25	; 0x04
    3d28:	8b 83       	std	Y+3, r24	; 0x03
    3d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	f1 f7       	brne	.-4      	; 0x3d2e <LCD_voidDisplayLoop+0x1ca>
    3d32:	9c 83       	std	Y+4, r25	; 0x04
    3d34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d36:	8d 81       	ldd	r24, Y+5	; 0x05
    3d38:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	9e 83       	std	Y+6, r25	; 0x06
    3d3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d40:	8d 81       	ldd	r24, Y+5	; 0x05
    3d42:	9e 81       	ldd	r25, Y+6	; 0x06
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	69 f7       	brne	.-38     	; 0x3d22 <LCD_voidDisplayLoop+0x1be>
    3d48:	14 c0       	rjmp	.+40     	; 0x3d72 <LCD_voidDisplayLoop+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4c:	78 85       	ldd	r23, Y+8	; 0x08
    3d4e:	89 85       	ldd	r24, Y+9	; 0x09
    3d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	9e 83       	std	Y+6, r25	; 0x06
    3d5c:	8d 83       	std	Y+5, r24	; 0x05
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	9e 81       	ldd	r25, Y+6	; 0x06
    3d62:	9a 83       	std	Y+2, r25	; 0x02
    3d64:	89 83       	std	Y+1, r24	; 0x01
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <LCD_voidDisplayLoop+0x206>
    3d6e:	9a 83       	std	Y+2, r25	; 0x02
    3d70:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, char *Copy_cPtr)
{
	uint8 Local_u8Counter = 0;

	for(Local_u8Counter=0; Local_u8Counter<15; Local_u8Counter++)
    3d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d74:	8f 5f       	subi	r24, 0xFF	; 255
    3d76:	8d 8f       	std	Y+29, r24	; 0x1d
    3d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d7a:	8f 30       	cpi	r24, 0x0F	; 15
    3d7c:	08 f4       	brcc	.+2      	; 0x3d80 <LCD_voidDisplayLoop+0x21c>
    3d7e:	03 cf       	rjmp	.-506    	; 0x3b86 <LCD_voidDisplayLoop+0x22>

		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	}
}
    3d80:	a1 96       	adiw	r28, 0x21	; 33
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	08 95       	ret

00003d92 <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(uint16 Copy_u16Number)
{
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	27 97       	sbiw	r28, 0x07	; 7
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	9f 83       	std	Y+7, r25	; 0x07
    3da8:	8e 83       	std	Y+6, r24	; 0x06
	uint8 Local_u8Counter = 0, Local_u8Digits = 0, Local_u8Current;
    3daa:	1d 82       	std	Y+5, r1	; 0x05
    3dac:	1c 82       	std	Y+4, r1	; 0x04
	uint16 Local_u16CopyNumber = Copy_u16Number;
    3dae:	8e 81       	ldd	r24, Y+6	; 0x06
    3db0:	9f 81       	ldd	r25, Y+7	; 0x07
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	89 83       	std	Y+1, r24	; 0x01

	if(0 == Copy_u16Number)
    3db6:	8e 81       	ldd	r24, Y+6	; 0x06
    3db8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	89 f4       	brne	.+34     	; 0x3de0 <LCD_voidWriteNumber+0x4e>
	{
		LCD_voidWriteData('0');
    3dbe:	80 e3       	ldi	r24, 0x30	; 48
    3dc0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
    3dc4:	48 c0       	rjmp	.+144    	; 0x3e56 <LCD_voidWriteNumber+0xc4>
	}
	else
	{
		while(Local_u16CopyNumber)
		{
			Local_u16CopyNumber /= 10;
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dca:	2a e0       	ldi	r18, 0x0A	; 10
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	b9 01       	movw	r22, r18
    3dd0:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__udivmodhi4>
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
			Local_u8Digits++;
    3dda:	8c 81       	ldd	r24, Y+4	; 0x04
    3ddc:	8f 5f       	subi	r24, 0xFF	; 255
    3dde:	8c 83       	std	Y+4, r24	; 0x04
	{
		LCD_voidWriteData('0');
	}
	else
	{
		while(Local_u16CopyNumber)
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	79 f7       	brne	.-34     	; 0x3dc6 <LCD_voidWriteNumber+0x34>
		{
			Local_u16CopyNumber /= 10;
			Local_u8Digits++;
		}
		Local_u16CopyNumber = Copy_u16Number;
    3de8:	8e 81       	ldd	r24, Y+6	; 0x06
    3dea:	9f 81       	ldd	r25, Y+7	; 0x07
    3dec:	9a 83       	std	Y+2, r25	; 0x02
    3dee:	89 83       	std	Y+1, r24	; 0x01

		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++)
    3df0:	1d 82       	std	Y+5, r1	; 0x05
    3df2:	2d c0       	rjmp	.+90     	; 0x3e4e <LCD_voidWriteNumber+0xbc>
		{
			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    3df4:	9c 81       	ldd	r25, Y+4	; 0x04
    3df6:	8d 81       	ldd	r24, Y+5	; 0x05
    3df8:	29 2f       	mov	r18, r25
    3dfa:	28 1b       	sub	r18, r24
    3dfc:	82 2f       	mov	r24, r18
    3dfe:	98 2f       	mov	r25, r24
    3e00:	91 50       	subi	r25, 0x01	; 1
    3e02:	8a e0       	ldi	r24, 0x0A	; 10
    3e04:	69 2f       	mov	r22, r25
    3e06:	0e 94 4f 20 	call	0x409e	; 0x409e <Private_u16GetPower>
    3e0a:	9c 01       	movw	r18, r24
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e10:	b9 01       	movw	r22, r18
    3e12:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__udivmodhi4>
    3e16:	cb 01       	movw	r24, r22
    3e18:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidWriteData(Local_u8Current + '0');
    3e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1c:	80 5d       	subi	r24, 0xD0	; 208
    3e1e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    3e22:	9c 81       	ldd	r25, Y+4	; 0x04
    3e24:	8d 81       	ldd	r24, Y+5	; 0x05
    3e26:	29 2f       	mov	r18, r25
    3e28:	28 1b       	sub	r18, r24
    3e2a:	82 2f       	mov	r24, r18
    3e2c:	98 2f       	mov	r25, r24
    3e2e:	91 50       	subi	r25, 0x01	; 1
    3e30:	8a e0       	ldi	r24, 0x0A	; 10
    3e32:	69 2f       	mov	r22, r25
    3e34:	0e 94 4f 20 	call	0x409e	; 0x409e <Private_u16GetPower>
    3e38:	9c 01       	movw	r18, r24
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3e:	b9 01       	movw	r22, r18
    3e40:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__udivmodhi4>
    3e44:	9a 83       	std	Y+2, r25	; 0x02
    3e46:	89 83       	std	Y+1, r24	; 0x01
			Local_u16CopyNumber /= 10;
			Local_u8Digits++;
		}
		Local_u16CopyNumber = Copy_u16Number;

		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++)
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	8f 5f       	subi	r24, 0xFF	; 255
    3e4c:	8d 83       	std	Y+5, r24	; 0x05
    3e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e50:	8c 81       	ldd	r24, Y+4	; 0x04
    3e52:	98 17       	cp	r25, r24
    3e54:	78 f2       	brcs	.-98     	; 0x3df4 <LCD_voidWriteNumber+0x62>
			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
			LCD_voidWriteData(Local_u8Current + '0');
			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
		}
	}
}
    3e56:	27 96       	adiw	r28, 0x07	; 7
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <LCD_voidWriteExtraChar>:


void LCD_voidWriteExtraChar(uint8 Copy_u8Row, uint8 Copy_u8Col, char *Copy_PtrData)
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	64 97       	sbiw	r28, 0x14	; 20
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	89 8b       	std	Y+17, r24	; 0x11
    3e7e:	6a 8b       	std	Y+18, r22	; 0x12
    3e80:	5c 8b       	std	Y+20, r21	; 0x14
    3e82:	4b 8b       	std	Y+19, r20	; 0x13
	uint8 Local_u8Iteration1, Local_u8Iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCommand(DDRAM_TO_CGRAM);
    3e84:	80 e4       	ldi	r24, 0x40	; 64
    3e86:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>

	for(Local_u8Iteration1 = 0 ; Local_u8Iteration1 < 64; Local_u8Iteration1++)
    3e8a:	18 8a       	std	Y+16, r1	; 0x10
    3e8c:	0e c0       	rjmp	.+28     	; 0x3eaa <LCD_voidWriteExtraChar+0x42>
	{
		LCD_voidWriteData(Copy_PtrData[Local_u8Iteration1]);
    3e8e:	88 89       	ldd	r24, Y+16	; 0x10
    3e90:	28 2f       	mov	r18, r24
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	8b 89       	ldd	r24, Y+19	; 0x13
    3e96:	9c 89       	ldd	r25, Y+20	; 0x14
    3e98:	fc 01       	movw	r30, r24
    3e9a:	e2 0f       	add	r30, r18
    3e9c:	f3 1f       	adc	r31, r19
    3e9e:	80 81       	ld	r24, Z
    3ea0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
	uint8 Local_u8Iteration1, Local_u8Iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCommand(DDRAM_TO_CGRAM);

	for(Local_u8Iteration1 = 0 ; Local_u8Iteration1 < 64; Local_u8Iteration1++)
    3ea4:	88 89       	ldd	r24, Y+16	; 0x10
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	88 8b       	std	Y+16, r24	; 0x10
    3eaa:	88 89       	ldd	r24, Y+16	; 0x10
    3eac:	80 34       	cpi	r24, 0x40	; 64
    3eae:	78 f3       	brcs	.-34     	; 0x3e8e <LCD_voidWriteExtraChar+0x26>
	{
		LCD_voidWriteData(Copy_PtrData[Local_u8Iteration1]);
	}

	/*CGRAM-->DDRAM*/
	LCD_voidSendCommand(CGRAM_TO_DDRAM);
    3eb0:	80 e8       	ldi	r24, 0x80	; 128
    3eb2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <LCD_voidSendCommand>
	LCD_voidSetPosition(Copy_u8Row, Copy_u8Col);
    3eb6:	89 89       	ldd	r24, Y+17	; 0x11
    3eb8:	6a 89       	ldd	r22, Y+18	; 0x12
    3eba:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>

	/*First eight character which saved at CGRAM*/
	for (Local_u8Iteration2 = 0; Local_u8Iteration2 <= 7; Local_u8Iteration2++)
    3ebe:	1f 86       	std	Y+15, r1	; 0x0f
    3ec0:	78 c0       	rjmp	.+240    	; 0x3fb2 <LCD_voidWriteExtraChar+0x14a>
	{
		/* Write bytes of DDRAM */
		LCD_voidWriteData(Local_u8Iteration2);
    3ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	a0 ea       	ldi	r26, 0xA0	; 160
    3ece:	b0 e4       	ldi	r27, 0x40	; 64
    3ed0:	8b 87       	std	Y+11, r24	; 0x0b
    3ed2:	9c 87       	std	Y+12, r25	; 0x0c
    3ed4:	ad 87       	std	Y+13, r26	; 0x0d
    3ed6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	4a e7       	ldi	r20, 0x7A	; 122
    3ee6:	53 e4       	ldi	r21, 0x43	; 67
    3ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	8f 83       	std	Y+7, r24	; 0x07
    3ef2:	98 87       	std	Y+8, r25	; 0x08
    3ef4:	a9 87       	std	Y+9, r26	; 0x09
    3ef6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    3efa:	78 85       	ldd	r23, Y+8	; 0x08
    3efc:	89 85       	ldd	r24, Y+9	; 0x09
    3efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	40 e8       	ldi	r20, 0x80	; 128
    3f06:	5f e3       	ldi	r21, 0x3F	; 63
    3f08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f0c:	88 23       	and	r24, r24
    3f0e:	2c f4       	brge	.+10     	; 0x3f1a <LCD_voidWriteExtraChar+0xb2>
		__ticks = 1;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
    3f18:	3f c0       	rjmp	.+126    	; 0x3f98 <LCD_voidWriteExtraChar+0x130>
	else if (__tmp > 65535)
    3f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f1c:	78 85       	ldd	r23, Y+8	; 0x08
    3f1e:	89 85       	ldd	r24, Y+9	; 0x09
    3f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	3f ef       	ldi	r19, 0xFF	; 255
    3f26:	4f e7       	ldi	r20, 0x7F	; 127
    3f28:	57 e4       	ldi	r21, 0x47	; 71
    3f2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f2e:	18 16       	cp	r1, r24
    3f30:	4c f5       	brge	.+82     	; 0x3f84 <LCD_voidWriteExtraChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e2       	ldi	r20, 0x20	; 32
    3f40:	51 e4       	ldi	r21, 0x41	; 65
    3f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	bc 01       	movw	r22, r24
    3f4c:	cd 01       	movw	r24, r26
    3f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
    3f5a:	0f c0       	rjmp	.+30     	; 0x3f7a <LCD_voidWriteExtraChar+0x112>
    3f5c:	89 e1       	ldi	r24, 0x19	; 25
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	9c 83       	std	Y+4, r25	; 0x04
    3f62:	8b 83       	std	Y+3, r24	; 0x03
    3f64:	8b 81       	ldd	r24, Y+3	; 0x03
    3f66:	9c 81       	ldd	r25, Y+4	; 0x04
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	f1 f7       	brne	.-4      	; 0x3f68 <LCD_voidWriteExtraChar+0x100>
    3f6c:	9c 83       	std	Y+4, r25	; 0x04
    3f6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f70:	8d 81       	ldd	r24, Y+5	; 0x05
    3f72:	9e 81       	ldd	r25, Y+6	; 0x06
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	9e 83       	std	Y+6, r25	; 0x06
    3f78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7e:	00 97       	sbiw	r24, 0x00	; 0
    3f80:	69 f7       	brne	.-38     	; 0x3f5c <LCD_voidWriteExtraChar+0xf4>
    3f82:	14 c0       	rjmp	.+40     	; 0x3fac <LCD_voidWriteExtraChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f84:	6f 81       	ldd	r22, Y+7	; 0x07
    3f86:	78 85       	ldd	r23, Y+8	; 0x08
    3f88:	89 85       	ldd	r24, Y+9	; 0x09
    3f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	9e 83       	std	Y+6, r25	; 0x06
    3f96:	8d 83       	std	Y+5, r24	; 0x05
    3f98:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9c:	9a 83       	std	Y+2, r25	; 0x02
    3f9e:	89 83       	std	Y+1, r24	; 0x01
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <LCD_voidWriteExtraChar+0x13c>
    3fa8:	9a 83       	std	Y+2, r25	; 0x02
    3faa:	89 83       	std	Y+1, r24	; 0x01
	/*CGRAM-->DDRAM*/
	LCD_voidSendCommand(CGRAM_TO_DDRAM);
	LCD_voidSetPosition(Copy_u8Row, Copy_u8Col);

	/*First eight character which saved at CGRAM*/
	for (Local_u8Iteration2 = 0; Local_u8Iteration2 <= 7; Local_u8Iteration2++)
    3fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fae:	8f 5f       	subi	r24, 0xFF	; 255
    3fb0:	8f 87       	std	Y+15, r24	; 0x0f
    3fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fb4:	88 30       	cpi	r24, 0x08	; 8
    3fb6:	08 f4       	brcc	.+2      	; 0x3fba <LCD_voidWriteExtraChar+0x152>
    3fb8:	84 cf       	rjmp	.-248    	; 0x3ec2 <LCD_voidWriteExtraChar+0x5a>
	{
		/* Write bytes of DDRAM */
		LCD_voidWriteData(Local_u8Iteration2);
		_delay_ms(5);
	}
}
    3fba:	64 96       	adiw	r28, 0x14	; 20
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	cf 91       	pop	r28
    3fc8:	df 91       	pop	r29
    3fca:	08 95       	ret

00003fcc <LCD_voidSendCommand>:



static void LCD_voidSendCommand(uint8 Copy_u8Command)
{
    3fcc:	df 93       	push	r29
    3fce:	cf 93       	push	r28
    3fd0:	0f 92       	push	r0
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinVAL(LCD_RS_PORT, LCD_RS_PIN, DIO_LOW);
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	64 e0       	ldi	r22, 0x04	; 4
    3fdc:	40 e0       	ldi	r20, 0x00	; 0
    3fde:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(LCD_RW_PORT, LCD_RW_PIN, DIO_LOW);
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	65 e0       	ldi	r22, 0x05	; 5
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

		LCD_voidLatchEnable();

	#elif (LCD_MODE == MODE_4_BIT)

		DIO_enuSetPinVAL(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	82 95       	swap	r24
    3ff0:	8f 70       	andi	r24, 0x0F	; 15
    3ff2:	98 2f       	mov	r25, r24
    3ff4:	91 70       	andi	r25, 0x01	; 1
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	49 2f       	mov	r20, r25
    3ffc:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	82 95       	swap	r24
    4004:	86 95       	lsr	r24
    4006:	87 70       	andi	r24, 0x07	; 7
    4008:	98 2f       	mov	r25, r24
    400a:	91 70       	andi	r25, 0x01	; 1
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	61 e0       	ldi	r22, 0x01	; 1
    4010:	49 2f       	mov	r20, r25
    4012:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	82 95       	swap	r24
    401a:	86 95       	lsr	r24
    401c:	86 95       	lsr	r24
    401e:	83 70       	andi	r24, 0x03	; 3
    4020:	98 2f       	mov	r25, r24
    4022:	91 70       	andi	r25, 0x01	; 1
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	62 e0       	ldi	r22, 0x02	; 2
    4028:	49 2f       	mov	r20, r25
    402a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
    402e:	89 81       	ldd	r24, Y+1	; 0x01
    4030:	98 2f       	mov	r25, r24
    4032:	99 1f       	adc	r25, r25
    4034:	99 27       	eor	r25, r25
    4036:	99 1f       	adc	r25, r25
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	63 e0       	ldi	r22, 0x03	; 3
    403c:	49 2f       	mov	r20, r25
    403e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

		LCD_voidLatchEnable();
    4042:	0e 94 7f 20 	call	0x40fe	; 0x40fe <LCD_voidLatchEnable>

		DIO_enuSetPinVAL(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	98 2f       	mov	r25, r24
    404a:	91 70       	andi	r25, 0x01	; 1
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	49 2f       	mov	r20, r25
    4052:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	86 95       	lsr	r24
    405a:	98 2f       	mov	r25, r24
    405c:	91 70       	andi	r25, 0x01	; 1
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	61 e0       	ldi	r22, 0x01	; 1
    4062:	49 2f       	mov	r20, r25
    4064:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	86 95       	lsr	r24
    406c:	86 95       	lsr	r24
    406e:	98 2f       	mov	r25, r24
    4070:	91 70       	andi	r25, 0x01	; 1
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	62 e0       	ldi	r22, 0x02	; 2
    4076:	49 2f       	mov	r20, r25
    4078:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
		DIO_enuSetPinVAL(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	86 95       	lsr	r24
    4080:	86 95       	lsr	r24
    4082:	86 95       	lsr	r24
    4084:	98 2f       	mov	r25, r24
    4086:	91 70       	andi	r25, 0x01	; 1
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	63 e0       	ldi	r22, 0x03	; 3
    408c:	49 2f       	mov	r20, r25
    408e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

		LCD_voidLatchEnable();
    4092:	0e 94 7f 20 	call	0x40fe	; 0x40fe <LCD_voidLatchEnable>

	#endif

}
    4096:	0f 90       	pop	r0
    4098:	cf 91       	pop	r28
    409a:	df 91       	pop	r29
    409c:	08 95       	ret

0000409e <Private_u16GetPower>:


static uint16 Private_u16GetPower(uint8 Copy_u8Number1, uint8 Copy_u8Number2)
{
    409e:	df 93       	push	r29
    40a0:	cf 93       	push	r28
    40a2:	00 d0       	rcall	.+0      	; 0x40a4 <Private_u16GetPower+0x6>
    40a4:	00 d0       	rcall	.+0      	; 0x40a6 <Private_u16GetPower+0x8>
    40a6:	0f 92       	push	r0
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	8c 83       	std	Y+4, r24	; 0x04
    40ae:	6d 83       	std	Y+5, r22	; 0x05
	uint16 Local_u16Result = 1;
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	9b 83       	std	Y+3, r25	; 0x03
    40b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter = 0;
    40b8:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++)
    40ba:	19 82       	std	Y+1, r1	; 0x01
    40bc:	12 c0       	rjmp	.+36     	; 0x40e2 <Private_u16GetPower+0x44>
	{
		Local_u16Result *= Copy_u8Number1;
    40be:	8c 81       	ldd	r24, Y+4	; 0x04
    40c0:	28 2f       	mov	r18, r24
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	8a 81       	ldd	r24, Y+2	; 0x02
    40c6:	9b 81       	ldd	r25, Y+3	; 0x03
    40c8:	ac 01       	movw	r20, r24
    40ca:	42 9f       	mul	r20, r18
    40cc:	c0 01       	movw	r24, r0
    40ce:	43 9f       	mul	r20, r19
    40d0:	90 0d       	add	r25, r0
    40d2:	52 9f       	mul	r21, r18
    40d4:	90 0d       	add	r25, r0
    40d6:	11 24       	eor	r1, r1
    40d8:	9b 83       	std	Y+3, r25	; 0x03
    40da:	8a 83       	std	Y+2, r24	; 0x02
static uint16 Private_u16GetPower(uint8 Copy_u8Number1, uint8 Copy_u8Number2)
{
	uint16 Local_u16Result = 1;
	uint8 Local_u8Counter = 0;

	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++)
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	8f 5f       	subi	r24, 0xFF	; 255
    40e0:	89 83       	std	Y+1, r24	; 0x01
    40e2:	99 81       	ldd	r25, Y+1	; 0x01
    40e4:	8d 81       	ldd	r24, Y+5	; 0x05
    40e6:	98 17       	cp	r25, r24
    40e8:	50 f3       	brcs	.-44     	; 0x40be <Private_u16GetPower+0x20>
	{
		Local_u16Result *= Copy_u8Number1;
	}
	return Local_u16Result;
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	9b 81       	ldd	r25, Y+3	; 0x03
}
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <LCD_voidLatchEnable>:


static void LCD_voidLatchEnable(void)
{
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	6c 97       	sbiw	r28, 0x1c	; 28
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinVAL(LCD_EN_PORT, LCD_EN_PIN, DIO_HIGH);
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	66 e0       	ldi	r22, 0x06	; 6
    4116:	41 e0       	ldi	r20, 0x01	; 1
    4118:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	a0 e8       	ldi	r26, 0x80	; 128
    4122:	bf e3       	ldi	r27, 0x3F	; 63
    4124:	89 8f       	std	Y+25, r24	; 0x19
    4126:	9a 8f       	std	Y+26, r25	; 0x1a
    4128:	ab 8f       	std	Y+27, r26	; 0x1b
    412a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    412c:	69 8d       	ldd	r22, Y+25	; 0x19
    412e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	4a e7       	ldi	r20, 0x7A	; 122
    413a:	53 e4       	ldi	r21, 0x43	; 67
    413c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	8d 8b       	std	Y+21, r24	; 0x15
    4146:	9e 8b       	std	Y+22, r25	; 0x16
    4148:	af 8b       	std	Y+23, r26	; 0x17
    414a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    414c:	6d 89       	ldd	r22, Y+21	; 0x15
    414e:	7e 89       	ldd	r23, Y+22	; 0x16
    4150:	8f 89       	ldd	r24, Y+23	; 0x17
    4152:	98 8d       	ldd	r25, Y+24	; 0x18
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e8       	ldi	r20, 0x80	; 128
    415a:	5f e3       	ldi	r21, 0x3F	; 63
    415c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4160:	88 23       	and	r24, r24
    4162:	2c f4       	brge	.+10     	; 0x416e <LCD_voidLatchEnable+0x70>
		__ticks = 1;
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9c 8b       	std	Y+20, r25	; 0x14
    416a:	8b 8b       	std	Y+19, r24	; 0x13
    416c:	3f c0       	rjmp	.+126    	; 0x41ec <LCD_voidLatchEnable+0xee>
	else if (__tmp > 65535)
    416e:	6d 89       	ldd	r22, Y+21	; 0x15
    4170:	7e 89       	ldd	r23, Y+22	; 0x16
    4172:	8f 89       	ldd	r24, Y+23	; 0x17
    4174:	98 8d       	ldd	r25, Y+24	; 0x18
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	3f ef       	ldi	r19, 0xFF	; 255
    417a:	4f e7       	ldi	r20, 0x7F	; 127
    417c:	57 e4       	ldi	r21, 0x47	; 71
    417e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4182:	18 16       	cp	r1, r24
    4184:	4c f5       	brge	.+82     	; 0x41d8 <LCD_voidLatchEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4186:	69 8d       	ldd	r22, Y+25	; 0x19
    4188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    418a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    418c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9c 8b       	std	Y+20, r25	; 0x14
    41ac:	8b 8b       	std	Y+19, r24	; 0x13
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <LCD_voidLatchEnable+0xd0>
    41b0:	89 e1       	ldi	r24, 0x19	; 25
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	9a 8b       	std	Y+18, r25	; 0x12
    41b6:	89 8b       	std	Y+17, r24	; 0x11
    41b8:	89 89       	ldd	r24, Y+17	; 0x11
    41ba:	9a 89       	ldd	r25, Y+18	; 0x12
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <LCD_voidLatchEnable+0xbe>
    41c0:	9a 8b       	std	Y+18, r25	; 0x12
    41c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c4:	8b 89       	ldd	r24, Y+19	; 0x13
    41c6:	9c 89       	ldd	r25, Y+20	; 0x14
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9c 8b       	std	Y+20, r25	; 0x14
    41cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ce:	8b 89       	ldd	r24, Y+19	; 0x13
    41d0:	9c 89       	ldd	r25, Y+20	; 0x14
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <LCD_voidLatchEnable+0xb2>
    41d6:	14 c0       	rjmp	.+40     	; 0x4200 <LCD_voidLatchEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	6d 89       	ldd	r22, Y+21	; 0x15
    41da:	7e 89       	ldd	r23, Y+22	; 0x16
    41dc:	8f 89       	ldd	r24, Y+23	; 0x17
    41de:	98 8d       	ldd	r25, Y+24	; 0x18
    41e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	9c 8b       	std	Y+20, r25	; 0x14
    41ea:	8b 8b       	std	Y+19, r24	; 0x13
    41ec:	8b 89       	ldd	r24, Y+19	; 0x13
    41ee:	9c 89       	ldd	r25, Y+20	; 0x14
    41f0:	98 8b       	std	Y+16, r25	; 0x10
    41f2:	8f 87       	std	Y+15, r24	; 0x0f
    41f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f6:	98 89       	ldd	r25, Y+16	; 0x10
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <LCD_voidLatchEnable+0xfa>
    41fc:	98 8b       	std	Y+16, r25	; 0x10
    41fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinVAL(LCD_EN_PORT, LCD_EN_PIN, DIO_LOW );
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	66 e0       	ldi	r22, 0x06	; 6
    4204:	40 e0       	ldi	r20, 0x00	; 0
    4206:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	a0 e8       	ldi	r26, 0x80	; 128
    4210:	bf e3       	ldi	r27, 0x3F	; 63
    4212:	8b 87       	std	Y+11, r24	; 0x0b
    4214:	9c 87       	std	Y+12, r25	; 0x0c
    4216:	ad 87       	std	Y+13, r26	; 0x0d
    4218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421a:	6b 85       	ldd	r22, Y+11	; 0x0b
    421c:	7c 85       	ldd	r23, Y+12	; 0x0c
    421e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4220:	9e 85       	ldd	r25, Y+14	; 0x0e
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	4a e7       	ldi	r20, 0x7A	; 122
    4228:	53 e4       	ldi	r21, 0x43	; 67
    422a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	8f 83       	std	Y+7, r24	; 0x07
    4234:	98 87       	std	Y+8, r25	; 0x08
    4236:	a9 87       	std	Y+9, r26	; 0x09
    4238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    423a:	6f 81       	ldd	r22, Y+7	; 0x07
    423c:	78 85       	ldd	r23, Y+8	; 0x08
    423e:	89 85       	ldd	r24, Y+9	; 0x09
    4240:	9a 85       	ldd	r25, Y+10	; 0x0a
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e8       	ldi	r20, 0x80	; 128
    4248:	5f e3       	ldi	r21, 0x3F	; 63
    424a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    424e:	88 23       	and	r24, r24
    4250:	2c f4       	brge	.+10     	; 0x425c <LCD_voidLatchEnable+0x15e>
		__ticks = 1;
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	3f c0       	rjmp	.+126    	; 0x42da <LCD_voidLatchEnable+0x1dc>
	else if (__tmp > 65535)
    425c:	6f 81       	ldd	r22, Y+7	; 0x07
    425e:	78 85       	ldd	r23, Y+8	; 0x08
    4260:	89 85       	ldd	r24, Y+9	; 0x09
    4262:	9a 85       	ldd	r25, Y+10	; 0x0a
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	3f ef       	ldi	r19, 0xFF	; 255
    4268:	4f e7       	ldi	r20, 0x7F	; 127
    426a:	57 e4       	ldi	r21, 0x47	; 71
    426c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4270:	18 16       	cp	r1, r24
    4272:	4c f5       	brge	.+82     	; 0x42c6 <LCD_voidLatchEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4274:	6b 85       	ldd	r22, Y+11	; 0x0b
    4276:	7c 85       	ldd	r23, Y+12	; 0x0c
    4278:	8d 85       	ldd	r24, Y+13	; 0x0d
    427a:	9e 85       	ldd	r25, Y+14	; 0x0e
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e2       	ldi	r20, 0x20	; 32
    4282:	51 e4       	ldi	r21, 0x41	; 65
    4284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	bc 01       	movw	r22, r24
    428e:	cd 01       	movw	r24, r26
    4290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	9e 83       	std	Y+6, r25	; 0x06
    429a:	8d 83       	std	Y+5, r24	; 0x05
    429c:	0f c0       	rjmp	.+30     	; 0x42bc <LCD_voidLatchEnable+0x1be>
    429e:	89 e1       	ldi	r24, 0x19	; 25
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9c 83       	std	Y+4, r25	; 0x04
    42a4:	8b 83       	std	Y+3, r24	; 0x03
    42a6:	8b 81       	ldd	r24, Y+3	; 0x03
    42a8:	9c 81       	ldd	r25, Y+4	; 0x04
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	f1 f7       	brne	.-4      	; 0x42aa <LCD_voidLatchEnable+0x1ac>
    42ae:	9c 83       	std	Y+4, r25	; 0x04
    42b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42bc:	8d 81       	ldd	r24, Y+5	; 0x05
    42be:	9e 81       	ldd	r25, Y+6	; 0x06
    42c0:	00 97       	sbiw	r24, 0x00	; 0
    42c2:	69 f7       	brne	.-38     	; 0x429e <LCD_voidLatchEnable+0x1a0>
    42c4:	14 c0       	rjmp	.+40     	; 0x42ee <LCD_voidLatchEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c6:	6f 81       	ldd	r22, Y+7	; 0x07
    42c8:	78 85       	ldd	r23, Y+8	; 0x08
    42ca:	89 85       	ldd	r24, Y+9	; 0x09
    42cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	9e 81       	ldd	r25, Y+6	; 0x06
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	89 83       	std	Y+1, r24	; 0x01
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <LCD_voidLatchEnable+0x1e8>
    42ea:	9a 83       	std	Y+2, r25	; 0x02
    42ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    42ee:	6c 96       	adiw	r28, 0x1c	; 28
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	f8 94       	cli
    42f4:	de bf       	out	0x3e, r29	; 62
    42f6:	0f be       	out	0x3f, r0	; 63
    42f8:	cd bf       	out	0x3d, r28	; 61
    42fa:	cf 91       	pop	r28
    42fc:	df 91       	pop	r29
    42fe:	08 95       	ret

00004300 <Keypad_enuInit>:
#include"KEYPAD_int.h"
#include"KEYPAD_priv.h"
#include"KEYPAD_config.h"

ES_t Keypad_enuInit(void)
{
    4300:	df 93       	push	r29
    4302:	cf 93       	push	r28
    4304:	0f 92       	push	r0
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPinDIR(C1_PORT,C1_PIN, DIO_PIN_OUTPUT);
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	64 e0       	ldi	r22, 0x04	; 4
    430e:	41 e0       	ldi	r20, 0x01	; 1
    4310:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(C2_PORT,C2_PIN, DIO_PIN_OUTPUT);
    4314:	82 e0       	ldi	r24, 0x02	; 2
    4316:	65 e0       	ldi	r22, 0x05	; 5
    4318:	41 e0       	ldi	r20, 0x01	; 1
    431a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(C3_PORT,C3_PIN, DIO_PIN_OUTPUT);
    431e:	82 e0       	ldi	r24, 0x02	; 2
    4320:	66 e0       	ldi	r22, 0x06	; 6
    4322:	41 e0       	ldi	r20, 0x01	; 1
    4324:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(C4_PORT,C4_PIN, DIO_PIN_OUTPUT);
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	67 e0       	ldi	r22, 0x07	; 7
    432c:	41 e0       	ldi	r20, 0x01	; 1
    432e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>

	DIO_enuSetPinVAL(C1_PORT,C1_PIN, DIO_HIGH);
    4332:	82 e0       	ldi	r24, 0x02	; 2
    4334:	64 e0       	ldi	r22, 0x04	; 4
    4336:	41 e0       	ldi	r20, 0x01	; 1
    4338:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(C2_PORT,C2_PIN, DIO_HIGH);
    433c:	82 e0       	ldi	r24, 0x02	; 2
    433e:	65 e0       	ldi	r22, 0x05	; 5
    4340:	41 e0       	ldi	r20, 0x01	; 1
    4342:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(C3_PORT,C3_PIN, DIO_HIGH);
    4346:	82 e0       	ldi	r24, 0x02	; 2
    4348:	66 e0       	ldi	r22, 0x06	; 6
    434a:	41 e0       	ldi	r20, 0x01	; 1
    434c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(C4_PORT,C4_PIN, DIO_HIGH);
    4350:	82 e0       	ldi	r24, 0x02	; 2
    4352:	67 e0       	ldi	r22, 0x07	; 7
    4354:	41 e0       	ldi	r20, 0x01	; 1
    4356:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>


	DIO_enuSetPinDIR(R1_PORT,R1_PIN, DIO_PIN_INPUT);
    435a:	83 e0       	ldi	r24, 0x03	; 3
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	40 e0       	ldi	r20, 0x00	; 0
    4360:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(R2_PORT,R2_PIN, DIO_PIN_INPUT);
    4364:	83 e0       	ldi	r24, 0x03	; 3
    4366:	61 e0       	ldi	r22, 0x01	; 1
    4368:	40 e0       	ldi	r20, 0x00	; 0
    436a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(R3_PORT,R3_PIN, DIO_PIN_INPUT);
    436e:	82 e0       	ldi	r24, 0x02	; 2
    4370:	62 e0       	ldi	r22, 0x02	; 2
    4372:	40 e0       	ldi	r20, 0x00	; 0
    4374:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(R4_PORT,R4_PIN, DIO_PIN_INPUT);
    4378:	82 e0       	ldi	r24, 0x02	; 2
    437a:	63 e0       	ldi	r22, 0x03	; 3
    437c:	40 e0       	ldi	r20, 0x00	; 0
    437e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>

	DIO_enuSetPinVAL(R1_PORT,R1_PIN, DIO_PULL_UP);
    4382:	83 e0       	ldi	r24, 0x03	; 3
    4384:	60 e0       	ldi	r22, 0x00	; 0
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(R2_PORT,R2_PIN, DIO_PULL_UP);
    438c:	83 e0       	ldi	r24, 0x03	; 3
    438e:	61 e0       	ldi	r22, 0x01	; 1
    4390:	41 e0       	ldi	r20, 0x01	; 1
    4392:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(R3_PORT,R3_PIN, DIO_PULL_UP);
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	62 e0       	ldi	r22, 0x02	; 2
    439a:	41 e0       	ldi	r20, 0x01	; 1
    439c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(R4_PORT,R4_PIN, DIO_PULL_UP);
    43a0:	82 e0       	ldi	r24, 0x02	; 2
    43a2:	63 e0       	ldi	r22, 0x03	; 3
    43a4:	41 e0       	ldi	r20, 0x01	; 1
    43a6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
}
    43aa:	0f 90       	pop	r0
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	08 95       	ret

000043b2 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    43b2:	df 93       	push	r29
    43b4:	cf 93       	push	r28
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
    43ba:	e8 97       	sbiw	r28, 0x38	; 56
    43bc:	0f b6       	in	r0, 0x3f	; 63
    43be:	f8 94       	cli
    43c0:	de bf       	out	0x3e, r29	; 62
    43c2:	0f be       	out	0x3f, r0	; 63
    43c4:	cd bf       	out	0x3d, r28	; 61
    43c6:	9b ab       	std	Y+51, r25	; 0x33
    43c8:	8a ab       	std	Y+50, r24	; 0x32

  u8 local_u8C_Iterator;

  u8 local_u8PIN_VAL;

  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    43ca:	ce 01       	movw	r24, r28
    43cc:	42 96       	adiw	r24, 0x12	; 18
    43ce:	9d ab       	std	Y+53, r25	; 0x35
    43d0:	8c ab       	std	Y+52, r24	; 0x34
    43d2:	e4 ee       	ldi	r30, 0xE4	; 228
    43d4:	f1 e0       	ldi	r31, 0x01	; 1
    43d6:	ff ab       	std	Y+55, r31	; 0x37
    43d8:	ee ab       	std	Y+54, r30	; 0x36
    43da:	f0 e1       	ldi	r31, 0x10	; 16
    43dc:	f8 af       	std	Y+56, r31	; 0x38
    43de:	ee a9       	ldd	r30, Y+54	; 0x36
    43e0:	ff a9       	ldd	r31, Y+55	; 0x37
    43e2:	00 80       	ld	r0, Z
    43e4:	8e a9       	ldd	r24, Y+54	; 0x36
    43e6:	9f a9       	ldd	r25, Y+55	; 0x37
    43e8:	01 96       	adiw	r24, 0x01	; 1
    43ea:	9f ab       	std	Y+55, r25	; 0x37
    43ec:	8e ab       	std	Y+54, r24	; 0x36
    43ee:	ec a9       	ldd	r30, Y+52	; 0x34
    43f0:	fd a9       	ldd	r31, Y+53	; 0x35
    43f2:	00 82       	st	Z, r0
    43f4:	8c a9       	ldd	r24, Y+52	; 0x34
    43f6:	9d a9       	ldd	r25, Y+53	; 0x35
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	9d ab       	std	Y+53, r25	; 0x35
    43fc:	8c ab       	std	Y+52, r24	; 0x34
    43fe:	98 ad       	ldd	r25, Y+56	; 0x38
    4400:	91 50       	subi	r25, 0x01	; 1
    4402:	98 af       	std	Y+56, r25	; 0x38
    4404:	e8 ad       	ldd	r30, Y+56	; 0x38
    4406:	ee 23       	and	r30, r30
    4408:	51 f7       	brne	.-44     	; 0x43de <Keypad_enuGetPressedKey+0x2c>

  u8 local_Au8R_PORT[ROWS_NUM]={R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    440a:	83 e0       	ldi	r24, 0x03	; 3
    440c:	8a a3       	std	Y+34, r24	; 0x22
    440e:	83 e0       	ldi	r24, 0x03	; 3
    4410:	8b a3       	std	Y+35, r24	; 0x23
    4412:	82 e0       	ldi	r24, 0x02	; 2
    4414:	8c a3       	std	Y+36, r24	; 0x24
    4416:	82 e0       	ldi	r24, 0x02	; 2
    4418:	8d a3       	std	Y+37, r24	; 0x25
  u8 local_Au8C_PORT[ROWS_NUM]={C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	8e a3       	std	Y+38, r24	; 0x26
    441e:	82 e0       	ldi	r24, 0x02	; 2
    4420:	8f a3       	std	Y+39, r24	; 0x27
    4422:	82 e0       	ldi	r24, 0x02	; 2
    4424:	88 a7       	std	Y+40, r24	; 0x28
    4426:	82 e0       	ldi	r24, 0x02	; 2
    4428:	89 a7       	std	Y+41, r24	; 0x29

  u8 local_Au8R_PIN[ROWS_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    442a:	1a a6       	std	Y+42, r1	; 0x2a
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	8b a7       	std	Y+43, r24	; 0x2b
    4430:	82 e0       	ldi	r24, 0x02	; 2
    4432:	8c a7       	std	Y+44, r24	; 0x2c
    4434:	83 e0       	ldi	r24, 0x03	; 3
    4436:	8d a7       	std	Y+45, r24	; 0x2d
  u8 local_Au8C_PIN[ROWS_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    4438:	84 e0       	ldi	r24, 0x04	; 4
    443a:	8e a7       	std	Y+46, r24	; 0x2e
    443c:	85 e0       	ldi	r24, 0x05	; 5
    443e:	8f a7       	std	Y+47, r24	; 0x2f
    4440:	86 e0       	ldi	r24, 0x06	; 6
    4442:	88 ab       	std	Y+48, r24	; 0x30
    4444:	87 e0       	ldi	r24, 0x07	; 7
    4446:	89 ab       	std	Y+49, r24	; 0x31


while(1)
{
  for(local_u8C_Iterator=0;local_u8C_Iterator<COLS_NUM;local_u8C_Iterator++)
    4448:	1f 86       	std	Y+15, r1	; 0x0f
    444a:	3d c1       	rjmp	.+634    	; 0x46c6 <Keypad_enuGetPressedKey+0x314>
  {
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_LOW);
    444c:	8f 85       	ldd	r24, Y+15	; 0x0f
    444e:	28 2f       	mov	r18, r24
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	ce 01       	movw	r24, r28
    4454:	86 96       	adiw	r24, 0x26	; 38
    4456:	fc 01       	movw	r30, r24
    4458:	e2 0f       	add	r30, r18
    445a:	f3 1f       	adc	r31, r19
    445c:	40 81       	ld	r20, Z
    445e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	ce 01       	movw	r24, r28
    4466:	8e 96       	adiw	r24, 0x2e	; 46
    4468:	fc 01       	movw	r30, r24
    446a:	e2 0f       	add	r30, r18
    446c:	f3 1f       	adc	r31, r19
    446e:	90 81       	ld	r25, Z
    4470:	84 2f       	mov	r24, r20
    4472:	69 2f       	mov	r22, r25
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>

	  for(local_u8R_Iterator=0;local_u8R_Iterator<ROWS_NUM;local_u8R_Iterator++)
    447a:	18 8a       	std	Y+16, r1	; 0x10
    447c:	06 c1       	rjmp	.+524    	; 0x468a <Keypad_enuGetPressedKey+0x2d8>
	  {
		  DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
    447e:	88 89       	ldd	r24, Y+16	; 0x10
    4480:	28 2f       	mov	r18, r24
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	ce 01       	movw	r24, r28
    4486:	82 96       	adiw	r24, 0x22	; 34
    4488:	fc 01       	movw	r30, r24
    448a:	e2 0f       	add	r30, r18
    448c:	f3 1f       	adc	r31, r19
    448e:	40 81       	ld	r20, Z
    4490:	88 89       	ldd	r24, Y+16	; 0x10
    4492:	28 2f       	mov	r18, r24
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	ce 01       	movw	r24, r28
    4498:	8a 96       	adiw	r24, 0x2a	; 42
    449a:	fc 01       	movw	r30, r24
    449c:	e2 0f       	add	r30, r18
    449e:	f3 1f       	adc	r31, r19
    44a0:	90 81       	ld	r25, Z
    44a2:	9e 01       	movw	r18, r28
    44a4:	2f 5e       	subi	r18, 0xEF	; 239
    44a6:	3f 4f       	sbci	r19, 0xFF	; 255
    44a8:	84 2f       	mov	r24, r20
    44aa:	69 2f       	mov	r22, r25
    44ac:	a9 01       	movw	r20, r18
    44ae:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <DIO_enuGetPinval>
		  if (local_u8PIN_VAL==0)
    44b2:	89 89       	ldd	r24, Y+17	; 0x11
    44b4:	88 23       	and	r24, r24
    44b6:	09 f0       	breq	.+2      	; 0x44ba <Keypad_enuGetPressedKey+0x108>
    44b8:	e5 c0       	rjmp	.+458    	; 0x4684 <Keypad_enuGetPressedKey+0x2d2>
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	a0 e2       	ldi	r26, 0x20	; 32
    44c0:	b1 e4       	ldi	r27, 0x41	; 65
    44c2:	8b 87       	std	Y+11, r24	; 0x0b
    44c4:	9c 87       	std	Y+12, r25	; 0x0c
    44c6:	ad 87       	std	Y+13, r26	; 0x0d
    44c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    44cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	4a e7       	ldi	r20, 0x7A	; 122
    44d8:	53 e4       	ldi	r21, 0x43	; 67
    44da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	8f 83       	std	Y+7, r24	; 0x07
    44e4:	98 87       	std	Y+8, r25	; 0x08
    44e6:	a9 87       	std	Y+9, r26	; 0x09
    44e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ea:	6f 81       	ldd	r22, Y+7	; 0x07
    44ec:	78 85       	ldd	r23, Y+8	; 0x08
    44ee:	89 85       	ldd	r24, Y+9	; 0x09
    44f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e8       	ldi	r20, 0x80	; 128
    44f8:	5f e3       	ldi	r21, 0x3F	; 63
    44fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    44fe:	88 23       	and	r24, r24
    4500:	2c f4       	brge	.+10     	; 0x450c <Keypad_enuGetPressedKey+0x15a>
		__ticks = 1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	9e 83       	std	Y+6, r25	; 0x06
    4508:	8d 83       	std	Y+5, r24	; 0x05
    450a:	3f c0       	rjmp	.+126    	; 0x458a <Keypad_enuGetPressedKey+0x1d8>
	else if (__tmp > 65535)
    450c:	6f 81       	ldd	r22, Y+7	; 0x07
    450e:	78 85       	ldd	r23, Y+8	; 0x08
    4510:	89 85       	ldd	r24, Y+9	; 0x09
    4512:	9a 85       	ldd	r25, Y+10	; 0x0a
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	3f ef       	ldi	r19, 0xFF	; 255
    4518:	4f e7       	ldi	r20, 0x7F	; 127
    451a:	57 e4       	ldi	r21, 0x47	; 71
    451c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4520:	18 16       	cp	r1, r24
    4522:	4c f5       	brge	.+82     	; 0x4576 <Keypad_enuGetPressedKey+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4524:	6b 85       	ldd	r22, Y+11	; 0x0b
    4526:	7c 85       	ldd	r23, Y+12	; 0x0c
    4528:	8d 85       	ldd	r24, Y+13	; 0x0d
    452a:	9e 85       	ldd	r25, Y+14	; 0x0e
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e2       	ldi	r20, 0x20	; 32
    4532:	51 e4       	ldi	r21, 0x41	; 65
    4534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	9e 83       	std	Y+6, r25	; 0x06
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	0f c0       	rjmp	.+30     	; 0x456c <Keypad_enuGetPressedKey+0x1ba>
    454e:	89 e1       	ldi	r24, 0x19	; 25
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	9c 83       	std	Y+4, r25	; 0x04
    4554:	8b 83       	std	Y+3, r24	; 0x03
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	9c 81       	ldd	r25, Y+4	; 0x04
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <Keypad_enuGetPressedKey+0x1a8>
    455e:	9c 83       	std	Y+4, r25	; 0x04
    4560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4562:	8d 81       	ldd	r24, Y+5	; 0x05
    4564:	9e 81       	ldd	r25, Y+6	; 0x06
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	9e 83       	std	Y+6, r25	; 0x06
    456a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456c:	8d 81       	ldd	r24, Y+5	; 0x05
    456e:	9e 81       	ldd	r25, Y+6	; 0x06
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	69 f7       	brne	.-38     	; 0x454e <Keypad_enuGetPressedKey+0x19c>
    4574:	14 c0       	rjmp	.+40     	; 0x459e <Keypad_enuGetPressedKey+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4576:	6f 81       	ldd	r22, Y+7	; 0x07
    4578:	78 85       	ldd	r23, Y+8	; 0x08
    457a:	89 85       	ldd	r24, Y+9	; 0x09
    457c:	9a 85       	ldd	r25, Y+10	; 0x0a
    457e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	9e 81       	ldd	r25, Y+6	; 0x06
    458e:	9a 83       	std	Y+2, r25	; 0x02
    4590:	89 83       	std	Y+1, r24	; 0x01
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	9a 81       	ldd	r25, Y+2	; 0x02
    4596:	01 97       	sbiw	r24, 0x01	; 1
    4598:	f1 f7       	brne	.-4      	; 0x4596 <Keypad_enuGetPressedKey+0x1e4>
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	89 83       	std	Y+1, r24	; 0x01
		  {

			_delay_ms(10);
			DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
    459e:	88 89       	ldd	r24, Y+16	; 0x10
    45a0:	28 2f       	mov	r18, r24
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	ce 01       	movw	r24, r28
    45a6:	82 96       	adiw	r24, 0x22	; 34
    45a8:	fc 01       	movw	r30, r24
    45aa:	e2 0f       	add	r30, r18
    45ac:	f3 1f       	adc	r31, r19
    45ae:	40 81       	ld	r20, Z
    45b0:	88 89       	ldd	r24, Y+16	; 0x10
    45b2:	28 2f       	mov	r18, r24
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	ce 01       	movw	r24, r28
    45b8:	8a 96       	adiw	r24, 0x2a	; 42
    45ba:	fc 01       	movw	r30, r24
    45bc:	e2 0f       	add	r30, r18
    45be:	f3 1f       	adc	r31, r19
    45c0:	90 81       	ld	r25, Z
    45c2:	9e 01       	movw	r18, r28
    45c4:	2f 5e       	subi	r18, 0xEF	; 239
    45c6:	3f 4f       	sbci	r19, 0xFF	; 255
    45c8:	84 2f       	mov	r24, r20
    45ca:	69 2f       	mov	r22, r25
    45cc:	a9 01       	movw	r20, r18
    45ce:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <DIO_enuGetPinval>
			if (local_u8PIN_VAL==0)
    45d2:	89 89       	ldd	r24, Y+17	; 0x11
    45d4:	88 23       	and	r24, r24
    45d6:	09 f0       	breq	.+2      	; 0x45da <Keypad_enuGetPressedKey+0x228>
    45d8:	55 c0       	rjmp	.+170    	; 0x4684 <Keypad_enuGetPressedKey+0x2d2>
    45da:	1a c0       	rjmp	.+52     	; 0x4610 <Keypad_enuGetPressedKey+0x25e>
			{
				while (local_u8PIN_VAL==0)
				{
					DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
    45dc:	88 89       	ldd	r24, Y+16	; 0x10
    45de:	28 2f       	mov	r18, r24
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	ce 01       	movw	r24, r28
    45e4:	82 96       	adiw	r24, 0x22	; 34
    45e6:	fc 01       	movw	r30, r24
    45e8:	e2 0f       	add	r30, r18
    45ea:	f3 1f       	adc	r31, r19
    45ec:	40 81       	ld	r20, Z
    45ee:	88 89       	ldd	r24, Y+16	; 0x10
    45f0:	28 2f       	mov	r18, r24
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	ce 01       	movw	r24, r28
    45f6:	8a 96       	adiw	r24, 0x2a	; 42
    45f8:	fc 01       	movw	r30, r24
    45fa:	e2 0f       	add	r30, r18
    45fc:	f3 1f       	adc	r31, r19
    45fe:	90 81       	ld	r25, Z
    4600:	9e 01       	movw	r18, r28
    4602:	2f 5e       	subi	r18, 0xEF	; 239
    4604:	3f 4f       	sbci	r19, 0xFF	; 255
    4606:	84 2f       	mov	r24, r20
    4608:	69 2f       	mov	r22, r25
    460a:	a9 01       	movw	r20, r18
    460c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <DIO_enuGetPinval>

			_delay_ms(10);
			DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
			if (local_u8PIN_VAL==0)
			{
				while (local_u8PIN_VAL==0)
    4610:	89 89       	ldd	r24, Y+17	; 0x11
    4612:	88 23       	and	r24, r24
    4614:	19 f3       	breq	.-58     	; 0x45dc <Keypad_enuGetPressedKey+0x22a>
				{
					DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
				}
				DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_HIGH);
    4616:	8f 85       	ldd	r24, Y+15	; 0x0f
    4618:	28 2f       	mov	r18, r24
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	ce 01       	movw	r24, r28
    461e:	86 96       	adiw	r24, 0x26	; 38
    4620:	fc 01       	movw	r30, r24
    4622:	e2 0f       	add	r30, r18
    4624:	f3 1f       	adc	r31, r19
    4626:	40 81       	ld	r20, Z
    4628:	8f 85       	ldd	r24, Y+15	; 0x0f
    462a:	28 2f       	mov	r18, r24
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	ce 01       	movw	r24, r28
    4630:	8e 96       	adiw	r24, 0x2e	; 46
    4632:	fc 01       	movw	r30, r24
    4634:	e2 0f       	add	r30, r18
    4636:	f3 1f       	adc	r31, r19
    4638:	90 81       	ld	r25, Z
    463a:	84 2f       	mov	r24, r20
    463c:	69 2f       	mov	r22, r25
    463e:	41 e0       	ldi	r20, 0x01	; 1
    4640:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
				*Copy_pu8KeyValue = Local_Au8KeyValues[local_u8R_Iterator][local_u8C_Iterator];
    4644:	88 89       	ldd	r24, Y+16	; 0x10
    4646:	28 2f       	mov	r18, r24
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	8f 85       	ldd	r24, Y+15	; 0x0f
    464c:	48 2f       	mov	r20, r24
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	22 0f       	add	r18, r18
    4652:	33 1f       	adc	r19, r19
    4654:	22 0f       	add	r18, r18
    4656:	33 1f       	adc	r19, r19
    4658:	ce 01       	movw	r24, r28
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	82 0f       	add	r24, r18
    465e:	93 1f       	adc	r25, r19
    4660:	84 0f       	add	r24, r20
    4662:	95 1f       	adc	r25, r21
    4664:	fc 01       	movw	r30, r24
    4666:	71 96       	adiw	r30, 0x11	; 17
    4668:	80 81       	ld	r24, Z
    466a:	ea a9       	ldd	r30, Y+50	; 0x32
    466c:	fb a9       	ldd	r31, Y+51	; 0x33
    466e:	80 83       	st	Z, r24

				return ES_OK;
    4670:	81 e0       	ldi	r24, 0x01	; 1
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_HIGH);
   }
}


}
    4672:	e8 96       	adiw	r28, 0x38	; 56
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	f8 94       	cli
    4678:	de bf       	out	0x3e, r29	; 62
    467a:	0f be       	out	0x3f, r0	; 63
    467c:	cd bf       	out	0x3d, r28	; 61
    467e:	cf 91       	pop	r28
    4680:	df 91       	pop	r29
    4682:	08 95       	ret
{
  for(local_u8C_Iterator=0;local_u8C_Iterator<COLS_NUM;local_u8C_Iterator++)
  {
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_LOW);

	  for(local_u8R_Iterator=0;local_u8R_Iterator<ROWS_NUM;local_u8R_Iterator++)
    4684:	88 89       	ldd	r24, Y+16	; 0x10
    4686:	8f 5f       	subi	r24, 0xFF	; 255
    4688:	88 8b       	std	Y+16, r24	; 0x10
    468a:	88 89       	ldd	r24, Y+16	; 0x10
    468c:	84 30       	cpi	r24, 0x04	; 4
    468e:	08 f4       	brcc	.+2      	; 0x4692 <Keypad_enuGetPressedKey+0x2e0>
    4690:	f6 ce       	rjmp	.-532    	; 0x447e <Keypad_enuGetPressedKey+0xcc>

				return ES_OK;
			}
		  }
       }
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_HIGH);
    4692:	8f 85       	ldd	r24, Y+15	; 0x0f
    4694:	28 2f       	mov	r18, r24
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	ce 01       	movw	r24, r28
    469a:	86 96       	adiw	r24, 0x26	; 38
    469c:	fc 01       	movw	r30, r24
    469e:	e2 0f       	add	r30, r18
    46a0:	f3 1f       	adc	r31, r19
    46a2:	40 81       	ld	r20, Z
    46a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a6:	28 2f       	mov	r18, r24
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	ce 01       	movw	r24, r28
    46ac:	8e 96       	adiw	r24, 0x2e	; 46
    46ae:	fc 01       	movw	r30, r24
    46b0:	e2 0f       	add	r30, r18
    46b2:	f3 1f       	adc	r31, r19
    46b4:	90 81       	ld	r25, Z
    46b6:	84 2f       	mov	r24, r20
    46b8:	69 2f       	mov	r22, r25
    46ba:	41 e0       	ldi	r20, 0x01	; 1
    46bc:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
  u8 local_Au8C_PIN[ROWS_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};


while(1)
{
  for(local_u8C_Iterator=0;local_u8C_Iterator<COLS_NUM;local_u8C_Iterator++)
    46c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    46c2:	8f 5f       	subi	r24, 0xFF	; 255
    46c4:	8f 87       	std	Y+15, r24	; 0x0f
    46c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46c8:	84 30       	cpi	r24, 0x04	; 4
    46ca:	08 f4       	brcc	.+2      	; 0x46ce <Keypad_enuGetPressedKey+0x31c>
    46cc:	bf ce       	rjmp	.-642    	; 0x444c <Keypad_enuGetPressedKey+0x9a>
    46ce:	bc ce       	rjmp	.-648    	; 0x4448 <Keypad_enuGetPressedKey+0x96>

000046d0 <EEPROM_enuInit>:
#include "EEPROM_int.h"
#include "EEPROM_priv.h"
#include "EEPROM_config.h"

void EEPROM_enuInit(void)
{
    46d0:	0f 93       	push	r16
    46d2:	1f 93       	push	r17
    46d4:	df 93       	push	r29
    46d6:	cf 93       	push	r28
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	c4 55       	subi	r28, 0x54	; 84
    46de:	d0 40       	sbci	r29, 0x00	; 0
    46e0:	0f b6       	in	r0, 0x3f	; 63
    46e2:	f8 94       	cli
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	cd bf       	out	0x3d, r28	; 61
    EEPROM_enuWriteDataByte(50,0); //admin0 id
    46ea:	82 e3       	ldi	r24, 0x32	; 50
    46ec:	60 e0       	ldi	r22, 0x00	; 0
    46ee:	70 e0       	ldi	r23, 0x00	; 0
    46f0:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    46f4:	fe 01       	movw	r30, r28
    46f6:	ef 5a       	subi	r30, 0xAF	; 175
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	a8 e4       	ldi	r26, 0x48	; 72
    4700:	b2 e4       	ldi	r27, 0x42	; 66
    4702:	80 83       	st	Z, r24
    4704:	91 83       	std	Z+1, r25	; 0x01
    4706:	a2 83       	std	Z+2, r26	; 0x02
    4708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470a:	8e 01       	movw	r16, r28
    470c:	03 5b       	subi	r16, 0xB3	; 179
    470e:	1f 4f       	sbci	r17, 0xFF	; 255
    4710:	fe 01       	movw	r30, r28
    4712:	ef 5a       	subi	r30, 0xAF	; 175
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	60 81       	ld	r22, Z
    4718:	71 81       	ldd	r23, Z+1	; 0x01
    471a:	82 81       	ldd	r24, Z+2	; 0x02
    471c:	93 81       	ldd	r25, Z+3	; 0x03
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	4a e7       	ldi	r20, 0x7A	; 122
    4724:	53 e4       	ldi	r21, 0x43	; 67
    4726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	f8 01       	movw	r30, r16
    4730:	80 83       	st	Z, r24
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	a2 83       	std	Z+2, r26	; 0x02
    4736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4738:	fe 01       	movw	r30, r28
    473a:	e3 5b       	subi	r30, 0xB3	; 179
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	60 81       	ld	r22, Z
    4740:	71 81       	ldd	r23, Z+1	; 0x01
    4742:	82 81       	ldd	r24, Z+2	; 0x02
    4744:	93 81       	ldd	r25, Z+3	; 0x03
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e8       	ldi	r20, 0x80	; 128
    474c:	5f e3       	ldi	r21, 0x3F	; 63
    474e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4752:	88 23       	and	r24, r24
    4754:	44 f4       	brge	.+16     	; 0x4766 <EEPROM_enuInit+0x96>
		__ticks = 1;
    4756:	fe 01       	movw	r30, r28
    4758:	e5 5b       	subi	r30, 0xB5	; 181
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	91 83       	std	Z+1, r25	; 0x01
    4762:	80 83       	st	Z, r24
    4764:	64 c0       	rjmp	.+200    	; 0x482e <EEPROM_enuInit+0x15e>
	else if (__tmp > 65535)
    4766:	fe 01       	movw	r30, r28
    4768:	e3 5b       	subi	r30, 0xB3	; 179
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	3f ef       	ldi	r19, 0xFF	; 255
    4778:	4f e7       	ldi	r20, 0x7F	; 127
    477a:	57 e4       	ldi	r21, 0x47	; 71
    477c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4780:	18 16       	cp	r1, r24
    4782:	0c f0       	brlt	.+2      	; 0x4786 <EEPROM_enuInit+0xb6>
    4784:	43 c0       	rjmp	.+134    	; 0x480c <EEPROM_enuInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4786:	fe 01       	movw	r30, r28
    4788:	ef 5a       	subi	r30, 0xAF	; 175
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	60 81       	ld	r22, Z
    478e:	71 81       	ldd	r23, Z+1	; 0x01
    4790:	82 81       	ldd	r24, Z+2	; 0x02
    4792:	93 81       	ldd	r25, Z+3	; 0x03
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e2       	ldi	r20, 0x20	; 32
    479a:	51 e4       	ldi	r21, 0x41	; 65
    479c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a0:	dc 01       	movw	r26, r24
    47a2:	cb 01       	movw	r24, r22
    47a4:	8e 01       	movw	r16, r28
    47a6:	05 5b       	subi	r16, 0xB5	; 181
    47a8:	1f 4f       	sbci	r17, 0xFF	; 255
    47aa:	bc 01       	movw	r22, r24
    47ac:	cd 01       	movw	r24, r26
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	f8 01       	movw	r30, r16
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	80 83       	st	Z, r24
    47bc:	1f c0       	rjmp	.+62     	; 0x47fc <EEPROM_enuInit+0x12c>
    47be:	fe 01       	movw	r30, r28
    47c0:	e7 5b       	subi	r30, 0xB7	; 183
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	89 e1       	ldi	r24, 0x19	; 25
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	91 83       	std	Z+1, r25	; 0x01
    47ca:	80 83       	st	Z, r24
    47cc:	fe 01       	movw	r30, r28
    47ce:	e7 5b       	subi	r30, 0xB7	; 183
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	f1 f7       	brne	.-4      	; 0x47d6 <EEPROM_enuInit+0x106>
    47da:	fe 01       	movw	r30, r28
    47dc:	e7 5b       	subi	r30, 0xB7	; 183
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e4:	de 01       	movw	r26, r28
    47e6:	a5 5b       	subi	r26, 0xB5	; 181
    47e8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ea:	fe 01       	movw	r30, r28
    47ec:	e5 5b       	subi	r30, 0xB5	; 181
    47ee:	ff 4f       	sbci	r31, 0xFF	; 255
    47f0:	80 81       	ld	r24, Z
    47f2:	91 81       	ldd	r25, Z+1	; 0x01
    47f4:	01 97       	sbiw	r24, 0x01	; 1
    47f6:	11 96       	adiw	r26, 0x01	; 1
    47f8:	9c 93       	st	X, r25
    47fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47fc:	fe 01       	movw	r30, r28
    47fe:	e5 5b       	subi	r30, 0xB5	; 181
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 81       	ld	r24, Z
    4804:	91 81       	ldd	r25, Z+1	; 0x01
    4806:	00 97       	sbiw	r24, 0x00	; 0
    4808:	d1 f6       	brne	.-76     	; 0x47be <EEPROM_enuInit+0xee>
    480a:	27 c0       	rjmp	.+78     	; 0x485a <EEPROM_enuInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    480c:	8e 01       	movw	r16, r28
    480e:	05 5b       	subi	r16, 0xB5	; 181
    4810:	1f 4f       	sbci	r17, 0xFF	; 255
    4812:	fe 01       	movw	r30, r28
    4814:	e3 5b       	subi	r30, 0xB3	; 179
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	60 81       	ld	r22, Z
    481a:	71 81       	ldd	r23, Z+1	; 0x01
    481c:	82 81       	ldd	r24, Z+2	; 0x02
    481e:	93 81       	ldd	r25, Z+3	; 0x03
    4820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4824:	dc 01       	movw	r26, r24
    4826:	cb 01       	movw	r24, r22
    4828:	f8 01       	movw	r30, r16
    482a:	91 83       	std	Z+1, r25	; 0x01
    482c:	80 83       	st	Z, r24
    482e:	de 01       	movw	r26, r28
    4830:	a9 5b       	subi	r26, 0xB9	; 185
    4832:	bf 4f       	sbci	r27, 0xFF	; 255
    4834:	fe 01       	movw	r30, r28
    4836:	e5 5b       	subi	r30, 0xB5	; 181
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	8d 93       	st	X+, r24
    4840:	9c 93       	st	X, r25
    4842:	fe 01       	movw	r30, r28
    4844:	e9 5b       	subi	r30, 0xB9	; 185
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	80 81       	ld	r24, Z
    484a:	91 81       	ldd	r25, Z+1	; 0x01
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	f1 f7       	brne	.-4      	; 0x484c <EEPROM_enuInit+0x17c>
    4850:	fe 01       	movw	r30, r28
    4852:	e9 5b       	subi	r30, 0xB9	; 185
    4854:	ff 4f       	sbci	r31, 0xFF	; 255
    4856:	91 83       	std	Z+1, r25	; 0x01
    4858:	80 83       	st	Z, r24
    _delay_ms(50);
    EEPROM_enuWriteDataByte(11,20); //admin0 pass
    485a:	8b e0       	ldi	r24, 0x0B	; 11
    485c:	64 e1       	ldi	r22, 0x14	; 20
    485e:	70 e0       	ldi	r23, 0x00	; 0
    4860:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4864:	fe 01       	movw	r30, r28
    4866:	ed 5b       	subi	r30, 0xBD	; 189
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 e0       	ldi	r24, 0x00	; 0
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	a8 e4       	ldi	r26, 0x48	; 72
    4870:	b2 e4       	ldi	r27, 0x42	; 66
    4872:	80 83       	st	Z, r24
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	a2 83       	std	Z+2, r26	; 0x02
    4878:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    487a:	8e 01       	movw	r16, r28
    487c:	01 5c       	subi	r16, 0xC1	; 193
    487e:	1f 4f       	sbci	r17, 0xFF	; 255
    4880:	fe 01       	movw	r30, r28
    4882:	ed 5b       	subi	r30, 0xBD	; 189
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	60 81       	ld	r22, Z
    4888:	71 81       	ldd	r23, Z+1	; 0x01
    488a:	82 81       	ldd	r24, Z+2	; 0x02
    488c:	93 81       	ldd	r25, Z+3	; 0x03
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	4a e7       	ldi	r20, 0x7A	; 122
    4894:	53 e4       	ldi	r21, 0x43	; 67
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	f8 01       	movw	r30, r16
    48a0:	80 83       	st	Z, r24
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	a2 83       	std	Z+2, r26	; 0x02
    48a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48a8:	fe 01       	movw	r30, r28
    48aa:	ff 96       	adiw	r30, 0x3f	; 63
    48ac:	60 81       	ld	r22, Z
    48ae:	71 81       	ldd	r23, Z+1	; 0x01
    48b0:	82 81       	ldd	r24, Z+2	; 0x02
    48b2:	93 81       	ldd	r25, Z+3	; 0x03
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	40 e8       	ldi	r20, 0x80	; 128
    48ba:	5f e3       	ldi	r21, 0x3F	; 63
    48bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48c0:	88 23       	and	r24, r24
    48c2:	2c f4       	brge	.+10     	; 0x48ce <EEPROM_enuInit+0x1fe>
		__ticks = 1;
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	9e af       	std	Y+62, r25	; 0x3e
    48ca:	8d af       	std	Y+61, r24	; 0x3d
    48cc:	46 c0       	rjmp	.+140    	; 0x495a <EEPROM_enuInit+0x28a>
	else if (__tmp > 65535)
    48ce:	fe 01       	movw	r30, r28
    48d0:	ff 96       	adiw	r30, 0x3f	; 63
    48d2:	60 81       	ld	r22, Z
    48d4:	71 81       	ldd	r23, Z+1	; 0x01
    48d6:	82 81       	ldd	r24, Z+2	; 0x02
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	3f ef       	ldi	r19, 0xFF	; 255
    48de:	4f e7       	ldi	r20, 0x7F	; 127
    48e0:	57 e4       	ldi	r21, 0x47	; 71
    48e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48e6:	18 16       	cp	r1, r24
    48e8:	64 f5       	brge	.+88     	; 0x4942 <EEPROM_enuInit+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ea:	fe 01       	movw	r30, r28
    48ec:	ed 5b       	subi	r30, 0xBD	; 189
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	60 81       	ld	r22, Z
    48f2:	71 81       	ldd	r23, Z+1	; 0x01
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	93 81       	ldd	r25, Z+3	; 0x03
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e2       	ldi	r20, 0x20	; 32
    48fe:	51 e4       	ldi	r21, 0x41	; 65
    4900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	9e af       	std	Y+62, r25	; 0x3e
    4916:	8d af       	std	Y+61, r24	; 0x3d
    4918:	0f c0       	rjmp	.+30     	; 0x4938 <EEPROM_enuInit+0x268>
    491a:	89 e1       	ldi	r24, 0x19	; 25
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	9c af       	std	Y+60, r25	; 0x3c
    4920:	8b af       	std	Y+59, r24	; 0x3b
    4922:	8b ad       	ldd	r24, Y+59	; 0x3b
    4924:	9c ad       	ldd	r25, Y+60	; 0x3c
    4926:	01 97       	sbiw	r24, 0x01	; 1
    4928:	f1 f7       	brne	.-4      	; 0x4926 <EEPROM_enuInit+0x256>
    492a:	9c af       	std	Y+60, r25	; 0x3c
    492c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4930:	9e ad       	ldd	r25, Y+62	; 0x3e
    4932:	01 97       	sbiw	r24, 0x01	; 1
    4934:	9e af       	std	Y+62, r25	; 0x3e
    4936:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4938:	8d ad       	ldd	r24, Y+61	; 0x3d
    493a:	9e ad       	ldd	r25, Y+62	; 0x3e
    493c:	00 97       	sbiw	r24, 0x00	; 0
    493e:	69 f7       	brne	.-38     	; 0x491a <EEPROM_enuInit+0x24a>
    4940:	16 c0       	rjmp	.+44     	; 0x496e <EEPROM_enuInit+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4942:	fe 01       	movw	r30, r28
    4944:	ff 96       	adiw	r30, 0x3f	; 63
    4946:	60 81       	ld	r22, Z
    4948:	71 81       	ldd	r23, Z+1	; 0x01
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	9e af       	std	Y+62, r25	; 0x3e
    4958:	8d af       	std	Y+61, r24	; 0x3d
    495a:	8d ad       	ldd	r24, Y+61	; 0x3d
    495c:	9e ad       	ldd	r25, Y+62	; 0x3e
    495e:	9a af       	std	Y+58, r25	; 0x3a
    4960:	89 af       	std	Y+57, r24	; 0x39
    4962:	89 ad       	ldd	r24, Y+57	; 0x39
    4964:	9a ad       	ldd	r25, Y+58	; 0x3a
    4966:	01 97       	sbiw	r24, 0x01	; 1
    4968:	f1 f7       	brne	.-4      	; 0x4966 <EEPROM_enuInit+0x296>
    496a:	9a af       	std	Y+58, r25	; 0x3a
    496c:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(50);

    EEPROM_enuWriteDataByte(92,40); //user0 id
    496e:	8c e5       	ldi	r24, 0x5C	; 92
    4970:	68 e2       	ldi	r22, 0x28	; 40
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	a8 e4       	ldi	r26, 0x48	; 72
    497e:	b2 e4       	ldi	r27, 0x42	; 66
    4980:	8d ab       	std	Y+53, r24	; 0x35
    4982:	9e ab       	std	Y+54, r25	; 0x36
    4984:	af ab       	std	Y+55, r26	; 0x37
    4986:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4988:	6d a9       	ldd	r22, Y+53	; 0x35
    498a:	7e a9       	ldd	r23, Y+54	; 0x36
    498c:	8f a9       	ldd	r24, Y+55	; 0x37
    498e:	98 ad       	ldd	r25, Y+56	; 0x38
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	4a e7       	ldi	r20, 0x7A	; 122
    4996:	53 e4       	ldi	r21, 0x43	; 67
    4998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	89 ab       	std	Y+49, r24	; 0x31
    49a2:	9a ab       	std	Y+50, r25	; 0x32
    49a4:	ab ab       	std	Y+51, r26	; 0x33
    49a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    49a8:	69 a9       	ldd	r22, Y+49	; 0x31
    49aa:	7a a9       	ldd	r23, Y+50	; 0x32
    49ac:	8b a9       	ldd	r24, Y+51	; 0x33
    49ae:	9c a9       	ldd	r25, Y+52	; 0x34
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	40 e8       	ldi	r20, 0x80	; 128
    49b6:	5f e3       	ldi	r21, 0x3F	; 63
    49b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    49bc:	88 23       	and	r24, r24
    49be:	2c f4       	brge	.+10     	; 0x49ca <EEPROM_enuInit+0x2fa>
		__ticks = 1;
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	98 ab       	std	Y+48, r25	; 0x30
    49c6:	8f a7       	std	Y+47, r24	; 0x2f
    49c8:	3f c0       	rjmp	.+126    	; 0x4a48 <EEPROM_enuInit+0x378>
	else if (__tmp > 65535)
    49ca:	69 a9       	ldd	r22, Y+49	; 0x31
    49cc:	7a a9       	ldd	r23, Y+50	; 0x32
    49ce:	8b a9       	ldd	r24, Y+51	; 0x33
    49d0:	9c a9       	ldd	r25, Y+52	; 0x34
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	3f ef       	ldi	r19, 0xFF	; 255
    49d6:	4f e7       	ldi	r20, 0x7F	; 127
    49d8:	57 e4       	ldi	r21, 0x47	; 71
    49da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    49de:	18 16       	cp	r1, r24
    49e0:	4c f5       	brge	.+82     	; 0x4a34 <EEPROM_enuInit+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e2:	6d a9       	ldd	r22, Y+53	; 0x35
    49e4:	7e a9       	ldd	r23, Y+54	; 0x36
    49e6:	8f a9       	ldd	r24, Y+55	; 0x37
    49e8:	98 ad       	ldd	r25, Y+56	; 0x38
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e2       	ldi	r20, 0x20	; 32
    49f0:	51 e4       	ldi	r21, 0x41	; 65
    49f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	bc 01       	movw	r22, r24
    49fc:	cd 01       	movw	r24, r26
    49fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a02:	dc 01       	movw	r26, r24
    4a04:	cb 01       	movw	r24, r22
    4a06:	98 ab       	std	Y+48, r25	; 0x30
    4a08:	8f a7       	std	Y+47, r24	; 0x2f
    4a0a:	0f c0       	rjmp	.+30     	; 0x4a2a <EEPROM_enuInit+0x35a>
    4a0c:	89 e1       	ldi	r24, 0x19	; 25
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	9e a7       	std	Y+46, r25	; 0x2e
    4a12:	8d a7       	std	Y+45, r24	; 0x2d
    4a14:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a16:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	f1 f7       	brne	.-4      	; 0x4a18 <EEPROM_enuInit+0x348>
    4a1c:	9e a7       	std	Y+46, r25	; 0x2e
    4a1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a22:	98 a9       	ldd	r25, Y+48	; 0x30
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	98 ab       	std	Y+48, r25	; 0x30
    4a28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    4a2e:	00 97       	sbiw	r24, 0x00	; 0
    4a30:	69 f7       	brne	.-38     	; 0x4a0c <EEPROM_enuInit+0x33c>
    4a32:	14 c0       	rjmp	.+40     	; 0x4a5c <EEPROM_enuInit+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a34:	69 a9       	ldd	r22, Y+49	; 0x31
    4a36:	7a a9       	ldd	r23, Y+50	; 0x32
    4a38:	8b a9       	ldd	r24, Y+51	; 0x33
    4a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    4a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	98 ab       	std	Y+48, r25	; 0x30
    4a46:	8f a7       	std	Y+47, r24	; 0x2f
    4a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a4a:	98 a9       	ldd	r25, Y+48	; 0x30
    4a4c:	9c a7       	std	Y+44, r25	; 0x2c
    4a4e:	8b a7       	std	Y+43, r24	; 0x2b
    4a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	f1 f7       	brne	.-4      	; 0x4a54 <EEPROM_enuInit+0x384>
    4a58:	9c a7       	std	Y+44, r25	; 0x2c
    4a5a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(50);
    EEPROM_enuWriteDataByte(15,60); // user0 pass
    4a5c:	8f e0       	ldi	r24, 0x0F	; 15
    4a5e:	6c e3       	ldi	r22, 0x3C	; 60
    4a60:	70 e0       	ldi	r23, 0x00	; 0
    4a62:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	a8 e4       	ldi	r26, 0x48	; 72
    4a6c:	b2 e4       	ldi	r27, 0x42	; 66
    4a6e:	8f a3       	std	Y+39, r24	; 0x27
    4a70:	98 a7       	std	Y+40, r25	; 0x28
    4a72:	a9 a7       	std	Y+41, r26	; 0x29
    4a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a76:	6f a1       	ldd	r22, Y+39	; 0x27
    4a78:	78 a5       	ldd	r23, Y+40	; 0x28
    4a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    4a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	4a e7       	ldi	r20, 0x7A	; 122
    4a84:	53 e4       	ldi	r21, 0x43	; 67
    4a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	8b a3       	std	Y+35, r24	; 0x23
    4a90:	9c a3       	std	Y+36, r25	; 0x24
    4a92:	ad a3       	std	Y+37, r26	; 0x25
    4a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a96:	6b a1       	ldd	r22, Y+35	; 0x23
    4a98:	7c a1       	ldd	r23, Y+36	; 0x24
    4a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    4a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e8       	ldi	r20, 0x80	; 128
    4aa4:	5f e3       	ldi	r21, 0x3F	; 63
    4aa6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4aaa:	88 23       	and	r24, r24
    4aac:	2c f4       	brge	.+10     	; 0x4ab8 <EEPROM_enuInit+0x3e8>
		__ticks = 1;
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	9a a3       	std	Y+34, r25	; 0x22
    4ab4:	89 a3       	std	Y+33, r24	; 0x21
    4ab6:	3f c0       	rjmp	.+126    	; 0x4b36 <EEPROM_enuInit+0x466>
	else if (__tmp > 65535)
    4ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    4aba:	7c a1       	ldd	r23, Y+36	; 0x24
    4abc:	8d a1       	ldd	r24, Y+37	; 0x25
    4abe:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	3f ef       	ldi	r19, 0xFF	; 255
    4ac4:	4f e7       	ldi	r20, 0x7F	; 127
    4ac6:	57 e4       	ldi	r21, 0x47	; 71
    4ac8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4acc:	18 16       	cp	r1, r24
    4ace:	4c f5       	brge	.+82     	; 0x4b22 <EEPROM_enuInit+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    4ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    4ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    4ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	40 e2       	ldi	r20, 0x20	; 32
    4ade:	51 e4       	ldi	r21, 0x41	; 65
    4ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	bc 01       	movw	r22, r24
    4aea:	cd 01       	movw	r24, r26
    4aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	9a a3       	std	Y+34, r25	; 0x22
    4af6:	89 a3       	std	Y+33, r24	; 0x21
    4af8:	0f c0       	rjmp	.+30     	; 0x4b18 <EEPROM_enuInit+0x448>
    4afa:	89 e1       	ldi	r24, 0x19	; 25
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	98 a3       	std	Y+32, r25	; 0x20
    4b00:	8f 8f       	std	Y+31, r24	; 0x1f
    4b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b04:	98 a1       	ldd	r25, Y+32	; 0x20
    4b06:	01 97       	sbiw	r24, 0x01	; 1
    4b08:	f1 f7       	brne	.-4      	; 0x4b06 <EEPROM_enuInit+0x436>
    4b0a:	98 a3       	std	Y+32, r25	; 0x20
    4b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b10:	9a a1       	ldd	r25, Y+34	; 0x22
    4b12:	01 97       	sbiw	r24, 0x01	; 1
    4b14:	9a a3       	std	Y+34, r25	; 0x22
    4b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b18:	89 a1       	ldd	r24, Y+33	; 0x21
    4b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    4b1c:	00 97       	sbiw	r24, 0x00	; 0
    4b1e:	69 f7       	brne	.-38     	; 0x4afa <EEPROM_enuInit+0x42a>
    4b20:	14 c0       	rjmp	.+40     	; 0x4b4a <EEPROM_enuInit+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b22:	6b a1       	ldd	r22, Y+35	; 0x23
    4b24:	7c a1       	ldd	r23, Y+36	; 0x24
    4b26:	8d a1       	ldd	r24, Y+37	; 0x25
    4b28:	9e a1       	ldd	r25, Y+38	; 0x26
    4b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	9a a3       	std	Y+34, r25	; 0x22
    4b34:	89 a3       	std	Y+33, r24	; 0x21
    4b36:	89 a1       	ldd	r24, Y+33	; 0x21
    4b38:	9a a1       	ldd	r25, Y+34	; 0x22
    4b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    4b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    4b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b42:	01 97       	sbiw	r24, 0x01	; 1
    4b44:	f1 f7       	brne	.-4      	; 0x4b42 <EEPROM_enuInit+0x472>
    4b46:	9e 8f       	std	Y+30, r25	; 0x1e
    4b48:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(50);

    EEPROM_enuWriteDataByte(1,90); // number of admins
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	6a e5       	ldi	r22, 0x5A	; 90
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	a8 e4       	ldi	r26, 0x48	; 72
    4b5a:	b2 e4       	ldi	r27, 0x42	; 66
    4b5c:	89 8f       	std	Y+25, r24	; 0x19
    4b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b60:	ab 8f       	std	Y+27, r26	; 0x1b
    4b62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b64:	69 8d       	ldd	r22, Y+25	; 0x19
    4b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	4a e7       	ldi	r20, 0x7A	; 122
    4b72:	53 e4       	ldi	r21, 0x43	; 67
    4b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	8d 8b       	std	Y+21, r24	; 0x15
    4b7e:	9e 8b       	std	Y+22, r25	; 0x16
    4b80:	af 8b       	std	Y+23, r26	; 0x17
    4b82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b84:	6d 89       	ldd	r22, Y+21	; 0x15
    4b86:	7e 89       	ldd	r23, Y+22	; 0x16
    4b88:	8f 89       	ldd	r24, Y+23	; 0x17
    4b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	40 e8       	ldi	r20, 0x80	; 128
    4b92:	5f e3       	ldi	r21, 0x3F	; 63
    4b94:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b98:	88 23       	and	r24, r24
    4b9a:	2c f4       	brge	.+10     	; 0x4ba6 <EEPROM_enuInit+0x4d6>
		__ticks = 1;
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	9c 8b       	std	Y+20, r25	; 0x14
    4ba2:	8b 8b       	std	Y+19, r24	; 0x13
    4ba4:	3f c0       	rjmp	.+126    	; 0x4c24 <EEPROM_enuInit+0x554>
	else if (__tmp > 65535)
    4ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    4baa:	8f 89       	ldd	r24, Y+23	; 0x17
    4bac:	98 8d       	ldd	r25, Y+24	; 0x18
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	3f ef       	ldi	r19, 0xFF	; 255
    4bb2:	4f e7       	ldi	r20, 0x7F	; 127
    4bb4:	57 e4       	ldi	r21, 0x47	; 71
    4bb6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4bba:	18 16       	cp	r1, r24
    4bbc:	4c f5       	brge	.+82     	; 0x4c10 <EEPROM_enuInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    4bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	40 e2       	ldi	r20, 0x20	; 32
    4bcc:	51 e4       	ldi	r21, 0x41	; 65
    4bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	bc 01       	movw	r22, r24
    4bd8:	cd 01       	movw	r24, r26
    4bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bde:	dc 01       	movw	r26, r24
    4be0:	cb 01       	movw	r24, r22
    4be2:	9c 8b       	std	Y+20, r25	; 0x14
    4be4:	8b 8b       	std	Y+19, r24	; 0x13
    4be6:	0f c0       	rjmp	.+30     	; 0x4c06 <EEPROM_enuInit+0x536>
    4be8:	89 e1       	ldi	r24, 0x19	; 25
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	9a 8b       	std	Y+18, r25	; 0x12
    4bee:	89 8b       	std	Y+17, r24	; 0x11
    4bf0:	89 89       	ldd	r24, Y+17	; 0x11
    4bf2:	9a 89       	ldd	r25, Y+18	; 0x12
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	f1 f7       	brne	.-4      	; 0x4bf4 <EEPROM_enuInit+0x524>
    4bf8:	9a 8b       	std	Y+18, r25	; 0x12
    4bfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    4c00:	01 97       	sbiw	r24, 0x01	; 1
    4c02:	9c 8b       	std	Y+20, r25	; 0x14
    4c04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c06:	8b 89       	ldd	r24, Y+19	; 0x13
    4c08:	9c 89       	ldd	r25, Y+20	; 0x14
    4c0a:	00 97       	sbiw	r24, 0x00	; 0
    4c0c:	69 f7       	brne	.-38     	; 0x4be8 <EEPROM_enuInit+0x518>
    4c0e:	14 c0       	rjmp	.+40     	; 0x4c38 <EEPROM_enuInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c10:	6d 89       	ldd	r22, Y+21	; 0x15
    4c12:	7e 89       	ldd	r23, Y+22	; 0x16
    4c14:	8f 89       	ldd	r24, Y+23	; 0x17
    4c16:	98 8d       	ldd	r25, Y+24	; 0x18
    4c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	9c 8b       	std	Y+20, r25	; 0x14
    4c22:	8b 8b       	std	Y+19, r24	; 0x13
    4c24:	8b 89       	ldd	r24, Y+19	; 0x13
    4c26:	9c 89       	ldd	r25, Y+20	; 0x14
    4c28:	98 8b       	std	Y+16, r25	; 0x10
    4c2a:	8f 87       	std	Y+15, r24	; 0x0f
    4c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c2e:	98 89       	ldd	r25, Y+16	; 0x10
    4c30:	01 97       	sbiw	r24, 0x01	; 1
    4c32:	f1 f7       	brne	.-4      	; 0x4c30 <EEPROM_enuInit+0x560>
    4c34:	98 8b       	std	Y+16, r25	; 0x10
    4c36:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(50);
    EEPROM_enuWriteDataByte(1,95); // number of users
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	6f e5       	ldi	r22, 0x5F	; 95
    4c3c:	70 e0       	ldi	r23, 0x00	; 0
    4c3e:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4c42:	80 e0       	ldi	r24, 0x00	; 0
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	a8 e4       	ldi	r26, 0x48	; 72
    4c48:	b2 e4       	ldi	r27, 0x42	; 66
    4c4a:	8b 87       	std	Y+11, r24	; 0x0b
    4c4c:	9c 87       	std	Y+12, r25	; 0x0c
    4c4e:	ad 87       	std	Y+13, r26	; 0x0d
    4c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	4a e7       	ldi	r20, 0x7A	; 122
    4c60:	53 e4       	ldi	r21, 0x43	; 67
    4c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c66:	dc 01       	movw	r26, r24
    4c68:	cb 01       	movw	r24, r22
    4c6a:	8f 83       	std	Y+7, r24	; 0x07
    4c6c:	98 87       	std	Y+8, r25	; 0x08
    4c6e:	a9 87       	std	Y+9, r26	; 0x09
    4c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c72:	6f 81       	ldd	r22, Y+7	; 0x07
    4c74:	78 85       	ldd	r23, Y+8	; 0x08
    4c76:	89 85       	ldd	r24, Y+9	; 0x09
    4c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7a:	20 e0       	ldi	r18, 0x00	; 0
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	40 e8       	ldi	r20, 0x80	; 128
    4c80:	5f e3       	ldi	r21, 0x3F	; 63
    4c82:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c86:	88 23       	and	r24, r24
    4c88:	2c f4       	brge	.+10     	; 0x4c94 <EEPROM_enuInit+0x5c4>
		__ticks = 1;
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	9e 83       	std	Y+6, r25	; 0x06
    4c90:	8d 83       	std	Y+5, r24	; 0x05
    4c92:	3f c0       	rjmp	.+126    	; 0x4d12 <EEPROM_enuInit+0x642>
	else if (__tmp > 65535)
    4c94:	6f 81       	ldd	r22, Y+7	; 0x07
    4c96:	78 85       	ldd	r23, Y+8	; 0x08
    4c98:	89 85       	ldd	r24, Y+9	; 0x09
    4c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c9c:	20 e0       	ldi	r18, 0x00	; 0
    4c9e:	3f ef       	ldi	r19, 0xFF	; 255
    4ca0:	4f e7       	ldi	r20, 0x7F	; 127
    4ca2:	57 e4       	ldi	r21, 0x47	; 71
    4ca4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4ca8:	18 16       	cp	r1, r24
    4caa:	4c f5       	brge	.+82     	; 0x4cfe <EEPROM_enuInit+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	40 e2       	ldi	r20, 0x20	; 32
    4cba:	51 e4       	ldi	r21, 0x41	; 65
    4cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	cb 01       	movw	r24, r22
    4cc4:	bc 01       	movw	r22, r24
    4cc6:	cd 01       	movw	r24, r26
    4cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ccc:	dc 01       	movw	r26, r24
    4cce:	cb 01       	movw	r24, r22
    4cd0:	9e 83       	std	Y+6, r25	; 0x06
    4cd2:	8d 83       	std	Y+5, r24	; 0x05
    4cd4:	0f c0       	rjmp	.+30     	; 0x4cf4 <EEPROM_enuInit+0x624>
    4cd6:	89 e1       	ldi	r24, 0x19	; 25
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	9c 83       	std	Y+4, r25	; 0x04
    4cdc:	8b 83       	std	Y+3, r24	; 0x03
    4cde:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ce2:	01 97       	sbiw	r24, 0x01	; 1
    4ce4:	f1 f7       	brne	.-4      	; 0x4ce2 <EEPROM_enuInit+0x612>
    4ce6:	9c 83       	std	Y+4, r25	; 0x04
    4ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cea:	8d 81       	ldd	r24, Y+5	; 0x05
    4cec:	9e 81       	ldd	r25, Y+6	; 0x06
    4cee:	01 97       	sbiw	r24, 0x01	; 1
    4cf0:	9e 83       	std	Y+6, r25	; 0x06
    4cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf8:	00 97       	sbiw	r24, 0x00	; 0
    4cfa:	69 f7       	brne	.-38     	; 0x4cd6 <EEPROM_enuInit+0x606>
    4cfc:	14 c0       	rjmp	.+40     	; 0x4d26 <EEPROM_enuInit+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    4d00:	78 85       	ldd	r23, Y+8	; 0x08
    4d02:	89 85       	ldd	r24, Y+9	; 0x09
    4d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	9e 83       	std	Y+6, r25	; 0x06
    4d10:	8d 83       	std	Y+5, r24	; 0x05
    4d12:	8d 81       	ldd	r24, Y+5	; 0x05
    4d14:	9e 81       	ldd	r25, Y+6	; 0x06
    4d16:	9a 83       	std	Y+2, r25	; 0x02
    4d18:	89 83       	std	Y+1, r24	; 0x01
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1e:	01 97       	sbiw	r24, 0x01	; 1
    4d20:	f1 f7       	brne	.-4      	; 0x4d1e <EEPROM_enuInit+0x64e>
    4d22:	9a 83       	std	Y+2, r25	; 0x02
    4d24:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50);

}
    4d26:	cc 5a       	subi	r28, 0xAC	; 172
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	cf 91       	pop	r28
    4d36:	df 91       	pop	r29
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	08 95       	ret

00004d3e <EEPROM_enuWriteDataByte>:

ES_t EEPROM_enuWriteDataByte(u8 Copy_u8Data  , u16 Copy_u16Address)
{
    4d3e:	df 93       	push	r29
    4d40:	cf 93       	push	r28
    4d42:	00 d0       	rcall	.+0      	; 0x4d44 <EEPROM_enuWriteDataByte+0x6>
    4d44:	00 d0       	rcall	.+0      	; 0x4d46 <EEPROM_enuWriteDataByte+0x8>
    4d46:	0f 92       	push	r0
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	8b 83       	std	Y+3, r24	; 0x03
    4d4e:	7d 83       	std	Y+5, r23	; 0x05
    4d50:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4d52:	1a 82       	std	Y+2, r1	; 0x02

#if EEPROM_TYPE == EEPROM_24C08_
	SalveAddr=(((0b01010<<3) |EEPROM_PIN_A2_CON | (Copy_u16Address & 0x0300)>>8)) ;

#elif EEPROM_TYPE == EEPROM_24C16_
	SalveAddr= (u8)((0b01010000)|(Copy_u16Address & 0x0700)>>8) ;
    4d54:	8c 81       	ldd	r24, Y+4	; 0x04
    4d56:	9d 81       	ldd	r25, Y+5	; 0x05
    4d58:	80 70       	andi	r24, 0x00	; 0
    4d5a:	97 70       	andi	r25, 0x07	; 7
    4d5c:	89 2f       	mov	r24, r25
    4d5e:	99 27       	eor	r25, r25
    4d60:	80 65       	ori	r24, 0x50	; 80
    4d62:	89 83       	std	Y+1, r24	; 0x01
#endif

	TWI_enuMasterSendStartCondition();
    4d64:	0e 94 53 13 	call	0x26a6	; 0x26a6 <TWI_enuMasterSendStartCondition>

	TWI_enuSendSlaveAddressWithWriteReq(SalveAddr);
    4d68:	89 81       	ldd	r24, Y+1	; 0x01
    4d6a:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_enuSendSlaveAddressWithWriteReq>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    4d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d70:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <TWI_enuMasterWriteDataByte>

	TWI_enuMasterWriteDataByte(Copy_u8Data);
    4d74:	8b 81       	ldd	r24, Y+3	; 0x03
    4d76:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <TWI_enuMasterWriteDataByte>

	TWI_enuMasterSendStopCondition();
    4d7a:	0e 94 48 14 	call	0x2890	; 0x2890 <TWI_enuMasterSendStopCondition>

	return Local_enuErrorState;
    4d7e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	0f 90       	pop	r0
    4d8a:	cf 91       	pop	r28
    4d8c:	df 91       	pop	r29
    4d8e:	08 95       	ret

00004d90 <EEPROM_enuReadDataByte>:


ES_t EEPROM_enuReadDataByte(u8 *Copy_pu8Data , u16 Copy_u16Address)
{
    4d90:	df 93       	push	r29
    4d92:	cf 93       	push	r28
    4d94:	00 d0       	rcall	.+0      	; 0x4d96 <EEPROM_enuReadDataByte+0x6>
    4d96:	00 d0       	rcall	.+0      	; 0x4d98 <EEPROM_enuReadDataByte+0x8>
    4d98:	00 d0       	rcall	.+0      	; 0x4d9a <EEPROM_enuReadDataByte+0xa>
    4d9a:	cd b7       	in	r28, 0x3d	; 61
    4d9c:	de b7       	in	r29, 0x3e	; 62
    4d9e:	9c 83       	std	Y+4, r25	; 0x04
    4da0:	8b 83       	std	Y+3, r24	; 0x03
    4da2:	7e 83       	std	Y+6, r23	; 0x06
    4da4:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    4da6:	1a 82       	std	Y+2, r1	; 0x02

#if EEPROM_TYPE == EEPROM_24C08_
	SalveAddr=(((0b01010<<3) |EEPROM_PIN_A2_CON | (Copy_u16Address & 0x0300)>>8)) ;

#elif EEPROM_TYPE == EEPROM_24C16_
	SalveAddr= (u8)((0b01010000)|(Copy_u16Address & 0x0700)>>8) ;
    4da8:	8d 81       	ldd	r24, Y+5	; 0x05
    4daa:	9e 81       	ldd	r25, Y+6	; 0x06
    4dac:	80 70       	andi	r24, 0x00	; 0
    4dae:	97 70       	andi	r25, 0x07	; 7
    4db0:	89 2f       	mov	r24, r25
    4db2:	99 27       	eor	r25, r25
    4db4:	80 65       	ori	r24, 0x50	; 80
    4db6:	89 83       	std	Y+1, r24	; 0x01
#endif

	TWI_enuMasterSendStartCondition();
    4db8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <TWI_enuMasterSendStartCondition>

	TWI_enuSendSlaveAddressWithWriteReq(SalveAddr);
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_enuSendSlaveAddressWithWriteReq>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    4dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc4:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <TWI_enuMasterWriteDataByte>

	TWI_enuSendReapeatedStart();
    4dc8:	0e 94 76 13 	call	0x26ec	; 0x26ec <TWI_enuSendReapeatedStart>

	TWI_enuSendSlaveAddressWithReadReq(SalveAddr);
    4dcc:	89 81       	ldd	r24, Y+1	; 0x01
    4dce:	0e 94 c3 13 	call	0x2786	; 0x2786 <TWI_enuSendSlaveAddressWithReadReq>

	TWI_enuMasterReadDataByte(Copy_pu8Data);
    4dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd6:	0e 94 1a 14 	call	0x2834	; 0x2834 <TWI_enuMasterReadDataByte>

	TWI_enuMasterSendStopCondition();
    4dda:	0e 94 48 14 	call	0x2890	; 0x2890 <TWI_enuMasterSendStopCondition>

	return Local_enuErrorState;
    4dde:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4de0:	26 96       	adiw	r28, 0x06	; 6
    4de2:	0f b6       	in	r0, 0x3f	; 63
    4de4:	f8 94       	cli
    4de6:	de bf       	out	0x3e, r29	; 62
    4de8:	0f be       	out	0x3f, r0	; 63
    4dea:	cd bf       	out	0x3d, r28	; 61
    4dec:	cf 91       	pop	r28
    4dee:	df 91       	pop	r29
    4df0:	08 95       	ret

00004df2 <DC_Motor_Init>:
#include"../../MCAL/DIO/DIO_Init.h"

#include"DC_Motor_config.h"

void DC_Motor_Init(void)
{
    4df2:	df 93       	push	r29
    4df4:	cf 93       	push	r28
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDIR(Motor_PORT,Motor_PIN,DIO_PIN_OUTPUT);
    4dfa:	83 e0       	ldi	r24, 0x03	; 3
    4dfc:	67 e0       	ldi	r22, 0x07	; 7
    4dfe:	41 e0       	ldi	r20, 0x01	; 1
    4e00:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
}
    4e04:	cf 91       	pop	r28
    4e06:	df 91       	pop	r29
    4e08:	08 95       	ret

00004e0a <DC_Motor_ON>:

void DC_Motor_ON(void)
{
    4e0a:	df 93       	push	r29
    4e0c:	cf 93       	push	r28
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinVAL(Motor_PORT,Motor_PIN,DIO_HIGH);
    4e12:	83 e0       	ldi	r24, 0x03	; 3
    4e14:	67 e0       	ldi	r22, 0x07	; 7
    4e16:	41 e0       	ldi	r20, 0x01	; 1
    4e18:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
}
    4e1c:	cf 91       	pop	r28
    4e1e:	df 91       	pop	r29
    4e20:	08 95       	ret

00004e22 <DC_Motor_OFF>:

void DC_Motor_OFF(void)
{
    4e22:	df 93       	push	r29
    4e24:	cf 93       	push	r28
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinVAL(Motor_PORT,Motor_PIN,DIO_LOW);
    4e2a:	83 e0       	ldi	r24, 0x03	; 3
    4e2c:	67 e0       	ldi	r22, 0x07	; 7
    4e2e:	40 e0       	ldi	r20, 0x00	; 0
    4e30:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <DIO_enuSetPinVAL>
}
    4e34:	cf 91       	pop	r28
    4e36:	df 91       	pop	r29
    4e38:	08 95       	ret

00004e3a <TEMP>:
/*
 * pre: none
 * post: returns a flag indicates if it is urgent mode or not
 */
void TEMP()
{
    4e3a:	df 93       	push	r29
    4e3c:	cf 93       	push	r28
    4e3e:	00 d0       	rcall	.+0      	; 0x4e40 <TEMP+0x6>
    4e40:	cd b7       	in	r28, 0x3d	; 61
    4e42:	de b7       	in	r29, 0x3e	; 62
	u16 temp_value;
	ADC_read(&temp_value);
    4e44:	ce 01       	movw	r24, r28
    4e46:	01 96       	adiw	r24, 0x01	; 1
    4e48:	0e 94 a1 18 	call	0x3142	; 0x3142 <ADC_read>
	temp_value*=0.25;
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	cc 01       	movw	r24, r24
    4e52:	a0 e0       	ldi	r26, 0x00	; 0
    4e54:	b0 e0       	ldi	r27, 0x00	; 0
    4e56:	bc 01       	movw	r22, r24
    4e58:	cd 01       	movw	r24, r26
    4e5a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	bc 01       	movw	r22, r24
    4e64:	cd 01       	movw	r24, r26
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e8       	ldi	r20, 0x80	; 128
    4e6c:	5e e3       	ldi	r21, 0x3E	; 62
    4e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	bc 01       	movw	r22, r24
    4e78:	cd 01       	movw	r24, r26
    4e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7e:	dc 01       	movw	r26, r24
    4e80:	cb 01       	movw	r24, r22
    4e82:	9a 83       	std	Y+2, r25	; 0x02
    4e84:	89 83       	std	Y+1, r24	; 0x01
	if(temp_value>28)
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8a:	8d 31       	cpi	r24, 0x1D	; 29
    4e8c:	91 05       	cpc	r25, r1
    4e8e:	10 f0       	brcs	.+4      	; 0x4e94 <TEMP+0x5a>
	{
		DC_Motor_ON();
    4e90:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <DC_Motor_ON>
	}

	if(temp_value<21)
    4e94:	89 81       	ldd	r24, Y+1	; 0x01
    4e96:	9a 81       	ldd	r25, Y+2	; 0x02
    4e98:	85 31       	cpi	r24, 0x15	; 21
    4e9a:	91 05       	cpc	r25, r1
    4e9c:	10 f4       	brcc	.+4      	; 0x4ea2 <TEMP+0x68>
	{
		DC_Motor_OFF();
    4e9e:	0e 94 11 27 	call	0x4e22	; 0x4e22 <DC_Motor_OFF>
	}
}
    4ea2:	0f 90       	pop	r0
    4ea4:	0f 90       	pop	r0
    4ea6:	cf 91       	pop	r28
    4ea8:	df 91       	pop	r29
    4eaa:	08 95       	ret

00004eac <Add_default_User>:

void Add_default_User()
{
    4eac:	df 93       	push	r29
    4eae:	cf 93       	push	r28
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	aa 97       	sbiw	r28, 0x2a	; 42
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
	EEPROM_enuWriteDataByte(1,40);
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	68 e2       	ldi	r22, 0x28	; 40
    4ec4:	70 e0       	ldi	r23, 0x00	; 0
    4ec6:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	a8 e4       	ldi	r26, 0x48	; 72
    4ed0:	b2 e4       	ldi	r27, 0x42	; 66
    4ed2:	8f a3       	std	Y+39, r24	; 0x27
    4ed4:	98 a7       	std	Y+40, r25	; 0x28
    4ed6:	a9 a7       	std	Y+41, r26	; 0x29
    4ed8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eda:	6f a1       	ldd	r22, Y+39	; 0x27
    4edc:	78 a5       	ldd	r23, Y+40	; 0x28
    4ede:	89 a5       	ldd	r24, Y+41	; 0x29
    4ee0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	4a e7       	ldi	r20, 0x7A	; 122
    4ee8:	53 e4       	ldi	r21, 0x43	; 67
    4eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	8b a3       	std	Y+35, r24	; 0x23
    4ef4:	9c a3       	std	Y+36, r25	; 0x24
    4ef6:	ad a3       	std	Y+37, r26	; 0x25
    4ef8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4efa:	6b a1       	ldd	r22, Y+35	; 0x23
    4efc:	7c a1       	ldd	r23, Y+36	; 0x24
    4efe:	8d a1       	ldd	r24, Y+37	; 0x25
    4f00:	9e a1       	ldd	r25, Y+38	; 0x26
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	40 e8       	ldi	r20, 0x80	; 128
    4f08:	5f e3       	ldi	r21, 0x3F	; 63
    4f0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f0e:	88 23       	and	r24, r24
    4f10:	2c f4       	brge	.+10     	; 0x4f1c <Add_default_User+0x70>
		__ticks = 1;
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	9a a3       	std	Y+34, r25	; 0x22
    4f18:	89 a3       	std	Y+33, r24	; 0x21
    4f1a:	3f c0       	rjmp	.+126    	; 0x4f9a <Add_default_User+0xee>
	else if (__tmp > 65535)
    4f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    4f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    4f20:	8d a1       	ldd	r24, Y+37	; 0x25
    4f22:	9e a1       	ldd	r25, Y+38	; 0x26
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	3f ef       	ldi	r19, 0xFF	; 255
    4f28:	4f e7       	ldi	r20, 0x7F	; 127
    4f2a:	57 e4       	ldi	r21, 0x47	; 71
    4f2c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f30:	18 16       	cp	r1, r24
    4f32:	4c f5       	brge	.+82     	; 0x4f86 <Add_default_User+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f34:	6f a1       	ldd	r22, Y+39	; 0x27
    4f36:	78 a5       	ldd	r23, Y+40	; 0x28
    4f38:	89 a5       	ldd	r24, Y+41	; 0x29
    4f3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	40 e2       	ldi	r20, 0x20	; 32
    4f42:	51 e4       	ldi	r21, 0x41	; 65
    4f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	bc 01       	movw	r22, r24
    4f4e:	cd 01       	movw	r24, r26
    4f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f54:	dc 01       	movw	r26, r24
    4f56:	cb 01       	movw	r24, r22
    4f58:	9a a3       	std	Y+34, r25	; 0x22
    4f5a:	89 a3       	std	Y+33, r24	; 0x21
    4f5c:	0f c0       	rjmp	.+30     	; 0x4f7c <Add_default_User+0xd0>
    4f5e:	89 e1       	ldi	r24, 0x19	; 25
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	98 a3       	std	Y+32, r25	; 0x20
    4f64:	8f 8f       	std	Y+31, r24	; 0x1f
    4f66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f68:	98 a1       	ldd	r25, Y+32	; 0x20
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	f1 f7       	brne	.-4      	; 0x4f6a <Add_default_User+0xbe>
    4f6e:	98 a3       	std	Y+32, r25	; 0x20
    4f70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f72:	89 a1       	ldd	r24, Y+33	; 0x21
    4f74:	9a a1       	ldd	r25, Y+34	; 0x22
    4f76:	01 97       	sbiw	r24, 0x01	; 1
    4f78:	9a a3       	std	Y+34, r25	; 0x22
    4f7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f80:	00 97       	sbiw	r24, 0x00	; 0
    4f82:	69 f7       	brne	.-38     	; 0x4f5e <Add_default_User+0xb2>
    4f84:	14 c0       	rjmp	.+40     	; 0x4fae <Add_default_User+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f86:	6b a1       	ldd	r22, Y+35	; 0x23
    4f88:	7c a1       	ldd	r23, Y+36	; 0x24
    4f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	9a a3       	std	Y+34, r25	; 0x22
    4f98:	89 a3       	std	Y+33, r24	; 0x21
    4f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    4fa0:	8d 8f       	std	Y+29, r24	; 0x1d
    4fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fa6:	01 97       	sbiw	r24, 0x01	; 1
    4fa8:	f1 f7       	brne	.-4      	; 0x4fa6 <Add_default_User+0xfa>
    4faa:	9e 8f       	std	Y+30, r25	; 0x1e
    4fac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	EEPROM_enuWriteDataByte(77,60);
    4fae:	8d e4       	ldi	r24, 0x4D	; 77
    4fb0:	6c e3       	ldi	r22, 0x3C	; 60
    4fb2:	70 e0       	ldi	r23, 0x00	; 0
    4fb4:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	a8 e4       	ldi	r26, 0x48	; 72
    4fbe:	b2 e4       	ldi	r27, 0x42	; 66
    4fc0:	89 8f       	std	Y+25, r24	; 0x19
    4fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    4fc4:	ab 8f       	std	Y+27, r26	; 0x1b
    4fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    4fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fd0:	20 e0       	ldi	r18, 0x00	; 0
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	4a e7       	ldi	r20, 0x7A	; 122
    4fd6:	53 e4       	ldi	r21, 0x43	; 67
    4fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	8d 8b       	std	Y+21, r24	; 0x15
    4fe2:	9e 8b       	std	Y+22, r25	; 0x16
    4fe4:	af 8b       	std	Y+23, r26	; 0x17
    4fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    4fea:	7e 89       	ldd	r23, Y+22	; 0x16
    4fec:	8f 89       	ldd	r24, Y+23	; 0x17
    4fee:	98 8d       	ldd	r25, Y+24	; 0x18
    4ff0:	20 e0       	ldi	r18, 0x00	; 0
    4ff2:	30 e0       	ldi	r19, 0x00	; 0
    4ff4:	40 e8       	ldi	r20, 0x80	; 128
    4ff6:	5f e3       	ldi	r21, 0x3F	; 63
    4ff8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ffc:	88 23       	and	r24, r24
    4ffe:	2c f4       	brge	.+10     	; 0x500a <Add_default_User+0x15e>
		__ticks = 1;
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	9c 8b       	std	Y+20, r25	; 0x14
    5006:	8b 8b       	std	Y+19, r24	; 0x13
    5008:	3f c0       	rjmp	.+126    	; 0x5088 <Add_default_User+0x1dc>
	else if (__tmp > 65535)
    500a:	6d 89       	ldd	r22, Y+21	; 0x15
    500c:	7e 89       	ldd	r23, Y+22	; 0x16
    500e:	8f 89       	ldd	r24, Y+23	; 0x17
    5010:	98 8d       	ldd	r25, Y+24	; 0x18
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	3f ef       	ldi	r19, 0xFF	; 255
    5016:	4f e7       	ldi	r20, 0x7F	; 127
    5018:	57 e4       	ldi	r21, 0x47	; 71
    501a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    501e:	18 16       	cp	r1, r24
    5020:	4c f5       	brge	.+82     	; 0x5074 <Add_default_User+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5022:	69 8d       	ldd	r22, Y+25	; 0x19
    5024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	40 e2       	ldi	r20, 0x20	; 32
    5030:	51 e4       	ldi	r21, 0x41	; 65
    5032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5036:	dc 01       	movw	r26, r24
    5038:	cb 01       	movw	r24, r22
    503a:	bc 01       	movw	r22, r24
    503c:	cd 01       	movw	r24, r26
    503e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5042:	dc 01       	movw	r26, r24
    5044:	cb 01       	movw	r24, r22
    5046:	9c 8b       	std	Y+20, r25	; 0x14
    5048:	8b 8b       	std	Y+19, r24	; 0x13
    504a:	0f c0       	rjmp	.+30     	; 0x506a <Add_default_User+0x1be>
    504c:	89 e1       	ldi	r24, 0x19	; 25
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	9a 8b       	std	Y+18, r25	; 0x12
    5052:	89 8b       	std	Y+17, r24	; 0x11
    5054:	89 89       	ldd	r24, Y+17	; 0x11
    5056:	9a 89       	ldd	r25, Y+18	; 0x12
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	f1 f7       	brne	.-4      	; 0x5058 <Add_default_User+0x1ac>
    505c:	9a 8b       	std	Y+18, r25	; 0x12
    505e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5060:	8b 89       	ldd	r24, Y+19	; 0x13
    5062:	9c 89       	ldd	r25, Y+20	; 0x14
    5064:	01 97       	sbiw	r24, 0x01	; 1
    5066:	9c 8b       	std	Y+20, r25	; 0x14
    5068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    506a:	8b 89       	ldd	r24, Y+19	; 0x13
    506c:	9c 89       	ldd	r25, Y+20	; 0x14
    506e:	00 97       	sbiw	r24, 0x00	; 0
    5070:	69 f7       	brne	.-38     	; 0x504c <Add_default_User+0x1a0>
    5072:	14 c0       	rjmp	.+40     	; 0x509c <Add_default_User+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5074:	6d 89       	ldd	r22, Y+21	; 0x15
    5076:	7e 89       	ldd	r23, Y+22	; 0x16
    5078:	8f 89       	ldd	r24, Y+23	; 0x17
    507a:	98 8d       	ldd	r25, Y+24	; 0x18
    507c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	9c 8b       	std	Y+20, r25	; 0x14
    5086:	8b 8b       	std	Y+19, r24	; 0x13
    5088:	8b 89       	ldd	r24, Y+19	; 0x13
    508a:	9c 89       	ldd	r25, Y+20	; 0x14
    508c:	98 8b       	std	Y+16, r25	; 0x10
    508e:	8f 87       	std	Y+15, r24	; 0x0f
    5090:	8f 85       	ldd	r24, Y+15	; 0x0f
    5092:	98 89       	ldd	r25, Y+16	; 0x10
    5094:	01 97       	sbiw	r24, 0x01	; 1
    5096:	f1 f7       	brne	.-4      	; 0x5094 <Add_default_User+0x1e8>
    5098:	98 8b       	std	Y+16, r25	; 0x10
    509a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	EEPROM_enuWriteDataByte(1,95);
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	6f e5       	ldi	r22, 0x5F	; 95
    50a0:	70 e0       	ldi	r23, 0x00	; 0
    50a2:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <EEPROM_enuWriteDataByte>
    50a6:	80 e0       	ldi	r24, 0x00	; 0
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	a8 e4       	ldi	r26, 0x48	; 72
    50ac:	b2 e4       	ldi	r27, 0x42	; 66
    50ae:	8b 87       	std	Y+11, r24	; 0x0b
    50b0:	9c 87       	std	Y+12, r25	; 0x0c
    50b2:	ad 87       	std	Y+13, r26	; 0x0d
    50b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    50b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    50ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    50bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	4a e7       	ldi	r20, 0x7A	; 122
    50c4:	53 e4       	ldi	r21, 0x43	; 67
    50c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ca:	dc 01       	movw	r26, r24
    50cc:	cb 01       	movw	r24, r22
    50ce:	8f 83       	std	Y+7, r24	; 0x07
    50d0:	98 87       	std	Y+8, r25	; 0x08
    50d2:	a9 87       	std	Y+9, r26	; 0x09
    50d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50d6:	6f 81       	ldd	r22, Y+7	; 0x07
    50d8:	78 85       	ldd	r23, Y+8	; 0x08
    50da:	89 85       	ldd	r24, Y+9	; 0x09
    50dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50de:	20 e0       	ldi	r18, 0x00	; 0
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	40 e8       	ldi	r20, 0x80	; 128
    50e4:	5f e3       	ldi	r21, 0x3F	; 63
    50e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    50ea:	88 23       	and	r24, r24
    50ec:	2c f4       	brge	.+10     	; 0x50f8 <Add_default_User+0x24c>
		__ticks = 1;
    50ee:	81 e0       	ldi	r24, 0x01	; 1
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	9e 83       	std	Y+6, r25	; 0x06
    50f4:	8d 83       	std	Y+5, r24	; 0x05
    50f6:	3f c0       	rjmp	.+126    	; 0x5176 <Add_default_User+0x2ca>
	else if (__tmp > 65535)
    50f8:	6f 81       	ldd	r22, Y+7	; 0x07
    50fa:	78 85       	ldd	r23, Y+8	; 0x08
    50fc:	89 85       	ldd	r24, Y+9	; 0x09
    50fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	3f ef       	ldi	r19, 0xFF	; 255
    5104:	4f e7       	ldi	r20, 0x7F	; 127
    5106:	57 e4       	ldi	r21, 0x47	; 71
    5108:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    510c:	18 16       	cp	r1, r24
    510e:	4c f5       	brge	.+82     	; 0x5162 <Add_default_User+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5110:	6b 85       	ldd	r22, Y+11	; 0x0b
    5112:	7c 85       	ldd	r23, Y+12	; 0x0c
    5114:	8d 85       	ldd	r24, Y+13	; 0x0d
    5116:	9e 85       	ldd	r25, Y+14	; 0x0e
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	40 e2       	ldi	r20, 0x20	; 32
    511e:	51 e4       	ldi	r21, 0x41	; 65
    5120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	bc 01       	movw	r22, r24
    512a:	cd 01       	movw	r24, r26
    512c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	9e 83       	std	Y+6, r25	; 0x06
    5136:	8d 83       	std	Y+5, r24	; 0x05
    5138:	0f c0       	rjmp	.+30     	; 0x5158 <Add_default_User+0x2ac>
    513a:	89 e1       	ldi	r24, 0x19	; 25
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	9c 83       	std	Y+4, r25	; 0x04
    5140:	8b 83       	std	Y+3, r24	; 0x03
    5142:	8b 81       	ldd	r24, Y+3	; 0x03
    5144:	9c 81       	ldd	r25, Y+4	; 0x04
    5146:	01 97       	sbiw	r24, 0x01	; 1
    5148:	f1 f7       	brne	.-4      	; 0x5146 <Add_default_User+0x29a>
    514a:	9c 83       	std	Y+4, r25	; 0x04
    514c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    514e:	8d 81       	ldd	r24, Y+5	; 0x05
    5150:	9e 81       	ldd	r25, Y+6	; 0x06
    5152:	01 97       	sbiw	r24, 0x01	; 1
    5154:	9e 83       	std	Y+6, r25	; 0x06
    5156:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5158:	8d 81       	ldd	r24, Y+5	; 0x05
    515a:	9e 81       	ldd	r25, Y+6	; 0x06
    515c:	00 97       	sbiw	r24, 0x00	; 0
    515e:	69 f7       	brne	.-38     	; 0x513a <Add_default_User+0x28e>
    5160:	14 c0       	rjmp	.+40     	; 0x518a <Add_default_User+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5162:	6f 81       	ldd	r22, Y+7	; 0x07
    5164:	78 85       	ldd	r23, Y+8	; 0x08
    5166:	89 85       	ldd	r24, Y+9	; 0x09
    5168:	9a 85       	ldd	r25, Y+10	; 0x0a
    516a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    516e:	dc 01       	movw	r26, r24
    5170:	cb 01       	movw	r24, r22
    5172:	9e 83       	std	Y+6, r25	; 0x06
    5174:	8d 83       	std	Y+5, r24	; 0x05
    5176:	8d 81       	ldd	r24, Y+5	; 0x05
    5178:	9e 81       	ldd	r25, Y+6	; 0x06
    517a:	9a 83       	std	Y+2, r25	; 0x02
    517c:	89 83       	std	Y+1, r24	; 0x01
    517e:	89 81       	ldd	r24, Y+1	; 0x01
    5180:	9a 81       	ldd	r25, Y+2	; 0x02
    5182:	01 97       	sbiw	r24, 0x01	; 1
    5184:	f1 f7       	brne	.-4      	; 0x5182 <Add_default_User+0x2d6>
    5186:	9a 83       	std	Y+2, r25	; 0x02
    5188:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    518a:	aa 96       	adiw	r28, 0x2a	; 42
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	f8 94       	cli
    5190:	de bf       	out	0x3e, r29	; 62
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	cd bf       	out	0x3d, r28	; 61
    5196:	cf 91       	pop	r28
    5198:	df 91       	pop	r29
    519a:	08 95       	ret

0000519c <Show_Data>:

void Show_Data()
{
    519c:	df 93       	push	r29
    519e:	cf 93       	push	r28
    51a0:	cd b7       	in	r28, 0x3d	; 61
    51a2:	de b7       	in	r29, 0x3e	; 62
    51a4:	61 97       	sbiw	r28, 0x11	; 17
    51a6:	0f b6       	in	r0, 0x3f	; 63
    51a8:	f8 94       	cli
    51aa:	de bf       	out	0x3e, r29	; 62
    51ac:	0f be       	out	0x3f, r0	; 63
    51ae:	cd bf       	out	0x3d, r28	; 61
	//Show_Data();
	LCD_voidClearScreen();
    51b0:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
	LCD_voidWriteString("Enter Index");
    51b4:	80 e6       	ldi	r24, 0x60	; 96
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
	u8 read;
	Keypad_enuGetPressedKey(&read);
    51bc:	ce 01       	movw	r24, r28
    51be:	41 96       	adiw	r24, 0x11	; 17
    51c0:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <Keypad_enuGetPressedKey>
	read-='0';
    51c4:	89 89       	ldd	r24, Y+17	; 0x11
    51c6:	80 53       	subi	r24, 0x30	; 48
    51c8:	89 8b       	std	Y+17, r24	; 0x11
	if(read-1<GlobalPstr_User_Data.UsersCount)
    51ca:	89 89       	ldd	r24, Y+17	; 0x11
    51cc:	88 2f       	mov	r24, r24
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	9c 01       	movw	r18, r24
    51d2:	21 50       	subi	r18, 0x01	; 1
    51d4:	30 40       	sbci	r19, 0x00	; 0
    51d6:	80 91 52 02 	lds	r24, 0x0252
    51da:	88 2f       	mov	r24, r24
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	28 17       	cp	r18, r24
    51e0:	39 07       	cpc	r19, r25
    51e2:	0c f0       	brlt	.+2      	; 0x51e6 <Show_Data+0x4a>
    51e4:	88 c0       	rjmp	.+272    	; 0x52f6 <Show_Data+0x15a>
	{
		LCD_voidClearScreen();
    51e6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		u8 user_id=GlobalPstr_User_Data.UserID[0];
    51ea:	80 91 2a 02 	lds	r24, 0x022A
    51ee:	88 8b       	std	Y+16, r24	; 0x10
		LCD_voidWriteNumber((u16)user_id);
    51f0:	88 89       	ldd	r24, Y+16	; 0x10
    51f2:	88 2f       	mov	r24, r24
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <LCD_voidWriteNumber>
		u8 user_pass=GlobalPstr_User_Data.UserPAS[0];
    51fa:	80 91 3e 02 	lds	r24, 0x023E
    51fe:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_voidSetPosition(1,0);
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteNumber((u16)user_pass);
    5208:	8f 85       	ldd	r24, Y+15	; 0x0f
    520a:	88 2f       	mov	r24, r24
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <LCD_voidWriteNumber>
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	90 e4       	ldi	r25, 0x40	; 64
    5216:	ac e9       	ldi	r26, 0x9C	; 156
    5218:	b5 e4       	ldi	r27, 0x45	; 69
    521a:	8b 87       	std	Y+11, r24	; 0x0b
    521c:	9c 87       	std	Y+12, r25	; 0x0c
    521e:	ad 87       	std	Y+13, r26	; 0x0d
    5220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5222:	6b 85       	ldd	r22, Y+11	; 0x0b
    5224:	7c 85       	ldd	r23, Y+12	; 0x0c
    5226:	8d 85       	ldd	r24, Y+13	; 0x0d
    5228:	9e 85       	ldd	r25, Y+14	; 0x0e
    522a:	20 e0       	ldi	r18, 0x00	; 0
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	4a e7       	ldi	r20, 0x7A	; 122
    5230:	53 e4       	ldi	r21, 0x43	; 67
    5232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5236:	dc 01       	movw	r26, r24
    5238:	cb 01       	movw	r24, r22
    523a:	8f 83       	std	Y+7, r24	; 0x07
    523c:	98 87       	std	Y+8, r25	; 0x08
    523e:	a9 87       	std	Y+9, r26	; 0x09
    5240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5242:	6f 81       	ldd	r22, Y+7	; 0x07
    5244:	78 85       	ldd	r23, Y+8	; 0x08
    5246:	89 85       	ldd	r24, Y+9	; 0x09
    5248:	9a 85       	ldd	r25, Y+10	; 0x0a
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	40 e8       	ldi	r20, 0x80	; 128
    5250:	5f e3       	ldi	r21, 0x3F	; 63
    5252:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5256:	88 23       	and	r24, r24
    5258:	2c f4       	brge	.+10     	; 0x5264 <Show_Data+0xc8>
		__ticks = 1;
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	9e 83       	std	Y+6, r25	; 0x06
    5260:	8d 83       	std	Y+5, r24	; 0x05
    5262:	3f c0       	rjmp	.+126    	; 0x52e2 <Show_Data+0x146>
	else if (__tmp > 65535)
    5264:	6f 81       	ldd	r22, Y+7	; 0x07
    5266:	78 85       	ldd	r23, Y+8	; 0x08
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	3f ef       	ldi	r19, 0xFF	; 255
    5270:	4f e7       	ldi	r20, 0x7F	; 127
    5272:	57 e4       	ldi	r21, 0x47	; 71
    5274:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5278:	18 16       	cp	r1, r24
    527a:	4c f5       	brge	.+82     	; 0x52ce <Show_Data+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527c:	6b 85       	ldd	r22, Y+11	; 0x0b
    527e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5280:	8d 85       	ldd	r24, Y+13	; 0x0d
    5282:	9e 85       	ldd	r25, Y+14	; 0x0e
    5284:	20 e0       	ldi	r18, 0x00	; 0
    5286:	30 e0       	ldi	r19, 0x00	; 0
    5288:	40 e2       	ldi	r20, 0x20	; 32
    528a:	51 e4       	ldi	r21, 0x41	; 65
    528c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	bc 01       	movw	r22, r24
    5296:	cd 01       	movw	r24, r26
    5298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    529c:	dc 01       	movw	r26, r24
    529e:	cb 01       	movw	r24, r22
    52a0:	9e 83       	std	Y+6, r25	; 0x06
    52a2:	8d 83       	std	Y+5, r24	; 0x05
    52a4:	0f c0       	rjmp	.+30     	; 0x52c4 <Show_Data+0x128>
    52a6:	89 e1       	ldi	r24, 0x19	; 25
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	9c 83       	std	Y+4, r25	; 0x04
    52ac:	8b 83       	std	Y+3, r24	; 0x03
    52ae:	8b 81       	ldd	r24, Y+3	; 0x03
    52b0:	9c 81       	ldd	r25, Y+4	; 0x04
    52b2:	01 97       	sbiw	r24, 0x01	; 1
    52b4:	f1 f7       	brne	.-4      	; 0x52b2 <Show_Data+0x116>
    52b6:	9c 83       	std	Y+4, r25	; 0x04
    52b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ba:	8d 81       	ldd	r24, Y+5	; 0x05
    52bc:	9e 81       	ldd	r25, Y+6	; 0x06
    52be:	01 97       	sbiw	r24, 0x01	; 1
    52c0:	9e 83       	std	Y+6, r25	; 0x06
    52c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c4:	8d 81       	ldd	r24, Y+5	; 0x05
    52c6:	9e 81       	ldd	r25, Y+6	; 0x06
    52c8:	00 97       	sbiw	r24, 0x00	; 0
    52ca:	69 f7       	brne	.-38     	; 0x52a6 <Show_Data+0x10a>
    52cc:	14 c0       	rjmp	.+40     	; 0x52f6 <Show_Data+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ce:	6f 81       	ldd	r22, Y+7	; 0x07
    52d0:	78 85       	ldd	r23, Y+8	; 0x08
    52d2:	89 85       	ldd	r24, Y+9	; 0x09
    52d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	9e 83       	std	Y+6, r25	; 0x06
    52e0:	8d 83       	std	Y+5, r24	; 0x05
    52e2:	8d 81       	ldd	r24, Y+5	; 0x05
    52e4:	9e 81       	ldd	r25, Y+6	; 0x06
    52e6:	9a 83       	std	Y+2, r25	; 0x02
    52e8:	89 83       	std	Y+1, r24	; 0x01
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	9a 81       	ldd	r25, Y+2	; 0x02
    52ee:	01 97       	sbiw	r24, 0x01	; 1
    52f0:	f1 f7       	brne	.-4      	; 0x52ee <Show_Data+0x152>
    52f2:	9a 83       	std	Y+2, r25	; 0x02
    52f4:	89 83       	std	Y+1, r24	; 0x01
//		//LCD_voidSetPosition(1,0);
//		//LCD_voidWriteString("Pass:");
//		LCD_voidWriteNumber((u16)GlobalPstr_User_Data.UserPAS[Local_u8Iterator]);
//		_delay_ms(5000);
//	}
}
    52f6:	61 96       	adiw	r28, 0x11	; 17
    52f8:	0f b6       	in	r0, 0x3f	; 63
    52fa:	f8 94       	cli
    52fc:	de bf       	out	0x3e, r29	; 62
    52fe:	0f be       	out	0x3f, r0	; 63
    5300:	cd bf       	out	0x3d, r28	; 61
    5302:	cf 91       	pop	r28
    5304:	df 91       	pop	r29
    5306:	08 95       	ret

00005308 <Start>:


u8 Start()
{
    5308:	df 93       	push	r29
    530a:	cf 93       	push	r28
    530c:	cd b7       	in	r28, 0x3d	; 61
    530e:	de b7       	in	r29, 0x3e	; 62
    5310:	2f 97       	sbiw	r28, 0x0f	; 15
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
	SWITCH_init();
    531c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <SWITCH_init>
	ADC_init();
    5320:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <ADC_init>
	LCD_voidInit();
    5324:	0e 94 c1 19 	call	0x3382	; 0x3382 <LCD_voidInit>
	Keypad_enuInit();
    5328:	0e 94 80 21 	call	0x4300	; 0x4300 <Keypad_enuInit>
	LED_init();
    532c:	0e 94 0d 19 	call	0x321a	; 0x321a <LED_init>
	DC_Motor_Init();
    5330:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <DC_Motor_Init>
	TWI_enuInitMaster();
    5334:	0e 94 22 13 	call	0x2644	; 0x2644 <TWI_enuInitMaster>
	//LCD_voidWriteString("Enter your ID");
	//LCD_voidCursorOff();
	//uart display

	/*start timer, to call TEMP every 5 seconds*/
	Timer0_enuInit();
    5338:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <Timer0_enuInit>
	Timer0_enuAsysncDelay(5000);
    533c:	88 e8       	ldi	r24, 0x88	; 136
    533e:	93 e1       	ldi	r25, 0x13	; 19
    5340:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <Timer0_enuAsysncDelay>
	TIMER0_enuEnableOVF_Interrupt();
    5344:	0e 94 13 12 	call	0x2426	; 0x2426 <TIMER0_enuEnableOVF_Interrupt>
	TIMER_voidCall_Back_OVF(TEMP);
    5348:	8d e1       	ldi	r24, 0x1D	; 29
    534a:	97 e2       	ldi	r25, 0x27	; 39
    534c:	0e 94 46 12 	call	0x248c	; 0x248c <TIMER_voidCall_Back_OVF>
	TIMER_voidEnable_GI();
    5350:	0e 94 2a 12 	call	0x2454	; 0x2454 <TIMER_voidEnable_GI>

	/*Restore user Data*/
	EEPROM_enuInit();
    5354:	0e 94 68 23 	call	0x46d0	; 0x46d0 <EEPROM_enuInit>
	EEPROM_enuRestoreData(&GlobalPstr_User_Data);
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	92 e0       	ldi	r25, 0x02	; 2
    535c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <EEPROM_enuRestoreData>
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	aa ef       	ldi	r26, 0xFA	; 250
    5366:	b3 e4       	ldi	r27, 0x43	; 67
    5368:	8b 87       	std	Y+11, r24	; 0x0b
    536a:	9c 87       	std	Y+12, r25	; 0x0c
    536c:	ad 87       	std	Y+13, r26	; 0x0d
    536e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5370:	6b 85       	ldd	r22, Y+11	; 0x0b
    5372:	7c 85       	ldd	r23, Y+12	; 0x0c
    5374:	8d 85       	ldd	r24, Y+13	; 0x0d
    5376:	9e 85       	ldd	r25, Y+14	; 0x0e
    5378:	20 e0       	ldi	r18, 0x00	; 0
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	4a e7       	ldi	r20, 0x7A	; 122
    537e:	53 e4       	ldi	r21, 0x43	; 67
    5380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5384:	dc 01       	movw	r26, r24
    5386:	cb 01       	movw	r24, r22
    5388:	8f 83       	std	Y+7, r24	; 0x07
    538a:	98 87       	std	Y+8, r25	; 0x08
    538c:	a9 87       	std	Y+9, r26	; 0x09
    538e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5390:	6f 81       	ldd	r22, Y+7	; 0x07
    5392:	78 85       	ldd	r23, Y+8	; 0x08
    5394:	89 85       	ldd	r24, Y+9	; 0x09
    5396:	9a 85       	ldd	r25, Y+10	; 0x0a
    5398:	20 e0       	ldi	r18, 0x00	; 0
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	40 e8       	ldi	r20, 0x80	; 128
    539e:	5f e3       	ldi	r21, 0x3F	; 63
    53a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    53a4:	88 23       	and	r24, r24
    53a6:	2c f4       	brge	.+10     	; 0x53b2 <Start+0xaa>
		__ticks = 1;
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	9e 83       	std	Y+6, r25	; 0x06
    53ae:	8d 83       	std	Y+5, r24	; 0x05
    53b0:	3f c0       	rjmp	.+126    	; 0x5430 <Start+0x128>
	else if (__tmp > 65535)
    53b2:	6f 81       	ldd	r22, Y+7	; 0x07
    53b4:	78 85       	ldd	r23, Y+8	; 0x08
    53b6:	89 85       	ldd	r24, Y+9	; 0x09
    53b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	3f ef       	ldi	r19, 0xFF	; 255
    53be:	4f e7       	ldi	r20, 0x7F	; 127
    53c0:	57 e4       	ldi	r21, 0x47	; 71
    53c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    53c6:	18 16       	cp	r1, r24
    53c8:	4c f5       	brge	.+82     	; 0x541c <Start+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    53cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    53ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    53d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d2:	20 e0       	ldi	r18, 0x00	; 0
    53d4:	30 e0       	ldi	r19, 0x00	; 0
    53d6:	40 e2       	ldi	r20, 0x20	; 32
    53d8:	51 e4       	ldi	r21, 0x41	; 65
    53da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53de:	dc 01       	movw	r26, r24
    53e0:	cb 01       	movw	r24, r22
    53e2:	bc 01       	movw	r22, r24
    53e4:	cd 01       	movw	r24, r26
    53e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	9e 83       	std	Y+6, r25	; 0x06
    53f0:	8d 83       	std	Y+5, r24	; 0x05
    53f2:	0f c0       	rjmp	.+30     	; 0x5412 <Start+0x10a>
    53f4:	89 e1       	ldi	r24, 0x19	; 25
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	9c 83       	std	Y+4, r25	; 0x04
    53fa:	8b 83       	std	Y+3, r24	; 0x03
    53fc:	8b 81       	ldd	r24, Y+3	; 0x03
    53fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5400:	01 97       	sbiw	r24, 0x01	; 1
    5402:	f1 f7       	brne	.-4      	; 0x5400 <Start+0xf8>
    5404:	9c 83       	std	Y+4, r25	; 0x04
    5406:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5408:	8d 81       	ldd	r24, Y+5	; 0x05
    540a:	9e 81       	ldd	r25, Y+6	; 0x06
    540c:	01 97       	sbiw	r24, 0x01	; 1
    540e:	9e 83       	std	Y+6, r25	; 0x06
    5410:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5412:	8d 81       	ldd	r24, Y+5	; 0x05
    5414:	9e 81       	ldd	r25, Y+6	; 0x06
    5416:	00 97       	sbiw	r24, 0x00	; 0
    5418:	69 f7       	brne	.-38     	; 0x53f4 <Start+0xec>
    541a:	14 c0       	rjmp	.+40     	; 0x5444 <Start+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    541c:	6f 81       	ldd	r22, Y+7	; 0x07
    541e:	78 85       	ldd	r23, Y+8	; 0x08
    5420:	89 85       	ldd	r24, Y+9	; 0x09
    5422:	9a 85       	ldd	r25, Y+10	; 0x0a
    5424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5428:	dc 01       	movw	r26, r24
    542a:	cb 01       	movw	r24, r22
    542c:	9e 83       	std	Y+6, r25	; 0x06
    542e:	8d 83       	std	Y+5, r24	; 0x05
    5430:	8d 81       	ldd	r24, Y+5	; 0x05
    5432:	9e 81       	ldd	r25, Y+6	; 0x06
    5434:	9a 83       	std	Y+2, r25	; 0x02
    5436:	89 83       	std	Y+1, r24	; 0x01
    5438:	89 81       	ldd	r24, Y+1	; 0x01
    543a:	9a 81       	ldd	r25, Y+2	; 0x02
    543c:	01 97       	sbiw	r24, 0x01	; 1
    543e:	f1 f7       	brne	.-4      	; 0x543c <Start+0x134>
    5440:	9a 83       	std	Y+2, r25	; 0x02
    5442:	89 83       	std	Y+1, r24	; 0x01

	u8 flag;

	_delay_ms(500);
	SWITCH_read(DIO_u8PORTB,DIO_PIN1,&flag);
    5444:	9e 01       	movw	r18, r28
    5446:	21 5f       	subi	r18, 0xF1	; 241
    5448:	3f 4f       	sbci	r19, 0xFF	; 255
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	61 e0       	ldi	r22, 0x01	; 1
    544e:	a9 01       	movw	r20, r18
    5450:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <SWITCH_read>

	return flag;
    5454:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5456:	2f 96       	adiw	r28, 0x0f	; 15
    5458:	0f b6       	in	r0, 0x3f	; 63
    545a:	f8 94       	cli
    545c:	de bf       	out	0x3e, r29	; 62
    545e:	0f be       	out	0x3f, r0	; 63
    5460:	cd bf       	out	0x3d, r28	; 61
    5462:	cf 91       	pop	r28
    5464:	df 91       	pop	r29
    5466:	08 95       	ret

00005468 <Get_ID_orPass>:


u8 Get_ID_orPass()
{
    5468:	df 93       	push	r29
    546a:	cf 93       	push	r28
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
    5470:	62 97       	sbiw	r28, 0x12	; 18
    5472:	0f b6       	in	r0, 0x3f	; 63
    5474:	f8 94       	cli
    5476:	de bf       	out	0x3e, r29	; 62
    5478:	0f be       	out	0x3f, r0	; 63
    547a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Value=0;
    547c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8KEYPAD_read;
	u8 Local_u8Helper=100;
    547e:	84 e6       	ldi	r24, 0x64	; 100
    5480:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i<3;i++)
    5482:	1f 86       	std	Y+15, r1	; 0x0f
    5484:	a2 c0       	rjmp	.+324    	; 0x55ca <Get_ID_orPass+0x162>
	{
		LCD_voidSetPosition(1,i);
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	6f 85       	ldd	r22, Y+15	; 0x0f
    548a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		Keypad_enuGetPressedKey(&Local_u8KEYPAD_read);
    548e:	ce 01       	movw	r24, r28
    5490:	42 96       	adiw	r24, 0x12	; 18
    5492:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <Keypad_enuGetPressedKey>
		LCD_voidWriteData(Local_u8KEYPAD_read);
    5496:	8a 89       	ldd	r24, Y+18	; 0x12
    5498:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
    549c:	80 e0       	ldi	r24, 0x00	; 0
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	a8 e4       	ldi	r26, 0x48	; 72
    54a2:	b2 e4       	ldi	r27, 0x42	; 66
    54a4:	8b 87       	std	Y+11, r24	; 0x0b
    54a6:	9c 87       	std	Y+12, r25	; 0x0c
    54a8:	ad 87       	std	Y+13, r26	; 0x0d
    54aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    54ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    54b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	4a e7       	ldi	r20, 0x7A	; 122
    54ba:	53 e4       	ldi	r21, 0x43	; 67
    54bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c0:	dc 01       	movw	r26, r24
    54c2:	cb 01       	movw	r24, r22
    54c4:	8f 83       	std	Y+7, r24	; 0x07
    54c6:	98 87       	std	Y+8, r25	; 0x08
    54c8:	a9 87       	std	Y+9, r26	; 0x09
    54ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    54cc:	6f 81       	ldd	r22, Y+7	; 0x07
    54ce:	78 85       	ldd	r23, Y+8	; 0x08
    54d0:	89 85       	ldd	r24, Y+9	; 0x09
    54d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d4:	20 e0       	ldi	r18, 0x00	; 0
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	40 e8       	ldi	r20, 0x80	; 128
    54da:	5f e3       	ldi	r21, 0x3F	; 63
    54dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    54e0:	88 23       	and	r24, r24
    54e2:	2c f4       	brge	.+10     	; 0x54ee <Get_ID_orPass+0x86>
		__ticks = 1;
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	9e 83       	std	Y+6, r25	; 0x06
    54ea:	8d 83       	std	Y+5, r24	; 0x05
    54ec:	3f c0       	rjmp	.+126    	; 0x556c <Get_ID_orPass+0x104>
	else if (__tmp > 65535)
    54ee:	6f 81       	ldd	r22, Y+7	; 0x07
    54f0:	78 85       	ldd	r23, Y+8	; 0x08
    54f2:	89 85       	ldd	r24, Y+9	; 0x09
    54f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f6:	20 e0       	ldi	r18, 0x00	; 0
    54f8:	3f ef       	ldi	r19, 0xFF	; 255
    54fa:	4f e7       	ldi	r20, 0x7F	; 127
    54fc:	57 e4       	ldi	r21, 0x47	; 71
    54fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5502:	18 16       	cp	r1, r24
    5504:	4c f5       	brge	.+82     	; 0x5558 <Get_ID_orPass+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5506:	6b 85       	ldd	r22, Y+11	; 0x0b
    5508:	7c 85       	ldd	r23, Y+12	; 0x0c
    550a:	8d 85       	ldd	r24, Y+13	; 0x0d
    550c:	9e 85       	ldd	r25, Y+14	; 0x0e
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	40 e2       	ldi	r20, 0x20	; 32
    5514:	51 e4       	ldi	r21, 0x41	; 65
    5516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	bc 01       	movw	r22, r24
    5520:	cd 01       	movw	r24, r26
    5522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5526:	dc 01       	movw	r26, r24
    5528:	cb 01       	movw	r24, r22
    552a:	9e 83       	std	Y+6, r25	; 0x06
    552c:	8d 83       	std	Y+5, r24	; 0x05
    552e:	0f c0       	rjmp	.+30     	; 0x554e <Get_ID_orPass+0xe6>
    5530:	89 e1       	ldi	r24, 0x19	; 25
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	9c 83       	std	Y+4, r25	; 0x04
    5536:	8b 83       	std	Y+3, r24	; 0x03
    5538:	8b 81       	ldd	r24, Y+3	; 0x03
    553a:	9c 81       	ldd	r25, Y+4	; 0x04
    553c:	01 97       	sbiw	r24, 0x01	; 1
    553e:	f1 f7       	brne	.-4      	; 0x553c <Get_ID_orPass+0xd4>
    5540:	9c 83       	std	Y+4, r25	; 0x04
    5542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5544:	8d 81       	ldd	r24, Y+5	; 0x05
    5546:	9e 81       	ldd	r25, Y+6	; 0x06
    5548:	01 97       	sbiw	r24, 0x01	; 1
    554a:	9e 83       	std	Y+6, r25	; 0x06
    554c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    554e:	8d 81       	ldd	r24, Y+5	; 0x05
    5550:	9e 81       	ldd	r25, Y+6	; 0x06
    5552:	00 97       	sbiw	r24, 0x00	; 0
    5554:	69 f7       	brne	.-38     	; 0x5530 <Get_ID_orPass+0xc8>
    5556:	14 c0       	rjmp	.+40     	; 0x5580 <Get_ID_orPass+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5558:	6f 81       	ldd	r22, Y+7	; 0x07
    555a:	78 85       	ldd	r23, Y+8	; 0x08
    555c:	89 85       	ldd	r24, Y+9	; 0x09
    555e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5564:	dc 01       	movw	r26, r24
    5566:	cb 01       	movw	r24, r22
    5568:	9e 83       	std	Y+6, r25	; 0x06
    556a:	8d 83       	std	Y+5, r24	; 0x05
    556c:	8d 81       	ldd	r24, Y+5	; 0x05
    556e:	9e 81       	ldd	r25, Y+6	; 0x06
    5570:	9a 83       	std	Y+2, r25	; 0x02
    5572:	89 83       	std	Y+1, r24	; 0x01
    5574:	89 81       	ldd	r24, Y+1	; 0x01
    5576:	9a 81       	ldd	r25, Y+2	; 0x02
    5578:	01 97       	sbiw	r24, 0x01	; 1
    557a:	f1 f7       	brne	.-4      	; 0x5578 <Get_ID_orPass+0x110>
    557c:	9a 83       	std	Y+2, r25	; 0x02
    557e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LCD_voidSetPosition(1,i);
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	6f 85       	ldd	r22, Y+15	; 0x0f
    5584:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteData('*');
    5588:	8a e2       	ldi	r24, 0x2A	; 42
    558a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidWriteData>
		Local_u8Value+=(Local_u8KEYPAD_read-'0')*Local_u8Helper;
    558e:	8a 89       	ldd	r24, Y+18	; 0x12
    5590:	88 2f       	mov	r24, r24
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	9c 01       	movw	r18, r24
    5596:	20 53       	subi	r18, 0x30	; 48
    5598:	30 40       	sbci	r19, 0x00	; 0
    559a:	88 89       	ldd	r24, Y+16	; 0x10
    559c:	88 2f       	mov	r24, r24
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	ac 01       	movw	r20, r24
    55a2:	24 9f       	mul	r18, r20
    55a4:	c0 01       	movw	r24, r0
    55a6:	25 9f       	mul	r18, r21
    55a8:	90 0d       	add	r25, r0
    55aa:	34 9f       	mul	r19, r20
    55ac:	90 0d       	add	r25, r0
    55ae:	11 24       	eor	r1, r1
    55b0:	98 2f       	mov	r25, r24
    55b2:	89 89       	ldd	r24, Y+17	; 0x11
    55b4:	89 0f       	add	r24, r25
    55b6:	89 8b       	std	Y+17, r24	; 0x11
		Local_u8Helper/=10;
    55b8:	88 89       	ldd	r24, Y+16	; 0x10
    55ba:	9a e0       	ldi	r25, 0x0A	; 10
    55bc:	69 2f       	mov	r22, r25
    55be:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <__udivmodqi4>
    55c2:	88 8b       	std	Y+16, r24	; 0x10
u8 Get_ID_orPass()
{
	u8 Local_u8Value=0;
	u8 Local_u8KEYPAD_read;
	u8 Local_u8Helper=100;
	for(u8 i=0;i<3;i++)
    55c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    55c6:	8f 5f       	subi	r24, 0xFF	; 255
    55c8:	8f 87       	std	Y+15, r24	; 0x0f
    55ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    55cc:	83 30       	cpi	r24, 0x03	; 3
    55ce:	08 f4       	brcc	.+2      	; 0x55d2 <Get_ID_orPass+0x16a>
    55d0:	5a cf       	rjmp	.-332    	; 0x5486 <Get_ID_orPass+0x1e>
		LCD_voidSetPosition(1,i);
		LCD_voidWriteData('*');
		Local_u8Value+=(Local_u8KEYPAD_read-'0')*Local_u8Helper;
		Local_u8Helper/=10;
	}
	return Local_u8Value;
    55d2:	89 89       	ldd	r24, Y+17	; 0x11
}
    55d4:	62 96       	adiw	r28, 0x12	; 18
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	f8 94       	cli
    55da:	de bf       	out	0x3e, r29	; 62
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	cd bf       	out	0x3d, r28	; 61
    55e0:	cf 91       	pop	r28
    55e2:	df 91       	pop	r29
    55e4:	08 95       	ret

000055e6 <check_ID>:

u8 check_ID()
{
    55e6:	df 93       	push	r29
    55e8:	cf 93       	push	r28
    55ea:	cd b7       	in	r28, 0x3d	; 61
    55ec:	de b7       	in	r29, 0x3e	; 62
    55ee:	63 97       	sbiw	r28, 0x13	; 19
    55f0:	0f b6       	in	r0, 0x3f	; 63
    55f2:	f8 94       	cli
    55f4:	de bf       	out	0x3e, r29	; 62
    55f6:	0f be       	out	0x3f, r0	; 63
    55f8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8User_ID;
	u8 Local_State=0;
    55fa:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8trials=0;
    55fc:	18 8a       	std	Y+16, r1	; 0x10
    55fe:	a7 c0       	rjmp	.+334    	; 0x574e <check_ID+0x168>
	while(Local_u8trials<3)
	{
		LCD_voidClearScreen();
    5600:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    5604:	80 e0       	ldi	r24, 0x00	; 0
    5606:	60 e0       	ldi	r22, 0x00	; 0
    5608:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("Enter your ID");
    560c:	8c e6       	ldi	r24, 0x6C	; 108
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
		LCD_voidCursorOn();
    5614:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <LCD_voidCursorOn>
		Local_u8User_ID=Get_ID_orPass();
    5618:	0e 94 34 2a 	call	0x5468	; 0x5468 <Get_ID_orPass>
    561c:	8a 8b       	std	Y+18, r24	; 0x12

		for(u8 local_u8Iterator=0;local_u8Iterator<GlobalPstr_User_Data.UsersCount;local_u8Iterator++)
    561e:	1f 86       	std	Y+15, r1	; 0x0f
    5620:	12 c0       	rjmp	.+36     	; 0x5646 <check_ID+0x60>
		{
			if(Local_u8User_ID==GlobalPstr_User_Data.UserID[local_u8Iterator])
    5622:	8f 85       	ldd	r24, Y+15	; 0x0f
    5624:	88 2f       	mov	r24, r24
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	fc 01       	movw	r30, r24
    562a:	e6 5d       	subi	r30, 0xD6	; 214
    562c:	fd 4f       	sbci	r31, 0xFD	; 253
    562e:	90 81       	ld	r25, Z
    5630:	8a 89       	ldd	r24, Y+18	; 0x12
    5632:	98 17       	cp	r25, r24
    5634:	29 f4       	brne	.+10     	; 0x5640 <check_ID+0x5a>
			{
				Local_State=1;
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	89 8b       	std	Y+17, r24	; 0x11
				return Local_State;
    563a:	89 89       	ldd	r24, Y+17	; 0x11
    563c:	8b 8b       	std	Y+19, r24	; 0x13
    563e:	8d c0       	rjmp	.+282    	; 0x575a <check_ID+0x174>
		LCD_voidSetPosition(0,0);
		LCD_voidWriteString("Enter your ID");
		LCD_voidCursorOn();
		Local_u8User_ID=Get_ID_orPass();

		for(u8 local_u8Iterator=0;local_u8Iterator<GlobalPstr_User_Data.UsersCount;local_u8Iterator++)
    5640:	8f 85       	ldd	r24, Y+15	; 0x0f
    5642:	8f 5f       	subi	r24, 0xFF	; 255
    5644:	8f 87       	std	Y+15, r24	; 0x0f
    5646:	90 91 52 02 	lds	r25, 0x0252
    564a:	8f 85       	ldd	r24, Y+15	; 0x0f
    564c:	89 17       	cp	r24, r25
    564e:	48 f3       	brcs	.-46     	; 0x5622 <check_ID+0x3c>
				Local_State=1;
				return Local_State;
			}
		}

		Local_u8trials++;
    5650:	88 89       	ldd	r24, Y+16	; 0x10
    5652:	8f 5f       	subi	r24, 0xFF	; 255
    5654:	88 8b       	std	Y+16, r24	; 0x10
		LCD_voidClearScreen();
    5656:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("Wrong ID");
    5662:	8a e7       	ldi	r24, 0x7A	; 122
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	aa ef       	ldi	r26, 0xFA	; 250
    5670:	b3 e4       	ldi	r27, 0x43	; 67
    5672:	8b 87       	std	Y+11, r24	; 0x0b
    5674:	9c 87       	std	Y+12, r25	; 0x0c
    5676:	ad 87       	std	Y+13, r26	; 0x0d
    5678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    567a:	6b 85       	ldd	r22, Y+11	; 0x0b
    567c:	7c 85       	ldd	r23, Y+12	; 0x0c
    567e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5680:	9e 85       	ldd	r25, Y+14	; 0x0e
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	4a e7       	ldi	r20, 0x7A	; 122
    5688:	53 e4       	ldi	r21, 0x43	; 67
    568a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	8f 83       	std	Y+7, r24	; 0x07
    5694:	98 87       	std	Y+8, r25	; 0x08
    5696:	a9 87       	std	Y+9, r26	; 0x09
    5698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    569a:	6f 81       	ldd	r22, Y+7	; 0x07
    569c:	78 85       	ldd	r23, Y+8	; 0x08
    569e:	89 85       	ldd	r24, Y+9	; 0x09
    56a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e8       	ldi	r20, 0x80	; 128
    56a8:	5f e3       	ldi	r21, 0x3F	; 63
    56aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    56ae:	88 23       	and	r24, r24
    56b0:	2c f4       	brge	.+10     	; 0x56bc <check_ID+0xd6>
		__ticks = 1;
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	9e 83       	std	Y+6, r25	; 0x06
    56b8:	8d 83       	std	Y+5, r24	; 0x05
    56ba:	3f c0       	rjmp	.+126    	; 0x573a <check_ID+0x154>
	else if (__tmp > 65535)
    56bc:	6f 81       	ldd	r22, Y+7	; 0x07
    56be:	78 85       	ldd	r23, Y+8	; 0x08
    56c0:	89 85       	ldd	r24, Y+9	; 0x09
    56c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c4:	20 e0       	ldi	r18, 0x00	; 0
    56c6:	3f ef       	ldi	r19, 0xFF	; 255
    56c8:	4f e7       	ldi	r20, 0x7F	; 127
    56ca:	57 e4       	ldi	r21, 0x47	; 71
    56cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    56d0:	18 16       	cp	r1, r24
    56d2:	4c f5       	brge	.+82     	; 0x5726 <check_ID+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56da:	9e 85       	ldd	r25, Y+14	; 0x0e
    56dc:	20 e0       	ldi	r18, 0x00	; 0
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	40 e2       	ldi	r20, 0x20	; 32
    56e2:	51 e4       	ldi	r21, 0x41	; 65
    56e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56e8:	dc 01       	movw	r26, r24
    56ea:	cb 01       	movw	r24, r22
    56ec:	bc 01       	movw	r22, r24
    56ee:	cd 01       	movw	r24, r26
    56f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f4:	dc 01       	movw	r26, r24
    56f6:	cb 01       	movw	r24, r22
    56f8:	9e 83       	std	Y+6, r25	; 0x06
    56fa:	8d 83       	std	Y+5, r24	; 0x05
    56fc:	0f c0       	rjmp	.+30     	; 0x571c <check_ID+0x136>
    56fe:	89 e1       	ldi	r24, 0x19	; 25
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	9c 83       	std	Y+4, r25	; 0x04
    5704:	8b 83       	std	Y+3, r24	; 0x03
    5706:	8b 81       	ldd	r24, Y+3	; 0x03
    5708:	9c 81       	ldd	r25, Y+4	; 0x04
    570a:	01 97       	sbiw	r24, 0x01	; 1
    570c:	f1 f7       	brne	.-4      	; 0x570a <check_ID+0x124>
    570e:	9c 83       	std	Y+4, r25	; 0x04
    5710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5712:	8d 81       	ldd	r24, Y+5	; 0x05
    5714:	9e 81       	ldd	r25, Y+6	; 0x06
    5716:	01 97       	sbiw	r24, 0x01	; 1
    5718:	9e 83       	std	Y+6, r25	; 0x06
    571a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    571c:	8d 81       	ldd	r24, Y+5	; 0x05
    571e:	9e 81       	ldd	r25, Y+6	; 0x06
    5720:	00 97       	sbiw	r24, 0x00	; 0
    5722:	69 f7       	brne	.-38     	; 0x56fe <check_ID+0x118>
    5724:	14 c0       	rjmp	.+40     	; 0x574e <check_ID+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5726:	6f 81       	ldd	r22, Y+7	; 0x07
    5728:	78 85       	ldd	r23, Y+8	; 0x08
    572a:	89 85       	ldd	r24, Y+9	; 0x09
    572c:	9a 85       	ldd	r25, Y+10	; 0x0a
    572e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5732:	dc 01       	movw	r26, r24
    5734:	cb 01       	movw	r24, r22
    5736:	9e 83       	std	Y+6, r25	; 0x06
    5738:	8d 83       	std	Y+5, r24	; 0x05
    573a:	8d 81       	ldd	r24, Y+5	; 0x05
    573c:	9e 81       	ldd	r25, Y+6	; 0x06
    573e:	9a 83       	std	Y+2, r25	; 0x02
    5740:	89 83       	std	Y+1, r24	; 0x01
    5742:	89 81       	ldd	r24, Y+1	; 0x01
    5744:	9a 81       	ldd	r25, Y+2	; 0x02
    5746:	01 97       	sbiw	r24, 0x01	; 1
    5748:	f1 f7       	brne	.-4      	; 0x5746 <check_ID+0x160>
    574a:	9a 83       	std	Y+2, r25	; 0x02
    574c:	89 83       	std	Y+1, r24	; 0x01
u8 check_ID()
{
	u8 Local_u8User_ID;
	u8 Local_State=0;
	u8 Local_u8trials=0;
	while(Local_u8trials<3)
    574e:	88 89       	ldd	r24, Y+16	; 0x10
    5750:	83 30       	cpi	r24, 0x03	; 3
    5752:	08 f4       	brcc	.+2      	; 0x5756 <check_ID+0x170>
    5754:	55 cf       	rjmp	.-342    	; 0x5600 <check_ID+0x1a>
		LCD_voidClearScreen();
		LCD_voidSetPosition(0,0);
		LCD_voidWriteString("Wrong ID");
		_delay_ms(500);
	}
	return Local_State;
    5756:	89 89       	ldd	r24, Y+17	; 0x11
    5758:	8b 8b       	std	Y+19, r24	; 0x13
    575a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    575c:	63 96       	adiw	r28, 0x13	; 19
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	cd bf       	out	0x3d, r28	; 61
    5768:	cf 91       	pop	r28
    576a:	df 91       	pop	r29
    576c:	08 95       	ret

0000576e <check_Password>:


u8 check_Password()
{
    576e:	df 93       	push	r29
    5770:	cf 93       	push	r28
    5772:	cd b7       	in	r28, 0x3d	; 61
    5774:	de b7       	in	r29, 0x3e	; 62
    5776:	63 97       	sbiw	r28, 0x13	; 19
    5778:	0f b6       	in	r0, 0x3f	; 63
    577a:	f8 94       	cli
    577c:	de bf       	out	0x3e, r29	; 62
    577e:	0f be       	out	0x3f, r0	; 63
    5780:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8User_pass;
	u8 Local_State=0;
    5782:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8trials=0;
    5784:	18 8a       	std	Y+16, r1	; 0x10
    5786:	a7 c0       	rjmp	.+334    	; 0x58d6 <check_Password+0x168>
	while(Local_u8trials<3)
	{
		LCD_voidClearScreen();
    5788:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    578c:	80 e0       	ldi	r24, 0x00	; 0
    578e:	60 e0       	ldi	r22, 0x00	; 0
    5790:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("Enter Ur Pass");
    5794:	83 e8       	ldi	r24, 0x83	; 131
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
		LCD_voidCursorOn();
    579c:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <LCD_voidCursorOn>
		Local_u8User_pass=Get_ID_orPass();
    57a0:	0e 94 34 2a 	call	0x5468	; 0x5468 <Get_ID_orPass>
    57a4:	8a 8b       	std	Y+18, r24	; 0x12

		for(u8 local_u8Iterator=0;local_u8Iterator<GlobalPstr_User_Data.UsersCount;local_u8Iterator++)
    57a6:	1f 86       	std	Y+15, r1	; 0x0f
    57a8:	12 c0       	rjmp	.+36     	; 0x57ce <check_Password+0x60>
		{
			if(Local_u8User_pass==GlobalPstr_User_Data.UserPAS[local_u8Iterator])
    57aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    57ac:	88 2f       	mov	r24, r24
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	fc 01       	movw	r30, r24
    57b2:	e2 5c       	subi	r30, 0xC2	; 194
    57b4:	fd 4f       	sbci	r31, 0xFD	; 253
    57b6:	90 81       	ld	r25, Z
    57b8:	8a 89       	ldd	r24, Y+18	; 0x12
    57ba:	98 17       	cp	r25, r24
    57bc:	29 f4       	brne	.+10     	; 0x57c8 <check_Password+0x5a>
			{
				Local_State=1;
    57be:	81 e0       	ldi	r24, 0x01	; 1
    57c0:	89 8b       	std	Y+17, r24	; 0x11
				return Local_State;
    57c2:	89 89       	ldd	r24, Y+17	; 0x11
    57c4:	8b 8b       	std	Y+19, r24	; 0x13
    57c6:	8d c0       	rjmp	.+282    	; 0x58e2 <check_Password+0x174>
		LCD_voidSetPosition(0,0);
		LCD_voidWriteString("Enter Ur Pass");
		LCD_voidCursorOn();
		Local_u8User_pass=Get_ID_orPass();

		for(u8 local_u8Iterator=0;local_u8Iterator<GlobalPstr_User_Data.UsersCount;local_u8Iterator++)
    57c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    57ca:	8f 5f       	subi	r24, 0xFF	; 255
    57cc:	8f 87       	std	Y+15, r24	; 0x0f
    57ce:	90 91 52 02 	lds	r25, 0x0252
    57d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    57d4:	89 17       	cp	r24, r25
    57d6:	48 f3       	brcs	.-46     	; 0x57aa <check_Password+0x3c>
				Local_State=1;
				return Local_State;
			}
		}

		Local_u8trials++;
    57d8:	88 89       	ldd	r24, Y+16	; 0x10
    57da:	8f 5f       	subi	r24, 0xFF	; 255
    57dc:	88 8b       	std	Y+16, r24	; 0x10
		LCD_voidClearScreen();
    57de:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    57e2:	80 e0       	ldi	r24, 0x00	; 0
    57e4:	60 e0       	ldi	r22, 0x00	; 0
    57e6:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("Wrong Password");
    57ea:	81 e9       	ldi	r24, 0x91	; 145
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
    57f2:	80 e0       	ldi	r24, 0x00	; 0
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	aa ef       	ldi	r26, 0xFA	; 250
    57f8:	b3 e4       	ldi	r27, 0x43	; 67
    57fa:	8b 87       	std	Y+11, r24	; 0x0b
    57fc:	9c 87       	std	Y+12, r25	; 0x0c
    57fe:	ad 87       	std	Y+13, r26	; 0x0d
    5800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5802:	6b 85       	ldd	r22, Y+11	; 0x0b
    5804:	7c 85       	ldd	r23, Y+12	; 0x0c
    5806:	8d 85       	ldd	r24, Y+13	; 0x0d
    5808:	9e 85       	ldd	r25, Y+14	; 0x0e
    580a:	20 e0       	ldi	r18, 0x00	; 0
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	4a e7       	ldi	r20, 0x7A	; 122
    5810:	53 e4       	ldi	r21, 0x43	; 67
    5812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5816:	dc 01       	movw	r26, r24
    5818:	cb 01       	movw	r24, r22
    581a:	8f 83       	std	Y+7, r24	; 0x07
    581c:	98 87       	std	Y+8, r25	; 0x08
    581e:	a9 87       	std	Y+9, r26	; 0x09
    5820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5822:	6f 81       	ldd	r22, Y+7	; 0x07
    5824:	78 85       	ldd	r23, Y+8	; 0x08
    5826:	89 85       	ldd	r24, Y+9	; 0x09
    5828:	9a 85       	ldd	r25, Y+10	; 0x0a
    582a:	20 e0       	ldi	r18, 0x00	; 0
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	40 e8       	ldi	r20, 0x80	; 128
    5830:	5f e3       	ldi	r21, 0x3F	; 63
    5832:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5836:	88 23       	and	r24, r24
    5838:	2c f4       	brge	.+10     	; 0x5844 <check_Password+0xd6>
		__ticks = 1;
    583a:	81 e0       	ldi	r24, 0x01	; 1
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	9e 83       	std	Y+6, r25	; 0x06
    5840:	8d 83       	std	Y+5, r24	; 0x05
    5842:	3f c0       	rjmp	.+126    	; 0x58c2 <check_Password+0x154>
	else if (__tmp > 65535)
    5844:	6f 81       	ldd	r22, Y+7	; 0x07
    5846:	78 85       	ldd	r23, Y+8	; 0x08
    5848:	89 85       	ldd	r24, Y+9	; 0x09
    584a:	9a 85       	ldd	r25, Y+10	; 0x0a
    584c:	20 e0       	ldi	r18, 0x00	; 0
    584e:	3f ef       	ldi	r19, 0xFF	; 255
    5850:	4f e7       	ldi	r20, 0x7F	; 127
    5852:	57 e4       	ldi	r21, 0x47	; 71
    5854:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5858:	18 16       	cp	r1, r24
    585a:	4c f5       	brge	.+82     	; 0x58ae <check_Password+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    585c:	6b 85       	ldd	r22, Y+11	; 0x0b
    585e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5860:	8d 85       	ldd	r24, Y+13	; 0x0d
    5862:	9e 85       	ldd	r25, Y+14	; 0x0e
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	40 e2       	ldi	r20, 0x20	; 32
    586a:	51 e4       	ldi	r21, 0x41	; 65
    586c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5870:	dc 01       	movw	r26, r24
    5872:	cb 01       	movw	r24, r22
    5874:	bc 01       	movw	r22, r24
    5876:	cd 01       	movw	r24, r26
    5878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	9e 83       	std	Y+6, r25	; 0x06
    5882:	8d 83       	std	Y+5, r24	; 0x05
    5884:	0f c0       	rjmp	.+30     	; 0x58a4 <check_Password+0x136>
    5886:	89 e1       	ldi	r24, 0x19	; 25
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	9c 83       	std	Y+4, r25	; 0x04
    588c:	8b 83       	std	Y+3, r24	; 0x03
    588e:	8b 81       	ldd	r24, Y+3	; 0x03
    5890:	9c 81       	ldd	r25, Y+4	; 0x04
    5892:	01 97       	sbiw	r24, 0x01	; 1
    5894:	f1 f7       	brne	.-4      	; 0x5892 <check_Password+0x124>
    5896:	9c 83       	std	Y+4, r25	; 0x04
    5898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    589a:	8d 81       	ldd	r24, Y+5	; 0x05
    589c:	9e 81       	ldd	r25, Y+6	; 0x06
    589e:	01 97       	sbiw	r24, 0x01	; 1
    58a0:	9e 83       	std	Y+6, r25	; 0x06
    58a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58a4:	8d 81       	ldd	r24, Y+5	; 0x05
    58a6:	9e 81       	ldd	r25, Y+6	; 0x06
    58a8:	00 97       	sbiw	r24, 0x00	; 0
    58aa:	69 f7       	brne	.-38     	; 0x5886 <check_Password+0x118>
    58ac:	14 c0       	rjmp	.+40     	; 0x58d6 <check_Password+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ae:	6f 81       	ldd	r22, Y+7	; 0x07
    58b0:	78 85       	ldd	r23, Y+8	; 0x08
    58b2:	89 85       	ldd	r24, Y+9	; 0x09
    58b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	9e 83       	std	Y+6, r25	; 0x06
    58c0:	8d 83       	std	Y+5, r24	; 0x05
    58c2:	8d 81       	ldd	r24, Y+5	; 0x05
    58c4:	9e 81       	ldd	r25, Y+6	; 0x06
    58c6:	9a 83       	std	Y+2, r25	; 0x02
    58c8:	89 83       	std	Y+1, r24	; 0x01
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	9a 81       	ldd	r25, Y+2	; 0x02
    58ce:	01 97       	sbiw	r24, 0x01	; 1
    58d0:	f1 f7       	brne	.-4      	; 0x58ce <check_Password+0x160>
    58d2:	9a 83       	std	Y+2, r25	; 0x02
    58d4:	89 83       	std	Y+1, r24	; 0x01
u8 check_Password()
{
	u8 Local_u8User_pass;
	u8 Local_State=0;
	u8 Local_u8trials=0;
	while(Local_u8trials<3)
    58d6:	88 89       	ldd	r24, Y+16	; 0x10
    58d8:	83 30       	cpi	r24, 0x03	; 3
    58da:	08 f4       	brcc	.+2      	; 0x58de <check_Password+0x170>
    58dc:	55 cf       	rjmp	.-342    	; 0x5788 <check_Password+0x1a>
		LCD_voidClearScreen();
		LCD_voidSetPosition(0,0);
		LCD_voidWriteString("Wrong Password");
		_delay_ms(500);
	}
	return Local_State;
    58de:	89 89       	ldd	r24, Y+17	; 0x11
    58e0:	8b 8b       	std	Y+19, r24	; 0x13
    58e2:	8b 89       	ldd	r24, Y+19	; 0x13
}
    58e4:	63 96       	adiw	r28, 0x13	; 19
    58e6:	0f b6       	in	r0, 0x3f	; 63
    58e8:	f8 94       	cli
    58ea:	de bf       	out	0x3e, r29	; 62
    58ec:	0f be       	out	0x3f, r0	; 63
    58ee:	cd bf       	out	0x3d, r28	; 61
    58f0:	cf 91       	pop	r28
    58f2:	df 91       	pop	r29
    58f4:	08 95       	ret

000058f6 <Login_verification>:

u8 Login_verification()
{
    58f6:	df 93       	push	r29
    58f8:	cf 93       	push	r28
    58fa:	0f 92       	push	r0
    58fc:	cd b7       	in	r28, 0x3d	; 61
    58fe:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Is_user=0;
    5900:	19 82       	std	Y+1, r1	; 0x01
	if(check_ID())
    5902:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <check_ID>
    5906:	88 23       	and	r24, r24
    5908:	61 f0       	breq	.+24     	; 0x5922 <Login_verification+0x2c>
	{
		if(check_Password())
    590a:	0e 94 b7 2b 	call	0x576e	; 0x576e <check_Password>
    590e:	88 23       	and	r24, r24
    5910:	39 f0       	breq	.+14     	; 0x5920 <Login_verification+0x2a>
		{
			Local_u8Is_user=1;
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	89 83       	std	Y+1, r24	; 0x01
			return Local_u8Is_user;
    5916:	89 81       	ldd	r24, Y+1	; 0x01
	{
		while(1);
		//out of trials, take action
	}

}
    5918:	0f 90       	pop	r0
    591a:	cf 91       	pop	r28
    591c:	df 91       	pop	r29
    591e:	08 95       	ret
    5920:	ff cf       	rjmp	.-2      	; 0x5920 <Login_verification+0x2a>
    5922:	ff cf       	rjmp	.-2      	; 0x5922 <Login_verification+0x2c>

00005924 <Display_options>:

u8 Display_options()
{
    5924:	df 93       	push	r29
    5926:	cf 93       	push	r28
    5928:	0f 92       	push	r0
    592a:	cd b7       	in	r28, 0x3d	; 61
    592c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearScreen();
    592e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
	LCD_voidSetPosition(0,0);
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	60 e0       	ldi	r22, 0x00	; 0
    5936:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
	LCD_voidWriteString("1-Users");
    593a:	80 ea       	ldi	r24, 0xA0	; 160
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
	LCD_voidSetPosition(1,0);
    5942:	81 e0       	ldi	r24, 0x01	; 1
    5944:	60 e0       	ldi	r22, 0x00	; 0
    5946:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
	LCD_voidWriteString("2-LEDs");
    594a:	88 ea       	ldi	r24, 0xA8	; 168
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
	u8 Local_Pressed_Key=0;
    5952:	19 82       	std	Y+1, r1	; 0x01
	Keypad_enuGetPressedKey(&Local_Pressed_Key);
    5954:	ce 01       	movw	r24, r28
    5956:	01 96       	adiw	r24, 0x01	; 1
    5958:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <Keypad_enuGetPressedKey>
	//LCD_voidClearScreen();

	return (Local_Pressed_Key-'0');
    595c:	89 81       	ldd	r24, Y+1	; 0x01
    595e:	80 53       	subi	r24, 0x30	; 48
}
    5960:	0f 90       	pop	r0
    5962:	cf 91       	pop	r28
    5964:	df 91       	pop	r29
    5966:	08 95       	ret

00005968 <LEDs_Control>:

void LEDs_Control()
{
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	00 d0       	rcall	.+0      	; 0x596e <LEDs_Control+0x6>
    596e:	0f 92       	push	r0
    5970:	cd b7       	in	r28, 0x3d	; 61
    5972:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearScreen();
    5974:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
	LCD_voidSetPosition(0,0);
    5978:	80 e0       	ldi	r24, 0x00	; 0
    597a:	60 e0       	ldi	r22, 0x00	; 0
    597c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
	LCD_voidWriteString("1-Open");
    5980:	8f ea       	ldi	r24, 0xAF	; 175
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
	LCD_voidSetPosition(1,0);
    5988:	81 e0       	ldi	r24, 0x01	; 1
    598a:	60 e0       	ldi	r22, 0x00	; 0
    598c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
	LCD_voidWriteString("2-Close");
    5990:	86 eb       	ldi	r24, 0xB6	; 182
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>

	u8 Local_Pressed_Key=0;
    5998:	19 82       	std	Y+1, r1	; 0x01
	Keypad_enuGetPressedKey(&Local_Pressed_Key);
    599a:	ce 01       	movw	r24, r28
    599c:	01 96       	adiw	r24, 0x01	; 1
    599e:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <Keypad_enuGetPressedKey>
	Local_Pressed_Key-='0';
    59a2:	89 81       	ldd	r24, Y+1	; 0x01
    59a4:	80 53       	subi	r24, 0x30	; 48
    59a6:	89 83       	std	Y+1, r24	; 0x01
	//LCD_voidClearScreen();

	if(Local_Pressed_Key==1)
    59a8:	89 81       	ldd	r24, Y+1	; 0x01
    59aa:	81 30       	cpi	r24, 0x01	; 1
    59ac:	61 f5       	brne	.+88     	; 0x5a06 <LEDs_Control+0x9e>
	{
		LCD_voidClearScreen();
    59ae:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    59b2:	80 e0       	ldi	r24, 0x00	; 0
    59b4:	60 e0       	ldi	r22, 0x00	; 0
    59b6:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("1-LED 1");
    59ba:	8e eb       	ldi	r24, 0xBE	; 190
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>

		LCD_voidSetPosition(1,0);
    59c2:	81 e0       	ldi	r24, 0x01	; 1
    59c4:	60 e0       	ldi	r22, 0x00	; 0
    59c6:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("2-LED 2");
    59ca:	86 ec       	ldi	r24, 0xC6	; 198
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>

		u8 Local_Pressed_Key=0;
    59d2:	1a 82       	std	Y+2, r1	; 0x02
		Keypad_enuGetPressedKey(&Local_Pressed_Key);
    59d4:	ce 01       	movw	r24, r28
    59d6:	02 96       	adiw	r24, 0x02	; 2
    59d8:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <Keypad_enuGetPressedKey>
		Local_Pressed_Key-='0';
    59dc:	8a 81       	ldd	r24, Y+2	; 0x02
    59de:	80 53       	subi	r24, 0x30	; 48
    59e0:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidClearScreen();
    59e2:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>

		if(Local_Pressed_Key==1)
    59e6:	8a 81       	ldd	r24, Y+2	; 0x02
    59e8:	81 30       	cpi	r24, 0x01	; 1
    59ea:	29 f4       	brne	.+10     	; 0x59f6 <LEDs_Control+0x8e>
		{
			LED_enuON(LED1_PORT,LED1_PIN);
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	62 e0       	ldi	r22, 0x02	; 2
    59f0:	0e 94 20 19 	call	0x3240	; 0x3240 <LED_enuON>
    59f4:	34 c0       	rjmp	.+104    	; 0x5a5e <LEDs_Control+0xf6>
		}
		else if(Local_Pressed_Key==2)
    59f6:	8a 81       	ldd	r24, Y+2	; 0x02
    59f8:	82 30       	cpi	r24, 0x02	; 2
    59fa:	89 f5       	brne	.+98     	; 0x5a5e <LEDs_Control+0xf6>
		{
			LED_enuON(LED2_PORT,LED2_PIN);
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	63 e0       	ldi	r22, 0x03	; 3
    5a00:	0e 94 20 19 	call	0x3240	; 0x3240 <LED_enuON>
    5a04:	2c c0       	rjmp	.+88     	; 0x5a5e <LEDs_Control+0xf6>
		}
	}
	else if(Local_Pressed_Key==2)
    5a06:	89 81       	ldd	r24, Y+1	; 0x01
    5a08:	82 30       	cpi	r24, 0x02	; 2
    5a0a:	49 f5       	brne	.+82     	; 0x5a5e <LEDs_Control+0xf6>
	{
		LCD_voidClearScreen();
    5a0c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    5a10:	80 e0       	ldi	r24, 0x00	; 0
    5a12:	60 e0       	ldi	r22, 0x00	; 0
    5a14:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("1-LED 1");
    5a18:	8e eb       	ldi	r24, 0xBE	; 190
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>

		LCD_voidSetPosition(1,0);
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	60 e0       	ldi	r22, 0x00	; 0
    5a24:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("2-LED 2");
    5a28:	86 ec       	ldi	r24, 0xC6	; 198
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>

		u8 Local_Pressed_Key=0;
    5a30:	1b 82       	std	Y+3, r1	; 0x03
		Keypad_enuGetPressedKey(&Local_Pressed_Key);
    5a32:	ce 01       	movw	r24, r28
    5a34:	03 96       	adiw	r24, 0x03	; 3
    5a36:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <Keypad_enuGetPressedKey>
		Local_Pressed_Key-='0';
    5a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a3c:	80 53       	subi	r24, 0x30	; 48
    5a3e:	8b 83       	std	Y+3, r24	; 0x03
		//LCD_voidClearScreen();

		if(Local_Pressed_Key==1)
    5a40:	8b 81       	ldd	r24, Y+3	; 0x03
    5a42:	81 30       	cpi	r24, 0x01	; 1
    5a44:	29 f4       	brne	.+10     	; 0x5a50 <LEDs_Control+0xe8>
		{
			LED_enuOFF(LED1_PORT,LED1_PIN);
    5a46:	81 e0       	ldi	r24, 0x01	; 1
    5a48:	62 e0       	ldi	r22, 0x02	; 2
    5a4a:	0e 94 33 19 	call	0x3266	; 0x3266 <LED_enuOFF>
    5a4e:	07 c0       	rjmp	.+14     	; 0x5a5e <LEDs_Control+0xf6>
		}
		else if(Local_Pressed_Key==2)
    5a50:	8b 81       	ldd	r24, Y+3	; 0x03
    5a52:	82 30       	cpi	r24, 0x02	; 2
    5a54:	21 f4       	brne	.+8      	; 0x5a5e <LEDs_Control+0xf6>
		{
			LED_enuOFF(LED2_PORT,LED2_PIN);
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	63 e0       	ldi	r22, 0x03	; 3
    5a5a:	0e 94 33 19 	call	0x3266	; 0x3266 <LED_enuOFF>
		}
	}
}
    5a5e:	0f 90       	pop	r0
    5a60:	0f 90       	pop	r0
    5a62:	0f 90       	pop	r0
    5a64:	cf 91       	pop	r28
    5a66:	df 91       	pop	r29
    5a68:	08 95       	ret

00005a6a <Urgent_mode>:
 * pre: called after start()
 * post:returns a flag to indicate if it is a user or not to continue to options function
 * parameters: a keypad flag that start() returns
 */
u8 Urgent_mode(u8 copy_u8KEYPAD_mode)
{
    5a6a:	df 93       	push	r29
    5a6c:	cf 93       	push	r28
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	62 97       	sbiw	r28, 0x12	; 18
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	f8 94       	cli
    5a78:	de bf       	out	0x3e, r29	; 62
    5a7a:	0f be       	out	0x3f, r0	; 63
    5a7c:	cd bf       	out	0x3d, r28	; 61
    5a7e:	89 8b       	std	Y+17, r24	; 0x11
	if(copy_u8KEYPAD_mode==0)
    5a80:	89 89       	ldd	r24, Y+17	; 0x11
    5a82:	88 23       	and	r24, r24
    5a84:	09 f0       	breq	.+2      	; 0x5a88 <Urgent_mode+0x1e>
    5a86:	96 c0       	rjmp	.+300    	; 0x5bb4 <Urgent_mode+0x14a>
	{
		u8 Local_u8Is_User=0;
    5a88:	18 8a       	std	Y+16, r1	; 0x10
		Local_u8Is_User=Login_verification();
    5a8a:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <Login_verification>
    5a8e:	88 8b       	std	Y+16, r24	; 0x10
		LCD_voidCursorOff();
    5a90:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <LCD_voidCursorOff>
		LCD_voidClearScreen();
    5a94:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>
		LCD_voidSetPosition(0,0);
    5a98:	80 e0       	ldi	r24, 0x00	; 0
    5a9a:	60 e0       	ldi	r22, 0x00	; 0
    5a9c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_voidSetPosition>
		LCD_voidWriteString("Succeeded");
    5aa0:	8e ec       	ldi	r24, 0xCE	; 206
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <LCD_voidWriteString>
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	a6 e1       	ldi	r26, 0x16	; 22
    5aae:	b3 e4       	ldi	r27, 0x43	; 67
    5ab0:	8b 87       	std	Y+11, r24	; 0x0b
    5ab2:	9c 87       	std	Y+12, r25	; 0x0c
    5ab4:	ad 87       	std	Y+13, r26	; 0x0d
    5ab6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    5abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ac0:	20 e0       	ldi	r18, 0x00	; 0
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	4a e7       	ldi	r20, 0x7A	; 122
    5ac6:	53 e4       	ldi	r21, 0x43	; 67
    5ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5acc:	dc 01       	movw	r26, r24
    5ace:	cb 01       	movw	r24, r22
    5ad0:	8f 83       	std	Y+7, r24	; 0x07
    5ad2:	98 87       	std	Y+8, r25	; 0x08
    5ad4:	a9 87       	std	Y+9, r26	; 0x09
    5ad6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    5ada:	78 85       	ldd	r23, Y+8	; 0x08
    5adc:	89 85       	ldd	r24, Y+9	; 0x09
    5ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	40 e8       	ldi	r20, 0x80	; 128
    5ae6:	5f e3       	ldi	r21, 0x3F	; 63
    5ae8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5aec:	88 23       	and	r24, r24
    5aee:	2c f4       	brge	.+10     	; 0x5afa <Urgent_mode+0x90>
		__ticks = 1;
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	9e 83       	std	Y+6, r25	; 0x06
    5af6:	8d 83       	std	Y+5, r24	; 0x05
    5af8:	3f c0       	rjmp	.+126    	; 0x5b78 <Urgent_mode+0x10e>
	else if (__tmp > 65535)
    5afa:	6f 81       	ldd	r22, Y+7	; 0x07
    5afc:	78 85       	ldd	r23, Y+8	; 0x08
    5afe:	89 85       	ldd	r24, Y+9	; 0x09
    5b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	3f ef       	ldi	r19, 0xFF	; 255
    5b06:	4f e7       	ldi	r20, 0x7F	; 127
    5b08:	57 e4       	ldi	r21, 0x47	; 71
    5b0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5b0e:	18 16       	cp	r1, r24
    5b10:	4c f5       	brge	.+82     	; 0x5b64 <Urgent_mode+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	40 e2       	ldi	r20, 0x20	; 32
    5b20:	51 e4       	ldi	r21, 0x41	; 65
    5b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b26:	dc 01       	movw	r26, r24
    5b28:	cb 01       	movw	r24, r22
    5b2a:	bc 01       	movw	r22, r24
    5b2c:	cd 01       	movw	r24, r26
    5b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b32:	dc 01       	movw	r26, r24
    5b34:	cb 01       	movw	r24, r22
    5b36:	9e 83       	std	Y+6, r25	; 0x06
    5b38:	8d 83       	std	Y+5, r24	; 0x05
    5b3a:	0f c0       	rjmp	.+30     	; 0x5b5a <Urgent_mode+0xf0>
    5b3c:	89 e1       	ldi	r24, 0x19	; 25
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	9c 83       	std	Y+4, r25	; 0x04
    5b42:	8b 83       	std	Y+3, r24	; 0x03
    5b44:	8b 81       	ldd	r24, Y+3	; 0x03
    5b46:	9c 81       	ldd	r25, Y+4	; 0x04
    5b48:	01 97       	sbiw	r24, 0x01	; 1
    5b4a:	f1 f7       	brne	.-4      	; 0x5b48 <Urgent_mode+0xde>
    5b4c:	9c 83       	std	Y+4, r25	; 0x04
    5b4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b50:	8d 81       	ldd	r24, Y+5	; 0x05
    5b52:	9e 81       	ldd	r25, Y+6	; 0x06
    5b54:	01 97       	sbiw	r24, 0x01	; 1
    5b56:	9e 83       	std	Y+6, r25	; 0x06
    5b58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b5e:	00 97       	sbiw	r24, 0x00	; 0
    5b60:	69 f7       	brne	.-38     	; 0x5b3c <Urgent_mode+0xd2>
    5b62:	14 c0       	rjmp	.+40     	; 0x5b8c <Urgent_mode+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b64:	6f 81       	ldd	r22, Y+7	; 0x07
    5b66:	78 85       	ldd	r23, Y+8	; 0x08
    5b68:	89 85       	ldd	r24, Y+9	; 0x09
    5b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b70:	dc 01       	movw	r26, r24
    5b72:	cb 01       	movw	r24, r22
    5b74:	9e 83       	std	Y+6, r25	; 0x06
    5b76:	8d 83       	std	Y+5, r24	; 0x05
    5b78:	8d 81       	ldd	r24, Y+5	; 0x05
    5b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b7c:	9a 83       	std	Y+2, r25	; 0x02
    5b7e:	89 83       	std	Y+1, r24	; 0x01
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	9a 81       	ldd	r25, Y+2	; 0x02
    5b84:	01 97       	sbiw	r24, 0x01	; 1
    5b86:	f1 f7       	brne	.-4      	; 0x5b84 <Urgent_mode+0x11a>
    5b88:	9a 83       	std	Y+2, r25	; 0x02
    5b8a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(150);
		LCD_voidClearScreen();
    5b8c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_voidClearScreen>

		u8 Local_Pressed_Key= Display_options();
    5b90:	0e 94 92 2c 	call	0x5924	; 0x5924 <Display_options>
    5b94:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_Pressed_Key==1)
    5b96:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b98:	81 30       	cpi	r24, 0x01	; 1
    5b9a:	19 f4       	brne	.+6      	; 0x5ba2 <Urgent_mode+0x138>
		{
			Show_Data();
    5b9c:	0e 94 ce 28 	call	0x519c	; 0x519c <Show_Data>
    5ba0:	05 c0       	rjmp	.+10     	; 0x5bac <Urgent_mode+0x142>
		}
		else if(Local_Pressed_Key==2)
    5ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ba4:	82 30       	cpi	r24, 0x02	; 2
    5ba6:	11 f4       	brne	.+4      	; 0x5bac <Urgent_mode+0x142>
		{
			LEDs_Control();
    5ba8:	0e 94 b4 2c 	call	0x5968	; 0x5968 <LEDs_Control>
		}


		return Local_u8Is_User;
    5bac:	88 89       	ldd	r24, Y+16	; 0x10
    5bae:	8a 8b       	std	Y+18, r24	; 0x12
	}
}
    5bb0:	8a 89       	ldd	r24, Y+18	; 0x12
    5bb2:	00 c0       	rjmp	.+0      	; 0x5bb4 <Urgent_mode+0x14a>
    5bb4:	62 96       	adiw	r28, 0x12	; 18
    5bb6:	0f b6       	in	r0, 0x3f	; 63
    5bb8:	f8 94       	cli
    5bba:	de bf       	out	0x3e, r29	; 62
    5bbc:	0f be       	out	0x3f, r0	; 63
    5bbe:	cd bf       	out	0x3d, r28	; 61
    5bc0:	cf 91       	pop	r28
    5bc2:	df 91       	pop	r29
    5bc4:	08 95       	ret

00005bc6 <main>:
#include"SRV/EEPROM_serv.h"
#include"MCAL/TWI/TWI_int.h"


int main()
{
    5bc6:	df 93       	push	r29
    5bc8:	cf 93       	push	r28
    5bca:	0f 92       	push	r0
    5bcc:	cd b7       	in	r28, 0x3d	; 61
    5bce:	de b7       	in	r29, 0x3e	; 62

	/*
	 * testing
	 */

	DIO_enuSetPinDIR(DIO_u8PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
    5bd0:	82 e0       	ldi	r24, 0x02	; 2
    5bd2:	60 e0       	ldi	r22, 0x00	; 0
    5bd4:	41 e0       	ldi	r20, 0x01	; 1
    5bd6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(DIO_u8PORTC,DIO_PIN1,DIO_PIN_OUTPUT);
    5bda:	82 e0       	ldi	r24, 0x02	; 2
    5bdc:	61 e0       	ldi	r22, 0x01	; 1
    5bde:	41 e0       	ldi	r20, 0x01	; 1
    5be0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <DIO_enuSetPinDIR>
	/* test start function return, 0 is expected */
	u8 flag=Start();
    5be4:	0e 94 84 29 	call	0x5308	; 0x5308 <Start>
    5be8:	89 83       	std	Y+1, r24	; 0x01

	Urgent_mode(flag);
    5bea:	89 81       	ldd	r24, Y+1	; 0x01
    5bec:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <Urgent_mode>
    5bf0:	ff cf       	rjmp	.-2      	; 0x5bf0 <main+0x2a>

00005bf2 <__udivmodqi4>:
    5bf2:	99 1b       	sub	r25, r25
    5bf4:	79 e0       	ldi	r23, 0x09	; 9
    5bf6:	04 c0       	rjmp	.+8      	; 0x5c00 <__udivmodqi4_ep>

00005bf8 <__udivmodqi4_loop>:
    5bf8:	99 1f       	adc	r25, r25
    5bfa:	96 17       	cp	r25, r22
    5bfc:	08 f0       	brcs	.+2      	; 0x5c00 <__udivmodqi4_ep>
    5bfe:	96 1b       	sub	r25, r22

00005c00 <__udivmodqi4_ep>:
    5c00:	88 1f       	adc	r24, r24
    5c02:	7a 95       	dec	r23
    5c04:	c9 f7       	brne	.-14     	; 0x5bf8 <__udivmodqi4_loop>
    5c06:	80 95       	com	r24
    5c08:	08 95       	ret

00005c0a <__udivmodhi4>:
    5c0a:	aa 1b       	sub	r26, r26
    5c0c:	bb 1b       	sub	r27, r27
    5c0e:	51 e1       	ldi	r21, 0x11	; 17
    5c10:	07 c0       	rjmp	.+14     	; 0x5c20 <__udivmodhi4_ep>

00005c12 <__udivmodhi4_loop>:
    5c12:	aa 1f       	adc	r26, r26
    5c14:	bb 1f       	adc	r27, r27
    5c16:	a6 17       	cp	r26, r22
    5c18:	b7 07       	cpc	r27, r23
    5c1a:	10 f0       	brcs	.+4      	; 0x5c20 <__udivmodhi4_ep>
    5c1c:	a6 1b       	sub	r26, r22
    5c1e:	b7 0b       	sbc	r27, r23

00005c20 <__udivmodhi4_ep>:
    5c20:	88 1f       	adc	r24, r24
    5c22:	99 1f       	adc	r25, r25
    5c24:	5a 95       	dec	r21
    5c26:	a9 f7       	brne	.-22     	; 0x5c12 <__udivmodhi4_loop>
    5c28:	80 95       	com	r24
    5c2a:	90 95       	com	r25
    5c2c:	bc 01       	movw	r22, r24
    5c2e:	cd 01       	movw	r24, r26
    5c30:	08 95       	ret

00005c32 <__prologue_saves__>:
    5c32:	2f 92       	push	r2
    5c34:	3f 92       	push	r3
    5c36:	4f 92       	push	r4
    5c38:	5f 92       	push	r5
    5c3a:	6f 92       	push	r6
    5c3c:	7f 92       	push	r7
    5c3e:	8f 92       	push	r8
    5c40:	9f 92       	push	r9
    5c42:	af 92       	push	r10
    5c44:	bf 92       	push	r11
    5c46:	cf 92       	push	r12
    5c48:	df 92       	push	r13
    5c4a:	ef 92       	push	r14
    5c4c:	ff 92       	push	r15
    5c4e:	0f 93       	push	r16
    5c50:	1f 93       	push	r17
    5c52:	cf 93       	push	r28
    5c54:	df 93       	push	r29
    5c56:	cd b7       	in	r28, 0x3d	; 61
    5c58:	de b7       	in	r29, 0x3e	; 62
    5c5a:	ca 1b       	sub	r28, r26
    5c5c:	db 0b       	sbc	r29, r27
    5c5e:	0f b6       	in	r0, 0x3f	; 63
    5c60:	f8 94       	cli
    5c62:	de bf       	out	0x3e, r29	; 62
    5c64:	0f be       	out	0x3f, r0	; 63
    5c66:	cd bf       	out	0x3d, r28	; 61
    5c68:	09 94       	ijmp

00005c6a <__epilogue_restores__>:
    5c6a:	2a 88       	ldd	r2, Y+18	; 0x12
    5c6c:	39 88       	ldd	r3, Y+17	; 0x11
    5c6e:	48 88       	ldd	r4, Y+16	; 0x10
    5c70:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c72:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c74:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c76:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c78:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c7c:	b9 84       	ldd	r11, Y+9	; 0x09
    5c7e:	c8 84       	ldd	r12, Y+8	; 0x08
    5c80:	df 80       	ldd	r13, Y+7	; 0x07
    5c82:	ee 80       	ldd	r14, Y+6	; 0x06
    5c84:	fd 80       	ldd	r15, Y+5	; 0x05
    5c86:	0c 81       	ldd	r16, Y+4	; 0x04
    5c88:	1b 81       	ldd	r17, Y+3	; 0x03
    5c8a:	aa 81       	ldd	r26, Y+2	; 0x02
    5c8c:	b9 81       	ldd	r27, Y+1	; 0x01
    5c8e:	ce 0f       	add	r28, r30
    5c90:	d1 1d       	adc	r29, r1
    5c92:	0f b6       	in	r0, 0x3f	; 63
    5c94:	f8 94       	cli
    5c96:	de bf       	out	0x3e, r29	; 62
    5c98:	0f be       	out	0x3f, r0	; 63
    5c9a:	cd bf       	out	0x3d, r28	; 61
    5c9c:	ed 01       	movw	r28, r26
    5c9e:	08 95       	ret

00005ca0 <ceil>:
    5ca0:	3b d0       	rcall	.+118    	; 0x5d18 <__fp_trunc>
    5ca2:	80 f0       	brcs	.+32     	; 0x5cc4 <ceil+0x24>
    5ca4:	9f 37       	cpi	r25, 0x7F	; 127
    5ca6:	40 f4       	brcc	.+16     	; 0x5cb8 <ceil+0x18>
    5ca8:	91 11       	cpse	r25, r1
    5caa:	0e f4       	brtc	.+2      	; 0x5cae <ceil+0xe>
    5cac:	4d c0       	rjmp	.+154    	; 0x5d48 <__fp_szero>
    5cae:	60 e0       	ldi	r22, 0x00	; 0
    5cb0:	70 e0       	ldi	r23, 0x00	; 0
    5cb2:	80 e8       	ldi	r24, 0x80	; 128
    5cb4:	9f e3       	ldi	r25, 0x3F	; 63
    5cb6:	08 95       	ret
    5cb8:	26 f0       	brts	.+8      	; 0x5cc2 <ceil+0x22>
    5cba:	1b 16       	cp	r1, r27
    5cbc:	61 1d       	adc	r22, r1
    5cbe:	71 1d       	adc	r23, r1
    5cc0:	81 1d       	adc	r24, r1
    5cc2:	01 c0       	rjmp	.+2      	; 0x5cc6 <__fp_mintl>
    5cc4:	1b c0       	rjmp	.+54     	; 0x5cfc <__fp_mpack>

00005cc6 <__fp_mintl>:
    5cc6:	88 23       	and	r24, r24
    5cc8:	71 f4       	brne	.+28     	; 0x5ce6 <__fp_mintl+0x20>
    5cca:	77 23       	and	r23, r23
    5ccc:	21 f0       	breq	.+8      	; 0x5cd6 <__fp_mintl+0x10>
    5cce:	98 50       	subi	r25, 0x08	; 8
    5cd0:	87 2b       	or	r24, r23
    5cd2:	76 2f       	mov	r23, r22
    5cd4:	07 c0       	rjmp	.+14     	; 0x5ce4 <__fp_mintl+0x1e>
    5cd6:	66 23       	and	r22, r22
    5cd8:	11 f4       	brne	.+4      	; 0x5cde <__fp_mintl+0x18>
    5cda:	99 27       	eor	r25, r25
    5cdc:	0d c0       	rjmp	.+26     	; 0x5cf8 <__fp_mintl+0x32>
    5cde:	90 51       	subi	r25, 0x10	; 16
    5ce0:	86 2b       	or	r24, r22
    5ce2:	70 e0       	ldi	r23, 0x00	; 0
    5ce4:	60 e0       	ldi	r22, 0x00	; 0
    5ce6:	2a f0       	brmi	.+10     	; 0x5cf2 <__fp_mintl+0x2c>
    5ce8:	9a 95       	dec	r25
    5cea:	66 0f       	add	r22, r22
    5cec:	77 1f       	adc	r23, r23
    5cee:	88 1f       	adc	r24, r24
    5cf0:	da f7       	brpl	.-10     	; 0x5ce8 <__fp_mintl+0x22>
    5cf2:	88 0f       	add	r24, r24
    5cf4:	96 95       	lsr	r25
    5cf6:	87 95       	ror	r24
    5cf8:	97 f9       	bld	r25, 7
    5cfa:	08 95       	ret

00005cfc <__fp_mpack>:
    5cfc:	9f 3f       	cpi	r25, 0xFF	; 255
    5cfe:	31 f0       	breq	.+12     	; 0x5d0c <__fp_mpack_finite+0xc>

00005d00 <__fp_mpack_finite>:
    5d00:	91 50       	subi	r25, 0x01	; 1
    5d02:	20 f4       	brcc	.+8      	; 0x5d0c <__fp_mpack_finite+0xc>
    5d04:	87 95       	ror	r24
    5d06:	77 95       	ror	r23
    5d08:	67 95       	ror	r22
    5d0a:	b7 95       	ror	r27
    5d0c:	88 0f       	add	r24, r24
    5d0e:	91 1d       	adc	r25, r1
    5d10:	96 95       	lsr	r25
    5d12:	87 95       	ror	r24
    5d14:	97 f9       	bld	r25, 7
    5d16:	08 95       	ret

00005d18 <__fp_trunc>:
    5d18:	25 d0       	rcall	.+74     	; 0x5d64 <__fp_splitA>
    5d1a:	a0 f0       	brcs	.+40     	; 0x5d44 <__fp_trunc+0x2c>
    5d1c:	be e7       	ldi	r27, 0x7E	; 126
    5d1e:	b9 17       	cp	r27, r25
    5d20:	88 f4       	brcc	.+34     	; 0x5d44 <__fp_trunc+0x2c>
    5d22:	bb 27       	eor	r27, r27
    5d24:	9f 38       	cpi	r25, 0x8F	; 143
    5d26:	60 f4       	brcc	.+24     	; 0x5d40 <__fp_trunc+0x28>
    5d28:	16 16       	cp	r1, r22
    5d2a:	b1 1d       	adc	r27, r1
    5d2c:	67 2f       	mov	r22, r23
    5d2e:	78 2f       	mov	r23, r24
    5d30:	88 27       	eor	r24, r24
    5d32:	98 5f       	subi	r25, 0xF8	; 248
    5d34:	f7 cf       	rjmp	.-18     	; 0x5d24 <__fp_trunc+0xc>
    5d36:	86 95       	lsr	r24
    5d38:	77 95       	ror	r23
    5d3a:	67 95       	ror	r22
    5d3c:	b1 1d       	adc	r27, r1
    5d3e:	93 95       	inc	r25
    5d40:	96 39       	cpi	r25, 0x96	; 150
    5d42:	c8 f3       	brcs	.-14     	; 0x5d36 <__fp_trunc+0x1e>
    5d44:	08 95       	ret

00005d46 <__fp_zero>:
    5d46:	e8 94       	clt

00005d48 <__fp_szero>:
    5d48:	bb 27       	eor	r27, r27
    5d4a:	66 27       	eor	r22, r22
    5d4c:	77 27       	eor	r23, r23
    5d4e:	cb 01       	movw	r24, r22
    5d50:	97 f9       	bld	r25, 7
    5d52:	08 95       	ret

00005d54 <__fp_split3>:
    5d54:	57 fd       	sbrc	r21, 7
    5d56:	90 58       	subi	r25, 0x80	; 128
    5d58:	44 0f       	add	r20, r20
    5d5a:	55 1f       	adc	r21, r21
    5d5c:	59 f0       	breq	.+22     	; 0x5d74 <__fp_splitA+0x10>
    5d5e:	5f 3f       	cpi	r21, 0xFF	; 255
    5d60:	71 f0       	breq	.+28     	; 0x5d7e <__fp_splitA+0x1a>
    5d62:	47 95       	ror	r20

00005d64 <__fp_splitA>:
    5d64:	88 0f       	add	r24, r24
    5d66:	97 fb       	bst	r25, 7
    5d68:	99 1f       	adc	r25, r25
    5d6a:	61 f0       	breq	.+24     	; 0x5d84 <__fp_splitA+0x20>
    5d6c:	9f 3f       	cpi	r25, 0xFF	; 255
    5d6e:	79 f0       	breq	.+30     	; 0x5d8e <__fp_splitA+0x2a>
    5d70:	87 95       	ror	r24
    5d72:	08 95       	ret
    5d74:	12 16       	cp	r1, r18
    5d76:	13 06       	cpc	r1, r19
    5d78:	14 06       	cpc	r1, r20
    5d7a:	55 1f       	adc	r21, r21
    5d7c:	f2 cf       	rjmp	.-28     	; 0x5d62 <__fp_split3+0xe>
    5d7e:	46 95       	lsr	r20
    5d80:	f1 df       	rcall	.-30     	; 0x5d64 <__fp_splitA>
    5d82:	08 c0       	rjmp	.+16     	; 0x5d94 <__fp_splitA+0x30>
    5d84:	16 16       	cp	r1, r22
    5d86:	17 06       	cpc	r1, r23
    5d88:	18 06       	cpc	r1, r24
    5d8a:	99 1f       	adc	r25, r25
    5d8c:	f1 cf       	rjmp	.-30     	; 0x5d70 <__fp_splitA+0xc>
    5d8e:	86 95       	lsr	r24
    5d90:	71 05       	cpc	r23, r1
    5d92:	61 05       	cpc	r22, r1
    5d94:	08 94       	sec
    5d96:	08 95       	ret

00005d98 <_exit>:
    5d98:	f8 94       	cli

00005d9a <__stop_program>:
    5d9a:	ff cf       	rjmp	.-2      	; 0x5d9a <__stop_program>
